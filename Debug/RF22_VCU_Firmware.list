
RF22_VCU_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007704  08007704  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800770c  0800770c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800770c  0800770c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043a0  20000074  08007788  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004414  08007788  00024414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcb4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003902  00000000  00000000  0003bd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00040ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d8d  00000000  00000000  00041e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f8e  00000000  00000000  00067b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e91a8  00000000  00000000  0007fb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  00168d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075a0 	.word	0x080075a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080075a0 	.word	0x080075a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8000bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	20000144 	.word	0x20000144

08000bf8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f001 ffdf 	bl	8002bca <HAL_CAN_GetRxMessage>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000c12:	f000 fcef 	bl	80015f4 <Error_Handler>
	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200042a8 	.word	0x200042a8
 8000c24:	20004394 	.word	0x20004394

08000c28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c2e:	f001 f849 	bl	8001cc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c32:	f000 f887 	bl	8000d44 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c36:	f000 fabd 	bl	80011b4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c3a:	f000 fa61 	bl	8001100 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000c3e:	f000 fa89 	bl	8001154 <MX_DMA_Init>
	MX_ADC1_Init();
 8000c42:	f000 f8f1 	bl	8000e28 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000c46:	f000 f941 	bl	8000ecc <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c4a:	f000 f991 	bl	8000f70 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c4e:	f000 f9e1 	bl	8001014 <MX_CAN1_Init>
	MX_TIM10_Init();
 8000c52:	f000 fa31 	bl	80010b8 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Linear Sensor) in DMA mode
 8000c56:	2201      	movs	r2, #1
 8000c58:	492c      	ldr	r1, [pc, #176]	; (8000d0c <main+0xe4>)
 8000c5a:	482d      	ldr	r0, [pc, #180]	; (8000d10 <main+0xe8>)
 8000c5c:	f001 f8dc 	bl	8001e18 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal[0], 1); //start the ADC for Brake Pressure Sensors in DMA mode
 8000c60:	2201      	movs	r2, #1
 8000c62:	492c      	ldr	r1, [pc, #176]	; (8000d14 <main+0xec>)
 8000c64:	482c      	ldr	r0, [pc, #176]	; (8000d18 <main+0xf0>)
 8000c66:	f001 f8d7 	bl	8001e18 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Rotational Sensor) in DMA mode
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	492b      	ldr	r1, [pc, #172]	; (8000d1c <main+0xf4>)
 8000c6e:	482c      	ldr	r0, [pc, #176]	; (8000d20 <main+0xf8>)
 8000c70:	f001 f8d2 	bl	8001e18 <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 8000c74:	482b      	ldr	r0, [pc, #172]	; (8000d24 <main+0xfc>)
 8000c76:	f001 fe89 	bl	800298c <HAL_CAN_Start>
//			!= HAL_OK) {
//		Error_Handler();
//	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <main+0x100>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <main+0x100>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <main+0x100>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <main+0x100>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x22;	//CAN ID of this device
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <main+0x100>)
 8000c94:	2222      	movs	r2, #34	; 0x22
 8000c96:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <main+0x100>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	751a      	strb	r2, [r3, #20]

// Ready to Drive check (returns true if ready and false if not ready)
	ready_to_drive = Ready_to_Drive();
 8000c9e:	f000 fb23 	bl	80012e8 <Ready_to_Drive>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <main+0x104>)
 8000ca8:	701a      	strb	r2, [r3, #0]

	if (ready_to_drive) {
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <main+0x104>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d004      	beq.n	8000cbc <main+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <main+0x108>)
 8000cb8:	f003 f8c6 	bl	8003e48 <HAL_GPIO_WritePin>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Torque_Command */
	osThreadDef(Torque_Command, start_Torque_Command, osPriorityRealtime, 0,
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <main+0x10c>)
 8000cbe:	f107 041c 	add.w	r4, r7, #28
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			256);
	Torque_CommandHandle = osThreadCreate(osThread(Torque_Command), NULL);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 fd3f 	bl	800575a <osThreadCreate>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <main+0x110>)
 8000ce0:	6013      	str	r3, [r2, #0]

	/* definition and creation of Brake_Sensor */
	osThreadDef(Brake_Sensor, start_Brake_Sensor, osPriorityNormal, 0, 128);
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <main+0x114>)
 8000ce4:	463c      	mov	r4, r7
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Brake_SensorHandle = osThreadCreate(osThread(Brake_Sensor), NULL);
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 fd2e 	bl	800575a <osThreadCreate>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <main+0x118>)
 8000d02:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000d04:	f004 fd22 	bl	800574c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000d08:	e7fe      	b.n	8000d08 <main+0xe0>
 8000d0a:	bf00      	nop
 8000d0c:	200043b0 	.word	0x200043b0
 8000d10:	200041a0 	.word	0x200041a0
 8000d14:	20004290 	.word	0x20004290
 8000d18:	200041e8 	.word	0x200041e8
 8000d1c:	200043b4 	.word	0x200043b4
 8000d20:	200040ac 	.word	0x200040ac
 8000d24:	20004354 	.word	0x20004354
 8000d28:	2000437c 	.word	0x2000437c
 8000d2c:	20000344 	.word	0x20000344
 8000d30:	40020000 	.word	0x40020000
 8000d34:	080075d8 	.word	0x080075d8
 8000d38:	200040a8 	.word	0x200040a8
 8000d3c:	080075f4 	.word	0x080075f4
 8000d40:	2000419c 	.word	0x2000419c

08000d44 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	; 0x50
 8000d48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2234      	movs	r2, #52	; 0x34
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f005 ff94 	bl	8006c80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <SystemClock_Config+0xdc>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <SystemClock_Config+0xdc>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <SystemClock_Config+0xdc>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <SystemClock_Config+0xe0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <SystemClock_Config+0xe0>)
 8000d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <SystemClock_Config+0xe0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	2301      	movs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	2310      	movs	r3, #16
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dac:	2302      	movs	r3, #2
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000db4:	2308      	movs	r3, #8
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000db8:	23b4      	movs	r3, #180	; 0xb4
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fbbd 	bl	800454c <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x98>
		Error_Handler();
 8000dd8:	f000 fc0c 	bl	80015f4 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000ddc:	f003 f868 	bl	8003eb0 <HAL_PWREx_EnableOverDrive>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xa6>
		Error_Handler();
 8000de6:	f000 fc05 	bl	80015f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2105      	movs	r1, #5
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 f8a1 	bl	8003f50 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xd4>
		Error_Handler();
 8000e14:	f000 fbee 	bl	80015f4 <Error_Handler>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	; 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x9c>)
 8000e3e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e46:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <MX_ADC1_Init+0xa0>)
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e8a:	f000 ff81 	bl	8001d90 <HAL_ADC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000e94:	f000 fbae 	bl	80015f4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000eaa:	f001 f8e3 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000eb4:	f000 fb9e 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200041a0 	.word	0x200041a0
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <MX_ADC2_Init+0x9c>)
 8000ee2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eea:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_ADC2_Init+0xa0>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f2e:	f000 ff2f 	bl	8001d90 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC2_Init+0x70>
		Error_Handler();
 8000f38:	f000 fb5c 	bl	80015f4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_ADC2_Init+0x98>)
 8000f4e:	f001 f891 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC2_Init+0x90>
		Error_Handler();
 8000f58:	f000 fb4c 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200040ac 	.word	0x200040ac
 8000f68:	40012100 	.word	0x40012100
 8000f6c:	0f000001 	.word	0x0f000001

08000f70 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC3_Init+0x98>)
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <MX_ADC3_Init+0x9c>)
 8000f86:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC3_Init+0x98>)
 8000f8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC3_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_ADC3_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC3_Init+0x98>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <MX_ADC3_Init+0xa0>)
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_ADC3_Init+0x98>)
 8000fd2:	f000 fedd 	bl	8001d90 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000fdc:	f000 fb0a 	bl	80015f4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC3_Init+0x98>)
 8000ff2:	f001 f83f 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000ffc:	f000 fafa 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200041e8 	.word	0x200041e8
 800100c:	40012200 	.word	0x40012200
 8001010:	0f000001 	.word	0x0f000001

08001014 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <MX_CAN1_Init+0x9c>)
 800101c:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <MX_CAN1_Init+0xa0>)
 800101e:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001022:	2212      	movs	r2, #18
 8001024:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_CAN1_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001038:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_CAN1_Init+0x9c>)
 800103c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001040:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001044:	2200      	movs	r2, #0
 8001046:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_CAN1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001050:	2200      	movs	r2, #0
 8001052:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001056:	2201      	movs	r2, #1
 8001058:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_CAN1_Init+0x9c>)
 800105c:	2200      	movs	r2, #0
 800105e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001062:	2200      	movs	r2, #0
 8001064:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MX_CAN1_Init+0x9c>)
 8001068:	f001 fab4 	bl	80025d4 <HAL_CAN_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_CAN1_Init+0x62>
		Error_Handler();
 8001072:	f000 fabf 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001096:	2301      	movs	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_CAN1_Init+0x9c>)
 80010a4:	f001 fb92 	bl	80027cc <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20004354 	.word	0x20004354
 80010b4:	40006400 	.word	0x40006400

080010b8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <MX_TIM10_Init+0x44>)
 80010c0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1800 - 1;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010c4:	f240 7207 	movw	r2, #1799	; 0x707
 80010c8:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d6:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010e6:	f003 fccf 	bl	8004a88 <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM10_Init+0x3c>
		Error_Handler();
 80010f0:	f000 fa80 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200040f4 	.word	0x200040f4
 80010fc:	40014400 	.word	0x40014400

08001100 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_USART2_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001138:	f003 ffda 	bl	80050f0 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001142:	f000 fa57 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200042b0 	.word	0x200042b0
 8001150:	40004400 	.word	0x40004400

08001154 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_DMA_Init+0x5c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_DMA_Init+0x5c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_DMA_Init+0x5c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	2038      	movs	r0, #56	; 0x38
 800117c:	f002 f91e 	bl	80033bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001180:	2038      	movs	r0, #56	; 0x38
 8001182:	f002 f937 	bl	80033f4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	2039      	movs	r0, #57	; 0x39
 800118c:	f002 f916 	bl	80033bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001190:	2039      	movs	r0, #57	; 0x39
 8001192:	f002 f92f 	bl	80033f4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	203a      	movs	r0, #58	; 0x3a
 800119c:	f002 f90e 	bl	80033bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011a0:	203a      	movs	r0, #58	; 0x3a
 80011a2:	f002 f927 	bl	80033f4 <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <MX_GPIO_Init+0x128>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a42      	ldr	r2, [pc, #264]	; (80012dc <MX_GPIO_Init+0x128>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b40      	ldr	r3, [pc, #256]	; (80012dc <MX_GPIO_Init+0x128>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <MX_GPIO_Init+0x128>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <MX_GPIO_Init+0x128>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <MX_GPIO_Init+0x128>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <MX_GPIO_Init+0x128>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a34      	ldr	r2, [pc, #208]	; (80012dc <MX_GPIO_Init+0x128>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <MX_GPIO_Init+0x128>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MX_GPIO_Init+0x128>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <MX_GPIO_Init+0x128>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MX_GPIO_Init+0x128>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 800123a:	2200      	movs	r2, #0
 800123c:	2104      	movs	r1, #4
 800123e:	4828      	ldr	r0, [pc, #160]	; (80012e0 <MX_GPIO_Init+0x12c>)
 8001240:	f002 fe02 	bl	8003e48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2120      	movs	r1, #32
 8001248:	4826      	ldr	r0, [pc, #152]	; (80012e4 <MX_GPIO_Init+0x130>)
 800124a:	f002 fdfd 	bl	8003e48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001254:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001258:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <MX_GPIO_Init+0x12c>)
 8001266:	f002 fc43 	bl	8003af0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001272:	2301      	movs	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4818      	ldr	r0, [pc, #96]	; (80012e0 <MX_GPIO_Init+0x12c>)
 800127e:	f002 fc37 	bl	8003af0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 8001282:	2304      	movs	r3, #4
 8001284:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <MX_GPIO_Init+0x12c>)
 800129a:	f002 fc29 	bl	8003af0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800129e:	2320      	movs	r3, #32
 80012a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <MX_GPIO_Init+0x130>)
 80012b6:	f002 fc1b 	bl	8003af0 <HAL_GPIO_Init>

	/*Configure GPIO pin : HV_Present_Pin */
	GPIO_InitStruct.Pin = HV_Present_Pin;
 80012ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(HV_Present_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_GPIO_Init+0x130>)
 80012d0:	f002 fc0e 	bl	8003af0 <HAL_GPIO_Init>

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000

080012e8 <Ready_to_Drive>:

/* USER CODE BEGIN 4 */
static bool Ready_to_Drive(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	for (;;) {
		//checking if brakes are pressed, start button is pressed and HV Present at the same time
		if ((bpsVal[0] >= bpsThreshold)
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <Ready_to_Drive+0x4c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f640 52ac 	movw	r2, #3500	; 0xdac
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d3f9      	bcc.n	80012ec <Ready_to_Drive+0x4>
				&& (!HAL_GPIO_ReadPin(Start_Button_GPIO_Port, Start_Button_Pin))
 80012f8:	2102      	movs	r1, #2
 80012fa:	480f      	ldr	r0, [pc, #60]	; (8001338 <Ready_to_Drive+0x50>)
 80012fc:	f002 fd8c 	bl	8003e18 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f2      	bne.n	80012ec <Ready_to_Drive+0x4>
				&& (!HAL_GPIO_ReadPin(HV_Present_GPIO_Port, HV_Present_Pin))) {
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <Ready_to_Drive+0x54>)
 800130c:	f002 fd84 	bl	8003e18 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ea      	bne.n	80012ec <Ready_to_Drive+0x4>

			//sound buzzer for minimum of 1 second and maximum of 3 seconds using timer

			//Method 1
			HAL_GPIO_TogglePin(Ready_to_Drive_Sound_GPIO_Port,
 8001316:	2104      	movs	r1, #4
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <Ready_to_Drive+0x50>)
 800131a:	f002 fdae 	bl	8003e7a <HAL_GPIO_TogglePin>
			Ready_to_Drive_Sound_Pin);
			HAL_Delay(2000); //sound buzzer for 2 seconds
 800131e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001322:	f000 fd11 	bl	8001d48 <HAL_Delay>
			HAL_GPIO_TogglePin(Ready_to_Drive_Sound_GPIO_Port,
 8001326:	2104      	movs	r1, #4
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <Ready_to_Drive+0x50>)
 800132a:	f002 fda6 	bl	8003e7a <HAL_GPIO_TogglePin>
			//Ready_to_Drive_Sound_Pin, GPIO_PIN_SET);
			//HAL_Delay(2000); //sound buzzer for 2 seconds
			//HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port,
			//Ready_to_Drive_Sound_Pin, GPIO_PIN_RESET);

			return true;
 800132e:	2301      	movs	r3, #1

	} //end for loop

	return false; //shouldn't get to here

} //end Ready_to_Drive()
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20004290 	.word	0x20004290
 8001338:	40020800 	.word	0x40020800
 800133c:	40020000 	.word	0x40020000

08001340 <APPS_Mapping>:

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]

	apps_PP[0] = 0.0495 * (*appsVal_0) - 24.28;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fa21 	bl	8000798 <__aeabi_ui2d>
 8001356:	a324      	add	r3, pc, #144	; (adr r3, 80013e8 <APPS_Mapping+0xa8>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7fe ffb0 	bl	80002c0 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	a321      	add	r3, pc, #132	; (adr r3, 80013f0 <APPS_Mapping+0xb0>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f8d5 	bl	800051c <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fa87 	bl	800088c <__aeabi_d2uiz>
 800137e:	4602      	mov	r2, r0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]

	if (apps_PP[0] < 0) {
		apps_PP[0] = 0;
	}
	if (apps_PP[0] > 100) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b64      	cmp	r3, #100	; 0x64
 800138a:	d902      	bls.n	8001392 <APPS_Mapping+0x52>
		apps_PP[0] = 100;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2264      	movs	r2, #100	; 0x64
 8001390:	601a      	str	r2, [r3, #0]
	}

	apps_PP[1] = 0.034 * (*appsVal_1) - 24.49;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f9fe 	bl	8000798 <__aeabi_ui2d>
 800139c:	a316      	add	r3, pc, #88	; (adr r3, 80013f8 <APPS_Mapping+0xb8>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7fe ff8d 	bl	80002c0 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	a314      	add	r3, pc, #80	; (adr r3, 8001400 <APPS_Mapping+0xc0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f8b2 	bl	800051c <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1d1c      	adds	r4, r3, #4
 80013c4:	f7ff fa62 	bl	800088c <__aeabi_d2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	6023      	str	r3, [r4, #0]

	if (apps_PP[1] < 0) {
		apps_PP[1] = 0;
	}
	if (apps_PP[1] > 100) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3304      	adds	r3, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d903      	bls.n	80013de <APPS_Mapping+0x9e>
		apps_PP[1] = 100;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3304      	adds	r3, #4
 80013da:	2264      	movs	r2, #100	; 0x64
 80013dc:	601a      	str	r2, [r3, #0]
	}

} //end APPS_Mapping()
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	624dd2f2 	.word	0x624dd2f2
 80013ec:	3fa95810 	.word	0x3fa95810
 80013f0:	147ae148 	.word	0x147ae148
 80013f4:	403847ae 	.word	0x403847ae
 80013f8:	b020c49c 	.word	0xb020c49c
 80013fc:	3fa16872 	.word	0x3fa16872
 8001400:	a3d70a3d 	.word	0xa3d70a3d
 8001404:	40387d70 	.word	0x40387d70

08001408 <start_Torque_Command>:
 * @brief  Function implementing the Torque_Command thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_Torque_Command */
void start_Torque_Command(void const *argument) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b0c7      	sub	sp, #284	; 0x11c
 800140c:	af02      	add	r7, sp, #8
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	6018      	str	r0, [r3, #0]

	//First need to send Drive Enable command in order to gain control over the motor controller
	//Motor controller will timeout if it dosn't receive Drive Enable command or dosn't periodically receive Set Current command
	//We can send the Drive Enable command once and then periodically send Set Current command to prevent it from timing out.

	TxData[0] = 0x24; //Message ID for "Drive Enable" for motor controller
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <start_Torque_Command+0x178>)
 8001414:	2224      	movs	r2, #36	; 0x24
 8001416:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x1F; //Node ID for Standard CAN message
 8001418:	4b59      	ldr	r3, [pc, #356]	; (8001580 <start_Torque_Command+0x178>)
 800141a:	221f      	movs	r2, #31
 800141c:	705a      	strb	r2, [r3, #1]
	TxData[2] = 1; // 1: TRUE enables drive, 0: FALSE disables drive
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <start_Torque_Command+0x178>)
 8001420:	2201      	movs	r2, #1
 8001422:	709a      	strb	r2, [r3, #2]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <start_Torque_Command+0x17c>)
 8001426:	4a56      	ldr	r2, [pc, #344]	; (8001580 <start_Torque_Command+0x178>)
 8001428:	4957      	ldr	r1, [pc, #348]	; (8001588 <start_Torque_Command+0x180>)
 800142a:	4858      	ldr	r0, [pc, #352]	; (800158c <start_Torque_Command+0x184>)
 800142c:	f001 faf2 	bl	8002a14 <HAL_CAN_AddTxMessage>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <start_Torque_Command+0x32>
		Error_Handler();
 8001436:	f000 f8dd 	bl	80015f4 <Error_Handler>

	/* Infinite loop */
	for (;;) {
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 800143a:	4b55      	ldr	r3, [pc, #340]	; (8001590 <start_Torque_Command+0x188>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	22c8      	movs	r2, #200	; 0xc8
 8001440:	4293      	cmp	r3, r2
 8001442:	d305      	bcc.n	8001450 <start_Torque_Command+0x48>
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <start_Torque_Command+0x188>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800144c:	4293      	cmp	r3, r2
 800144e:	d902      	bls.n	8001456 <start_Torque_Command+0x4e>
			//shutdown power to motor
			APPS_Failure = true;
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <start_Torque_Command+0x18c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
			//need to send out CAN message to set motor torque to zero
		}

		if ((appsVal[1] < APPS_1_MIN) || (appsVal[1] > APPS_1_MAX)) {
 8001456:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <start_Torque_Command+0x188>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800145e:	4293      	cmp	r3, r2
 8001460:	d305      	bcc.n	800146e <start_Torque_Command+0x66>
 8001462:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <start_Torque_Command+0x188>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f640 723c 	movw	r2, #3900	; 0xf3c
 800146a:	4293      	cmp	r3, r2
 800146c:	d903      	bls.n	8001476 <start_Torque_Command+0x6e>
			//shutdown power to motor
			APPS_Failure = true;
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <start_Torque_Command+0x18c>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	e080      	b.n	8001578 <start_Torque_Command+0x170>
			//need to send out CAN message to set motor torque to zero
		}

		else {
			APPS_Failure = false;
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <start_Torque_Command+0x18c>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

			APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 800147c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001480:	461a      	mov	r2, r3
 8001482:	4945      	ldr	r1, [pc, #276]	; (8001598 <start_Torque_Command+0x190>)
 8001484:	4842      	ldr	r0, [pc, #264]	; (8001590 <start_Torque_Command+0x188>)
 8001486:	f7ff ff5b 	bl	8001340 <APPS_Mapping>

			sprintf(msg,
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <start_Torque_Command+0x188>)
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <start_Torque_Command+0x188>)
 8001490:	685c      	ldr	r4, [r3, #4]
 8001492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001496:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800149a:	f107 0008 	add.w	r0, r7, #8
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4623      	mov	r3, r4
 80014a4:	460a      	mov	r2, r1
 80014a6:	493d      	ldr	r1, [pc, #244]	; (800159c <start_Torque_Command+0x194>)
 80014a8:	f005 fcc6 	bl	8006e38 <siprintf>
					"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu \r\n",
					appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fead 	bl	8000210 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f107 0108 	add.w	r1, r7, #8
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	4837      	ldr	r0, [pc, #220]	; (80015a0 <start_Torque_Command+0x198>)
 80014c4:	f003 fe61 	bl	800518a <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			if (abs(apps_PP[0] - apps_PP[1]) <= 10) {
 80014c8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80014cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f113 0f0a 	cmn.w	r3, #10
 80014d6:	db32      	blt.n	800153e <start_Torque_Command+0x136>
 80014d8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80014dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	dc2b      	bgt.n	800153e <start_Torque_Command+0x136>
				//reset the 100ms timer if started since there is no >10% implausibility
				HAL_TIM_Base_Stop(&htim10);
 80014e6:	482f      	ldr	r0, [pc, #188]	; (80015a4 <start_Torque_Command+0x19c>)
 80014e8:	f003 fb86 	bl	8004bf8 <HAL_TIM_Base_Stop>
				timer_100ms = 0;
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <start_Torque_Command+0x1a0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
				implausibility = false;
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <start_Torque_Command+0x1a4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
				//osTimerStop(implausibility_TimerHandle);

				//Broadcast messages sent to motor controller to control motor torque
				TxData[0] = 0x1A; //Message ID for "Set AC Current" for motor controller
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <start_Torque_Command+0x178>)
 80014fa:	221a      	movs	r2, #26
 80014fc:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x1F; //Node ID for Standard CAN message
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <start_Torque_Command+0x178>)
 8001500:	221f      	movs	r2, #31
 8001502:	705a      	strb	r2, [r3, #1]
				TxData[2] = 10 * apps_PP[0]; //Will take the linear sensor as the primary sensor for sending signals to motor controller. (Needs to be scaled by 10 first)
 8001504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <start_Torque_Command+0x178>)
 8001516:	709a      	strb	r2, [r3, #2]

				if (!APPS_Failure) {
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <start_Torque_Command+0x18c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d027      	beq.n	8001576 <start_Torque_Command+0x16e>
					//Send out CAN message
					if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData,
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <start_Torque_Command+0x17c>)
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <start_Torque_Command+0x178>)
 800152a:	4917      	ldr	r1, [pc, #92]	; (8001588 <start_Torque_Command+0x180>)
 800152c:	4817      	ldr	r0, [pc, #92]	; (800158c <start_Torque_Command+0x184>)
 800152e:	f001 fa71 	bl	8002a14 <HAL_CAN_AddTxMessage>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01e      	beq.n	8001576 <start_Torque_Command+0x16e>
							&TxMailbox) != HAL_OK) {
						Error_Handler();
 8001538:	f000 f85c 	bl	80015f4 <Error_Handler>
				if (!APPS_Failure) {
 800153c:	e01b      	b.n	8001576 <start_Torque_Command+0x16e>

			else {
				//Should only get here if there is a >10% difference between APPS

				// check to see if timer has run for >100ms then send CAN message to set motor torque to zero
				if (implausibility) {
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <start_Torque_Command+0x1a4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <start_Torque_Command+0x154>
					if (__HAL_TIM_GET_COUNTER(&htim10) - timer_100ms >= 10000) {
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <start_Torque_Command+0x19c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <start_Torque_Command+0x1a0>)
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	f242 720f 	movw	r2, #9999	; 0x270f
 8001556:	4293      	cmp	r3, r2
 8001558:	d80e      	bhi.n	8001578 <start_Torque_Command+0x170>
						//shutdown power to motor
					} else {
						continue; //go back to beginning of loop (not sure if needed)
 800155a:	e010      	b.n	800157e <start_Torque_Command+0x176>
					}
				} //end if
				else {
					//start 100ms timer if not started
					HAL_TIM_Base_Start(&htim10);
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <start_Torque_Command+0x19c>)
 800155e:	f003 fae3 	bl	8004b28 <HAL_TIM_Base_Start>
					timer_100ms = __HAL_TIM_GET_COUNTER(&htim10);
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <start_Torque_Command+0x19c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <start_Torque_Command+0x1a0>)
 800156c:	801a      	strh	r2, [r3, #0]
					implausibility = true;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <start_Torque_Command+0x1a4>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e000      	b.n	8001578 <start_Torque_Command+0x170>
				if (!APPS_Failure) {
 8001576:	bf00      	nop
				} //end else

			} //end else

		} //end else
		osDelay(50);
 8001578:	2032      	movs	r0, #50	; 0x32
 800157a:	f004 f93a 	bl	80057f2 <osDelay>
		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 800157e:	e75c      	b.n	800143a <start_Torque_Command+0x32>
 8001580:	20004298 	.word	0x20004298
 8001584:	200042a4 	.word	0x200042a4
 8001588:	2000437c 	.word	0x2000437c
 800158c:	20004354 	.word	0x20004354
 8001590:	200043b0 	.word	0x200043b0
 8001594:	20000345 	.word	0x20000345
 8001598:	200043b4 	.word	0x200043b4
 800159c:	08007610 	.word	0x08007610
 80015a0:	200042b0 	.word	0x200042b0
 80015a4:	200040f4 	.word	0x200040f4
 80015a8:	200042a0 	.word	0x200042a0
 80015ac:	20000346 	.word	0x20000346

080015b0 <start_Brake_Sensor>:
 * @brief Function implementing the Brake_Sensor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_Brake_Sensor */
void start_Brake_Sensor(void const *argument) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN start_Brake_Sensor */
	/* Infinite loop */
	for (;;) {
		//Light up brake light if brakes are pressed

		if ((bpsVal[0] < bps_MIN) || (bpsVal[0] > bps_MAX)) {
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <start_Brake_Sensor+0x1c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015c0:	4293      	cmp	r3, r2
			//Shutdown power to motor
		}
		osDelay(100);
 80015c2:	2064      	movs	r0, #100	; 0x64
 80015c4:	f004 f915 	bl	80057f2 <osDelay>
		if ((bpsVal[0] < bps_MIN) || (bpsVal[0] > bps_MAX)) {
 80015c8:	e7f6      	b.n	80015b8 <start_Brake_Sensor+0x8>
 80015ca:	bf00      	nop
 80015cc:	20004290 	.word	0x20004290

080015d0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80015e2:	f000 fb91 	bl	8001d08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010000 	.word	0x40010000

080015f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_MspInit+0x54>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_MspInit+0x54>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_MspInit+0x54>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_MspInit+0x54>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_MspInit+0x54>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_MspInit+0x54>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	210f      	movs	r1, #15
 8001642:	f06f 0001 	mvn.w	r0, #1
 8001646:	f001 feb9 	bl	80033bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a9b      	ldr	r2, [pc, #620]	; (80018e4 <HAL_ADC_MspInit+0x28c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d161      	bne.n	800173e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a99      	ldr	r2, [pc, #612]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	4b93      	ldr	r3, [pc, #588]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a92      	ldr	r2, [pc, #584]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b90      	ldr	r3, [pc, #576]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b6:	2303      	movs	r3, #3
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4889      	ldr	r0, [pc, #548]	; (80018ec <HAL_ADC_MspInit+0x294>)
 80016c6:	f002 fa13 	bl	8003af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016cc:	4a89      	ldr	r2, [pc, #548]	; (80018f4 <HAL_ADC_MspInit+0x29c>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016d0:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d6:	4b86      	ldr	r3, [pc, #536]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ea:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f2:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016fa:	4b7d      	ldr	r3, [pc, #500]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 80016fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001700:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001708:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 800170a:	2204      	movs	r2, #4
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 8001710:	2203      	movs	r2, #3
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001714:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 8001716:	2200      	movs	r2, #0
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800171a:	4b75      	ldr	r3, [pc, #468]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001720:	4873      	ldr	r0, [pc, #460]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 8001722:	f001 fe75 	bl	8003410 <HAL_DMA_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 800172c:	f7ff ff62 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a6f      	ldr	r2, [pc, #444]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_ADC_MspInit+0x298>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800173c:	e0ce      	b.n	80018dc <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6d      	ldr	r2, [pc, #436]	; (80018f8 <HAL_ADC_MspInit+0x2a0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d162      	bne.n	800180e <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6453      	str	r3, [r2, #68]	; 0x44
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a5e      	ldr	r2, [pc, #376]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001780:	2302      	movs	r3, #2
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4856      	ldr	r0, [pc, #344]	; (80018ec <HAL_ADC_MspInit+0x294>)
 8001794:	f002 f9ac 	bl	8003af0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001798:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 800179a:	4a59      	ldr	r2, [pc, #356]	; (8001900 <HAL_ADC_MspInit+0x2a8>)
 800179c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800179e:	4b57      	ldr	r3, [pc, #348]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a6:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ba:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017d8:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017da:	2204      	movs	r2, #4
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017e0:	2203      	movs	r2, #3
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017f0:	4842      	ldr	r0, [pc, #264]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 80017f2:	f001 fe0d 	bl	8003410 <HAL_DMA_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 80017fc:	f7ff fefa 	bl	80015f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
 8001806:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <HAL_ADC_MspInit+0x2a4>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800180c:	e066      	b.n	80018dc <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a3c      	ldr	r2, [pc, #240]	; (8001904 <HAL_ADC_MspInit+0x2ac>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d161      	bne.n	80018dc <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 8001822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001826:	6453      	str	r3, [r2, #68]	; 0x44
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_ADC_MspInit+0x290>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001850:	2301      	movs	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4829      	ldr	r0, [pc, #164]	; (8001908 <HAL_ADC_MspInit+0x2b0>)
 8001864:	f002 f944 	bl	8003af0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_ADC_MspInit+0x2b8>)
 800186c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 8001870:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001874:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 8001884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001888:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 800188c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001890:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 8001894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001898:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 800189c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018aa:	2204      	movs	r2, #4
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018b0:	2203      	movs	r2, #3
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018c2:	f001 fda5 	bl	8003410 <HAL_DMA_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 80018cc:	f7ff fe92 	bl	80015f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
 80018d6:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_ADC_MspInit+0x2b4>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018dc:	bf00      	nop
 80018de:	3738      	adds	r7, #56	; 0x38
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40012000 	.word	0x40012000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	20004230 	.word	0x20004230
 80018f4:	40026410 	.word	0x40026410
 80018f8:	40012100 	.word	0x40012100
 80018fc:	200042f4 	.word	0x200042f4
 8001900:	40026440 	.word	0x40026440
 8001904:	40012200 	.word	0x40012200
 8001908:	40020800 	.word	0x40020800
 800190c:	2000413c 	.word	0x2000413c
 8001910:	40026428 	.word	0x40026428

08001914 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_CAN_MspInit+0x94>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d134      	bne.n	80019a0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_CAN_MspInit+0x98>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_CAN_MspInit+0x98>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800196e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001980:	2309      	movs	r3, #9
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_CAN_MspInit+0x9c>)
 800198c:	f002 f8b0 	bl	8003af0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2105      	movs	r1, #5
 8001994:	2014      	movs	r0, #20
 8001996:	f001 fd11 	bl	80033bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800199a:	2014      	movs	r0, #20
 800199c:	f001 fd2a 	bl	80033f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40006400 	.word	0x40006400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_TIM_Base_MspInit+0x48>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d115      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_TIM_Base_MspInit+0x4c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <HAL_TIM_Base_MspInit+0x4c>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_TIM_Base_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2105      	movs	r1, #5
 80019e6:	2019      	movs	r0, #25
 80019e8:	f001 fce8 	bl	80033bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019ec:	2019      	movs	r0, #25
 80019ee:	f001 fd01 	bl	80033f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40014400 	.word	0x40014400
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_UART_MspInit+0x84>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d12b      	bne.n	8001a7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_UART_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_UART_MspInit+0x88>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_UART_MspInit+0x88>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_UART_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_UART_MspInit+0x88>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_UART_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a5e:	230c      	movs	r3, #12
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_UART_MspInit+0x8c>)
 8001a7a:	f002 f839 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40004400 	.word	0x40004400
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	2019      	movs	r0, #25
 8001aaa:	f001 fc87 	bl	80033bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aae:	2019      	movs	r0, #25
 8001ab0:	f001 fca0 	bl	80033f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_InitTick+0xa4>)
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <HAL_InitTick+0xa4>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_InitTick+0xa4>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ad0:	f107 0210 	add.w	r2, r7, #16
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fb52 	bl	8004184 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ae0:	f002 fb3c 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_InitTick+0xa8>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	3b01      	subs	r3, #1
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_InitTick+0xac>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_InitTick+0xb0>)
 8001afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_InitTick+0xac>)
 8001b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_InitTick+0xac>)
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_InitTick+0xac>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_InitTick+0xac>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <HAL_InitTick+0xac>)
 8001b1a:	f002 ffb5 	bl	8004a88 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b24:	4806      	ldr	r0, [pc, #24]	; (8001b40 <HAL_InitTick+0xac>)
 8001b26:	f003 f88f 	bl	8004c48 <HAL_TIM_Base_Start_IT>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3730      	adds	r7, #48	; 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	431bde83 	.word	0x431bde83
 8001b40:	200043b8 	.word	0x200043b8
 8001b44:	40010000 	.word	0x40010000

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <NMI_Handler+0x4>

08001b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <CAN1_RX0_IRQHandler+0x10>)
 8001b7a:	f001 f938 	bl	8002dee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20004354 	.word	0x20004354

08001b88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b8e:	f003 f8cb 	bl	8004d28 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b94:	f003 f8c8 	bl	8004d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200043b8 	.word	0x200043b8
 8001ba0:	200040f4 	.word	0x200040f4

08001ba4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <DMA2_Stream0_IRQHandler+0x10>)
 8001baa:	f001 fd37 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20004230 	.word	0x20004230

08001bb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <DMA2_Stream1_IRQHandler+0x10>)
 8001bbe:	f001 fd2d 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000413c 	.word	0x2000413c

08001bcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <DMA2_Stream2_IRQHandler+0x10>)
 8001bd2:	f001 fd23 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200042f4 	.word	0x200042f4

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f004 fffc 	bl	8006c0c <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20000348 	.word	0x20000348
 8001c48:	20004418 	.word	0x20004418

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c76:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c8c:	4c0b      	ldr	r4, [pc, #44]	; (8001cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c9a:	f7ff ffd7 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f004 ffbb 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7fe ffc1 	bl	8000c28 <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001cb4:	08007714 	.word	0x08007714
  ldr r2, =_sbss
 8001cb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cbc:	20004414 	.word	0x20004414

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f001 fb5a 	bl	80033a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	2005      	movs	r0, #5
 8001cf4:	f7ff fece 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fc82 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20004400 	.word	0x20004400

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20004400 	.word	0x20004400

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e033      	b.n	8001e0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fc52 	bl	8001658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd6:	f023 0302 	bic.w	r3, r3, #2
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fa78 	bl	80022d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dfe:	e001      	b.n	8001e04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Start_DMA+0x1e>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e0e9      	b.n	800200a <HAL_ADC_Start_DMA+0x1f2>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d018      	beq.n	8001e7e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_ADC_Start_DMA+0x1fc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6d      	ldr	r2, [pc, #436]	; (8002018 <HAL_ADC_Start_DMA+0x200>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9a      	lsrs	r2, r3, #18
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8c:	d107      	bne.n	8001e9e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f040 80a1 	bne.w	8001ff0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eec:	d106      	bne.n	8001efc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f023 0206 	bic.w	r2, r3, #6
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8001efa:	e002      	b.n	8001f02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_ADC_Start_DMA+0x204>)
 8001f0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_ADC_Start_DMA+0x208>)
 8001f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_ADC_Start_DMA+0x20c>)
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_ADC_Start_DMA+0x210>)
 8001f24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	334c      	adds	r3, #76	; 0x4c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f001 fb04 	bl	800356c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12a      	bne.n	8001fc6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_ADC_Start_DMA+0x214>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d015      	beq.n	8001fa6 <HAL_ADC_Start_DMA+0x18e>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2c      	ldr	r2, [pc, #176]	; (8002030 <HAL_ADC_Start_DMA+0x218>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_Start_DMA+0x178>
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_ADC_Start_DMA+0x204>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_ADC_Start_DMA+0x21c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d136      	bne.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_ADC_Start_DMA+0x204>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d130      	bne.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d129      	bne.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	e020      	b.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_ADC_Start_DMA+0x214>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d11b      	bne.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d114      	bne.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e00b      	b.n	8002008 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000
 8002018:	431bde83 	.word	0x431bde83
 800201c:	40012300 	.word	0x40012300
 8002020:	080024d1 	.word	0x080024d1
 8002024:	0800258b 	.word	0x0800258b
 8002028:	080025a7 	.word	0x080025a7
 800202c:	40012000 	.word	0x40012000
 8002030:	40012100 	.word	0x40012100
 8002034:	40012200 	.word	0x40012200

08002038 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1c>
 800208c:	2302      	movs	r3, #2
 800208e:	e113      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x244>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b09      	cmp	r3, #9
 800209e:	d925      	bls.n	80020ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68d9      	ldr	r1, [r3, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	3b1e      	subs	r3, #30
 80020b6:	2207      	movs	r2, #7
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43da      	mvns	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	400a      	ands	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68d9      	ldr	r1, [r3, #12]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	4603      	mov	r3, r0
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4403      	add	r3, r0
 80020de:	3b1e      	subs	r3, #30
 80020e0:	409a      	lsls	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	e022      	b.n	8002132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	2207      	movs	r2, #7
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	4603      	mov	r3, r0
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4403      	add	r3, r0
 8002128:	409a      	lsls	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d824      	bhi.n	8002184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b05      	subs	r3, #5
 800214c:	221f      	movs	r2, #31
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	400a      	ands	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b05      	subs	r3, #5
 8002176:	fa00 f203 	lsl.w	r2, r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
 8002182:	e04c      	b.n	800221e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d824      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b23      	subs	r3, #35	; 0x23
 800219e:	221f      	movs	r2, #31
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43da      	mvns	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	400a      	ands	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b23      	subs	r3, #35	; 0x23
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
 80021d4:	e023      	b.n	800221e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b41      	subs	r3, #65	; 0x41
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	400a      	ands	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b41      	subs	r3, #65	; 0x41
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_ADC_ConfigChannel+0x250>)
 8002220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <HAL_ADC_ConfigChannel+0x254>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10f      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d8>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b12      	cmp	r3, #18
 8002232:	d10b      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_ADC_ConfigChannel+0x254>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12b      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x23a>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_ADC_ConfigChannel+0x258>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d003      	beq.n	8002268 <HAL_ADC_ConfigChannel+0x1f4>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b11      	cmp	r3, #17
 8002266:	d122      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_ADC_ConfigChannel+0x258>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d111      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_ADC_ConfigChannel+0x25c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_ADC_ConfigChannel+0x260>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	0c9a      	lsrs	r2, r3, #18
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40012300 	.word	0x40012300
 80022c8:	40012000 	.word	0x40012000
 80022cc:	10000012 	.word	0x10000012
 80022d0:	20000000 	.word	0x20000000
 80022d4:	431bde83 	.word	0x431bde83

080022d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e0:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <ADC_Init+0x1f0>)
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	4a58      	ldr	r2, [pc, #352]	; (80024cc <ADC_Init+0x1f4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800237e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6899      	ldr	r1, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e00f      	b.n	80023d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0202 	bic.w	r2, r2, #2
 80023e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e1b      	ldrb	r3, [r3, #24]
 80023f0:	005a      	lsls	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	3b01      	subs	r3, #1
 8002430:	035a      	lsls	r2, r3, #13
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e007      	b.n	800244c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	3b01      	subs	r3, #1
 8002468:	051a      	lsls	r2, r3, #20
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800248e:	025a      	lsls	r2, r3, #9
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	029a      	lsls	r2, r3, #10
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40012300 	.word	0x40012300
 80024cc:	0f000001 	.word	0x0f000001

080024d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d13c      	bne.n	8002564 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d12b      	bne.n	800255c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002508:	2b00      	cmp	r3, #0
 800250a:	d127      	bne.n	800255c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002524:	2b00      	cmp	r3, #0
 8002526:	d119      	bne.n	800255c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0220 	bic.w	r2, r2, #32
 8002536:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff fd6b 	bl	8002038 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002562:	e00e      	b.n	8002582 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff fd75 	bl	8002060 <HAL_ADC_ErrorCallback>
}
 8002576:	e004      	b.n	8002582 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fd57 	bl	800204c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff fd4a 	bl	8002060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0ed      	b.n	80027c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff f98e 	bl	8001914 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002608:	f7ff fb92 	bl	8001d30 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800260e:	e012      	b.n	8002636 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002610:	f7ff fb8e 	bl	8001d30 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d90b      	bls.n	8002636 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2205      	movs	r2, #5
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0c5      	b.n	80027c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0e5      	beq.n	8002610 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0202 	bic.w	r2, r2, #2
 8002652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002654:	f7ff fb6c 	bl	8001d30 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800265a:	e012      	b.n	8002682 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800265c:	f7ff fb68 	bl	8001d30 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b0a      	cmp	r3, #10
 8002668:	d90b      	bls.n	8002682 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2205      	movs	r2, #5
 800267a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e09f      	b.n	80027c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e5      	bne.n	800265c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7e1b      	ldrb	r3, [r3, #24]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e007      	b.n	80026ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7e5b      	ldrb	r3, [r3, #25]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7e9b      	ldrb	r3, [r3, #26]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d108      	bne.n	80026fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e007      	b.n	800270e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0220 	bic.w	r2, r2, #32
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7edb      	ldrb	r3, [r3, #27]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0210 	bic.w	r2, r2, #16
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e007      	b.n	8002738 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0210 	orr.w	r2, r2, #16
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0208 	orr.w	r2, r2, #8
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e007      	b.n	8002762 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0208 	bic.w	r2, r2, #8
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7f5b      	ldrb	r3, [r3, #29]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d108      	bne.n	800277c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0204 	orr.w	r2, r2, #4
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e007      	b.n	800278c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	ea42 0103 	orr.w	r1, r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	1e5a      	subs	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d003      	beq.n	80027f2 <HAL_CAN_ConfigFilter+0x26>
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	f040 80be 	bne.w	800296e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_CAN_ConfigFilter+0x1bc>)
 80027f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800280c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	431a      	orrs	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2201      	movs	r2, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	401a      	ands	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d123      	bne.n	800289c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002876:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3248      	adds	r2, #72	; 0x48
 800287c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002890:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002892:	6979      	ldr	r1, [r7, #20]
 8002894:	3348      	adds	r3, #72	; 0x48
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d122      	bne.n	80028ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3248      	adds	r2, #72	; 0x48
 80028ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e0:	6979      	ldr	r1, [r7, #20]
 80028e2:	3348      	adds	r3, #72	; 0x48
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	401a      	ands	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002904:	e007      	b.n	8002916 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	431a      	orrs	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	401a      	ands	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002930:	e007      	b.n	8002942 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	431a      	orrs	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	431a      	orrs	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002960:	f023 0201 	bic.w	r2, r3, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e006      	b.n	800297c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40006400 	.word	0x40006400

0800298c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d12e      	bne.n	80029fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029b8:	f7ff f9ba 	bl	8001d30 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029be:	e012      	b.n	80029e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029c0:	f7ff f9b6 	bl	8001d30 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b0a      	cmp	r3, #10
 80029cc:	d90b      	bls.n	80029e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2205      	movs	r2, #5
 80029de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e012      	b.n	8002a0c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e5      	bne.n	80029c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e006      	b.n	8002a0c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a28:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a32:	7ffb      	ldrb	r3, [r7, #31]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d003      	beq.n	8002a40 <HAL_CAN_AddTxMessage+0x2c>
 8002a38:	7ffb      	ldrb	r3, [r7, #31]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	f040 80b8 	bne.w	8002bb0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80a0 	beq.w	8002ba0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	0e1b      	lsrs	r3, r3, #24
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d907      	bls.n	8002a80 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e09e      	b.n	8002bbe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a80:	2201      	movs	r2, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	409a      	lsls	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e00f      	b.n	8002ace <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ac2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3318      	adds	r3, #24
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	440b      	add	r3, r1
 8002acc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3318      	adds	r3, #24
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	440b      	add	r3, r1
 8002ade:	3304      	adds	r3, #4
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	7d1b      	ldrb	r3, [r3, #20]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d111      	bne.n	8002b0e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3318      	adds	r3, #24
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6811      	ldr	r1, [r2, #0]
 8002afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3318      	adds	r3, #24
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	440b      	add	r3, r1
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3307      	adds	r3, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	061a      	lsls	r2, r3, #24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3306      	adds	r3, #6
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3305      	adds	r3, #5
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	3204      	adds	r2, #4
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	4610      	mov	r0, r2
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6811      	ldr	r1, [r2, #0]
 8002b36:	ea43 0200 	orr.w	r2, r3, r0
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	061a      	lsls	r2, r3, #24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3302      	adds	r3, #2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4313      	orrs	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	4610      	mov	r0, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6811      	ldr	r1, [r2, #0]
 8002b6c:	ea43 0200 	orr.w	r2, r3, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3318      	adds	r3, #24
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6811      	ldr	r1, [r2, #0]
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3318      	adds	r3, #24
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	440b      	add	r3, r1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e00e      	b.n	8002bbe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e006      	b.n	8002bbe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d003      	beq.n	8002bee <HAL_CAN_GetRxMessage+0x24>
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f040 80f3 	bne.w	8002dd4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0e7      	b.n	8002de2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0d8      	b.n	8002de2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	331b      	adds	r3, #27
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0204 	and.w	r2, r3, #4
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	331b      	adds	r3, #27
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0d5b      	lsrs	r3, r3, #21
 8002c5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	331b      	adds	r3, #27
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	331b      	adds	r3, #27
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0202 	and.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	331b      	adds	r3, #27
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	331b      	adds	r3, #27
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0a1a      	lsrs	r2, r3, #8
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0c1a      	lsrs	r2, r3, #16
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	3302      	adds	r3, #2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e1a      	lsrs	r2, r3, #24
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3303      	adds	r3, #3
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	3304      	adds	r3, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0a1a      	lsrs	r2, r3, #8
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	3305      	adds	r3, #5
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0c1a      	lsrs	r2, r3, #16
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	3306      	adds	r3, #6
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0e1a      	lsrs	r2, r3, #24
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	3307      	adds	r3, #7
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	e007      	b.n	8002dd0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0220 	orr.w	r2, r2, #32
 8002dce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e006      	b.n	8002de2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08a      	sub	sp, #40	; 0x28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d07c      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d023      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f983 	bl	800315c <HAL_CAN_TxMailbox0CompleteCallback>
 8002e56:	e016      	b.n	8002e86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	e00c      	b.n	8002e86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	e002      	b.n	8002e86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f989 	bl	8003198 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d024      	beq.n	8002eda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f963 	bl	8003170 <HAL_CAN_TxMailbox1CompleteCallback>
 8002eaa:	e016      	b.n	8002eda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	e00c      	b.n	8002eda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	e002      	b.n	8002eda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f969 	bl	80031ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d024      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f943 	bl	8003184 <HAL_CAN_TxMailbox2CompleteCallback>
 8002efe:	e016      	b.n	8002f2e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e00c      	b.n	8002f2e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e002      	b.n	8002f2e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f949 	bl	80031c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00c      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f930 	bl	80031d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fe33 	bl	8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f912 	bl	80031fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f8f9 	bl	80031e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2210      	movs	r2, #16
 8003010:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8fc 	bl	8003210 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2208      	movs	r2, #8
 8003032:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8f5 	bl	8003224 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d07b      	beq.n	800313c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d072      	beq.n	8003134 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d043      	beq.n	8003134 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03e      	beq.n	8003134 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030bc:	2b60      	cmp	r3, #96	; 0x60
 80030be:	d02b      	beq.n	8003118 <HAL_CAN_IRQHandler+0x32a>
 80030c0:	2b60      	cmp	r3, #96	; 0x60
 80030c2:	d82e      	bhi.n	8003122 <HAL_CAN_IRQHandler+0x334>
 80030c4:	2b50      	cmp	r3, #80	; 0x50
 80030c6:	d022      	beq.n	800310e <HAL_CAN_IRQHandler+0x320>
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d82a      	bhi.n	8003122 <HAL_CAN_IRQHandler+0x334>
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d019      	beq.n	8003104 <HAL_CAN_IRQHandler+0x316>
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d826      	bhi.n	8003122 <HAL_CAN_IRQHandler+0x334>
 80030d4:	2b30      	cmp	r3, #48	; 0x30
 80030d6:	d010      	beq.n	80030fa <HAL_CAN_IRQHandler+0x30c>
 80030d8:	2b30      	cmp	r3, #48	; 0x30
 80030da:	d822      	bhi.n	8003122 <HAL_CAN_IRQHandler+0x334>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d002      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x2f8>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d005      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030e4:	e01d      	b.n	8003122 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ee:	e019      	b.n	8003124 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	f043 0310 	orr.w	r3, r3, #16
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f8:	e014      	b.n	8003124 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f043 0320 	orr.w	r3, r3, #32
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003102:	e00f      	b.n	8003124 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310c:	e00a      	b.n	8003124 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003116:	e005      	b.n	8003124 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003120:	e000      	b.n	8003124 <HAL_CAN_IRQHandler+0x336>
            break;
 8003122:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003132:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2204      	movs	r2, #4
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f872 	bl	8003238 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <__NVIC_EnableIRQ+0x38>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	; (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff4c 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ce:	f7ff ff61 	bl	8003294 <__NVIC_GetPriorityGrouping>
 80033d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	6978      	ldr	r0, [r7, #20]
 80033da:	f7ff ffb1 	bl	8003340 <NVIC_EncodePriority>
 80033de:	4602      	mov	r2, r0
 80033e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff80 	bl	80032ec <__NVIC_SetPriority>
}
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff54 	bl	80032b0 <__NVIC_EnableIRQ>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800341c:	f7fe fc88 	bl	8001d30 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e099      	b.n	8003560 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344c:	e00f      	b.n	800346e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344e:	f7fe fc6f 	bl	8001d30 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b05      	cmp	r3, #5
 800345a:	d908      	bls.n	800346e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2203      	movs	r2, #3
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e078      	b.n	8003560 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e8      	bne.n	800344e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <HAL_DMA_Init+0x158>)
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	4313      	orrs	r3, r2
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0307 	bic.w	r3, r3, #7
 80034ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d117      	bne.n	8003532 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fa6f 	bl	80039f8 <DMA_CheckFifoParam>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800352e:	2301      	movs	r3, #1
 8003530:	e016      	b.n	8003560 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fa26 	bl	800398c <DMA_CalcBaseAndBitshift>
 8003540:	4603      	mov	r3, r0
 8003542:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	223f      	movs	r2, #63	; 0x3f
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	f010803f 	.word	0xf010803f

0800356c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_DMA_Start_IT+0x26>
 800358e:	2302      	movs	r3, #2
 8003590:	e040      	b.n	8003614 <HAL_DMA_Start_IT+0xa8>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d12f      	bne.n	8003606 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f9b8 	bl	8003930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	223f      	movs	r2, #63	; 0x3f
 80035c6:	409a      	lsls	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0216 	orr.w	r2, r2, #22
 80035da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0208 	orr.w	r2, r2, #8
 80035f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e005      	b.n	8003612 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800360e:	2302      	movs	r3, #2
 8003610:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003612:	7dfb      	ldrb	r3, [r7, #23]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003628:	4b92      	ldr	r3, [pc, #584]	; (8003874 <HAL_DMA_IRQHandler+0x258>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a92      	ldr	r2, [pc, #584]	; (8003878 <HAL_DMA_IRQHandler+0x25c>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0a9b      	lsrs	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2208      	movs	r2, #8
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01a      	beq.n	8003688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	2208      	movs	r2, #8
 8003676:	409a      	lsls	r2, r3
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368c:	2201      	movs	r2, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d012      	beq.n	80036be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	2201      	movs	r2, #1
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	2204      	movs	r2, #4
 80036c4:	409a      	lsls	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2204      	movs	r2, #4
 80036e2:	409a      	lsls	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	2210      	movs	r2, #16
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d043      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d03c      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	2210      	movs	r2, #16
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d018      	beq.n	800375e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d024      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
 800374a:	e01f      	b.n	800378c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
 800375c:	e016      	b.n	800378c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0208 	bic.w	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2220      	movs	r2, #32
 8003792:	409a      	lsls	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 808e 	beq.w	80038ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8086 	beq.w	80038ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	2220      	movs	r2, #32
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d136      	bne.n	8003834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0216 	bic.w	r2, r2, #22
 80037d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x1da>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0208 	bic.w	r2, r2, #8
 8003804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	223f      	movs	r2, #63	; 0x3f
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d07d      	beq.n	8003926 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
        }
        return;
 8003832:	e078      	b.n	8003926 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01c      	beq.n	800387c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d108      	bne.n	8003862 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	2b00      	cmp	r3, #0
 8003856:	d030      	beq.n	80038ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	e02b      	b.n	80038ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d027      	beq.n	80038ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e022      	b.n	80038ba <HAL_DMA_IRQHandler+0x29e>
 8003874:	20000000 	.word	0x20000000
 8003878:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0210 	bic.w	r2, r2, #16
 8003898:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d032      	beq.n	8003928 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d022      	beq.n	8003914 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2205      	movs	r2, #5
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3301      	adds	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d307      	bcc.n	8003902 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f2      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x2ca>
 8003900:	e000      	b.n	8003904 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003902:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
 8003924:	e000      	b.n	8003928 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003926:	bf00      	nop
    }
  }
}
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop

08003930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800394c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d108      	bne.n	8003970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800396e:	e007      	b.n	8003980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3b10      	subs	r3, #16
 800399c:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <DMA_CalcBaseAndBitshift+0x64>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <DMA_CalcBaseAndBitshift+0x68>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d909      	bls.n	80039ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	1d1a      	adds	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	659a      	str	r2, [r3, #88]	; 0x58
 80039cc:	e007      	b.n	80039de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	aaaaaaab 	.word	0xaaaaaaab
 80039f4:	08007668 	.word	0x08007668

080039f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11f      	bne.n	8003a52 <DMA_CheckFifoParam+0x5a>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d856      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xce>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <DMA_CheckFifoParam+0x28>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a43 	.word	0x08003a43
 8003a28:	08003a31 	.word	0x08003a31
 8003a2c:	08003ac7 	.word	0x08003ac7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d046      	beq.n	8003aca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a40:	e043      	b.n	8003aca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a4a:	d140      	bne.n	8003ace <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e03d      	b.n	8003ace <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5a:	d121      	bne.n	8003aa0 <DMA_CheckFifoParam+0xa8>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d837      	bhi.n	8003ad2 <DMA_CheckFifoParam+0xda>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <DMA_CheckFifoParam+0x70>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a7f 	.word	0x08003a7f
 8003a70:	08003a79 	.word	0x08003a79
 8003a74:	08003a91 	.word	0x08003a91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e030      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d025      	beq.n	8003ad6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8e:	e022      	b.n	8003ad6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a98:	d11f      	bne.n	8003ada <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a9e:	e01c      	b.n	8003ada <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d903      	bls.n	8003aae <DMA_CheckFifoParam+0xb6>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d003      	beq.n	8003ab4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aac:	e018      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab2:	e015      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e00b      	b.n	8003ade <DMA_CheckFifoParam+0xe6>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e00a      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e008      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e006      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e004      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
    }
  } 
  
  return status; 
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e165      	b.n	8003dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	f040 8154 	bne.w	8003dd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d005      	beq.n	8003b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d130      	bne.n	8003ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 0201 	and.w	r2, r3, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d017      	beq.n	8003be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d123      	bne.n	8003c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	08da      	lsrs	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80ae 	beq.w	8003dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	4b5d      	ldr	r3, [pc, #372]	; (8003df0 <HAL_GPIO_Init+0x300>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	4a5c      	ldr	r2, [pc, #368]	; (8003df0 <HAL_GPIO_Init+0x300>)
 8003c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	4b5a      	ldr	r3, [pc, #360]	; (8003df0 <HAL_GPIO_Init+0x300>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c92:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_GPIO_Init+0x304>)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4f      	ldr	r2, [pc, #316]	; (8003df8 <HAL_GPIO_Init+0x308>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d025      	beq.n	8003d0a <HAL_GPIO_Init+0x21a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4e      	ldr	r2, [pc, #312]	; (8003dfc <HAL_GPIO_Init+0x30c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01f      	beq.n	8003d06 <HAL_GPIO_Init+0x216>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4d      	ldr	r2, [pc, #308]	; (8003e00 <HAL_GPIO_Init+0x310>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d019      	beq.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4c      	ldr	r2, [pc, #304]	; (8003e04 <HAL_GPIO_Init+0x314>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_Init+0x20e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	; (8003e08 <HAL_GPIO_Init+0x318>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <HAL_GPIO_Init+0x20a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <HAL_GPIO_Init+0x31c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_Init+0x206>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a49      	ldr	r2, [pc, #292]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_GPIO_Init+0x202>
 8003cee:	2306      	movs	r3, #6
 8003cf0:	e00c      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	e00a      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	e008      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	e006      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e004      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e002      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_GPIO_Init+0x21c>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f002 0203 	and.w	r2, r2, #3
 8003d12:	0092      	lsls	r2, r2, #2
 8003d14:	4093      	lsls	r3, r2
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d1c:	4935      	ldr	r1, [pc, #212]	; (8003df4 <HAL_GPIO_Init+0x304>)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	3302      	adds	r3, #2
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d4e:	4a31      	ldr	r2, [pc, #196]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d54:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7e:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da2:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dcc:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	f67f ae96 	bls.w	8003b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40013800 	.word	0x40013800
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	40020400 	.word	0x40020400
 8003e00:	40020800 	.word	0x40020800
 8003e04:	40020c00 	.word	0x40020c00
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40021400 	.word	0x40021400
 8003e10:	40021800 	.word	0x40021800
 8003e14:	40013c00 	.word	0x40013c00

08003e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e001      	b.n	8003e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e64:	e003      	b.n	8003e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	041a      	lsls	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	619a      	str	r2, [r3, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e8c:	887a      	ldrh	r2, [r7, #2]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	041a      	lsls	r2, r3, #16
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43d9      	mvns	r1, r3
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	400b      	ands	r3, r1
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	619a      	str	r2, [r3, #24]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003edc:	f7fd ff28 	bl	8001d30 <HAL_GetTick>
 8003ee0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ee2:	e009      	b.n	8003ef8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ee4:	f7fd ff24 	bl	8001d30 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef2:	d901      	bls.n	8003ef8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e01f      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d1ee      	bne.n	8003ee4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f0c:	f7fd ff10 	bl	8001d30 <HAL_GetTick>
 8003f10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f12:	e009      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f14:	f7fd ff0c 	bl	8001d30 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f22:	d901      	bls.n	8003f28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e007      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f34:	d1ee      	bne.n	8003f14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	420e0040 	.word	0x420e0040
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	420e0044 	.word	0x420e0044

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0cc      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b68      	ldr	r3, [pc, #416]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d90c      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d044      	beq.n	8004070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d003      	beq.n	800400e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	2b03      	cmp	r3, #3
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e067      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4934      	ldr	r1, [pc, #208]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fd fe76 	bl	8001d30 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fd fe72 	bl	8001d30 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e04f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d20c      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f887 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fccc 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	08007650 	.word	0x08007650
 8004114:	20000000 	.word	0x20000000
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RCC_GetHCLKFreq+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000000 	.word	0x20000000

08004134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004138:	f7ff fff0 	bl	800411c <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a9b      	lsrs	r3, r3, #10
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4903      	ldr	r1, [pc, #12]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	08007660 	.word	0x08007660

0800415c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004160:	f7ff ffdc 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0b5b      	lsrs	r3, r3, #13
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4903      	ldr	r1, [pc, #12]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	08007660 	.word	0x08007660

08004184 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	220f      	movs	r2, #15
 8004192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0203 	and.w	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	08db      	lsrs	r3, r3, #3
 80041be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_RCC_GetClockConfig+0x60>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	601a      	str	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40023c00 	.word	0x40023c00

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b088      	sub	sp, #32
 80041ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004204:	4bce      	ldr	r3, [pc, #824]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b0c      	cmp	r3, #12
 800420e:	f200 818d 	bhi.w	800452c <HAL_RCC_GetSysClockFreq+0x344>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <HAL_RCC_GetSysClockFreq+0x30>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800424d 	.word	0x0800424d
 800421c:	0800452d 	.word	0x0800452d
 8004220:	0800452d 	.word	0x0800452d
 8004224:	0800452d 	.word	0x0800452d
 8004228:	08004253 	.word	0x08004253
 800422c:	0800452d 	.word	0x0800452d
 8004230:	0800452d 	.word	0x0800452d
 8004234:	0800452d 	.word	0x0800452d
 8004238:	08004259 	.word	0x08004259
 800423c:	0800452d 	.word	0x0800452d
 8004240:	0800452d 	.word	0x0800452d
 8004244:	0800452d 	.word	0x0800452d
 8004248:	080043cd 	.word	0x080043cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4bbd      	ldr	r3, [pc, #756]	; (8004544 <HAL_RCC_GetSysClockFreq+0x35c>)
 800424e:	61bb      	str	r3, [r7, #24]
       break;
 8004250:	e16f      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004252:	4bbd      	ldr	r3, [pc, #756]	; (8004548 <HAL_RCC_GetSysClockFreq+0x360>)
 8004254:	61bb      	str	r3, [r7, #24]
      break;
 8004256:	e16c      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004258:	4bb9      	ldr	r3, [pc, #740]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004260:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004262:	4bb7      	ldr	r3, [pc, #732]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d053      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4bb4      	ldr	r3, [pc, #720]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	461a      	mov	r2, r3
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	ea02 0400 	and.w	r4, r2, r0
 8004286:	603c      	str	r4, [r7, #0]
 8004288:	400b      	ands	r3, r1
 800428a:	607b      	str	r3, [r7, #4]
 800428c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	014b      	lsls	r3, r1, #5
 800429e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042a2:	0142      	lsls	r2, r0, #5
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	4623      	mov	r3, r4
 80042aa:	1ac0      	subs	r0, r0, r3
 80042ac:	462b      	mov	r3, r5
 80042ae:	eb61 0103 	sbc.w	r1, r1, r3
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	018b      	lsls	r3, r1, #6
 80042bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042c0:	0182      	lsls	r2, r0, #6
 80042c2:	1a12      	subs	r2, r2, r0
 80042c4:	eb63 0301 	sbc.w	r3, r3, r1
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	00d9      	lsls	r1, r3, #3
 80042d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d6:	00d0      	lsls	r0, r2, #3
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4621      	mov	r1, r4
 80042de:	1852      	adds	r2, r2, r1
 80042e0:	4629      	mov	r1, r5
 80042e2:	eb43 0101 	adc.w	r1, r3, r1
 80042e6:	460b      	mov	r3, r1
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	0259      	lsls	r1, r3, #9
 80042f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042f6:	0250      	lsls	r0, r2, #9
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	461a      	mov	r2, r3
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	f7fc fae0 	bl	80008cc <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	e04c      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b8a      	ldr	r3, [pc, #552]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	ea02 0a00 	and.w	sl, r2, r0
 800432e:	ea03 0b01 	and.w	fp, r3, r1
 8004332:	4650      	mov	r0, sl
 8004334:	4659      	mov	r1, fp
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	014b      	lsls	r3, r1, #5
 8004340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004344:	0142      	lsls	r2, r0, #5
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	ebb0 000a 	subs.w	r0, r0, sl
 800434e:	eb61 010b 	sbc.w	r1, r1, fp
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004360:	0182      	lsls	r2, r0, #6
 8004362:	1a12      	subs	r2, r2, r0
 8004364:	eb63 0301 	sbc.w	r3, r3, r1
 8004368:	f04f 0000 	mov.w	r0, #0
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	00d9      	lsls	r1, r3, #3
 8004372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004376:	00d0      	lsls	r0, r2, #3
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	eb12 020a 	adds.w	r2, r2, sl
 8004380:	eb43 030b 	adc.w	r3, r3, fp
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	0299      	lsls	r1, r3, #10
 800438e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004392:	0290      	lsls	r0, r2, #10
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f7fc fa92 	bl	80008cc <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b0:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	61bb      	str	r3, [r7, #24]
      break;
 80043ca:	e0b2      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043cc:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d6:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04d      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e2:	4b57      	ldr	r3, [pc, #348]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	461a      	mov	r2, r3
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	ea02 0800 	and.w	r8, r2, r0
 80043fa:	ea03 0901 	and.w	r9, r3, r1
 80043fe:	4640      	mov	r0, r8
 8004400:	4649      	mov	r1, r9
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	014b      	lsls	r3, r1, #5
 800440c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004410:	0142      	lsls	r2, r0, #5
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	ebb0 0008 	subs.w	r0, r0, r8
 800441a:	eb61 0109 	sbc.w	r1, r1, r9
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	018b      	lsls	r3, r1, #6
 8004428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800442c:	0182      	lsls	r2, r0, #6
 800442e:	1a12      	subs	r2, r2, r0
 8004430:	eb63 0301 	sbc.w	r3, r3, r1
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	00d9      	lsls	r1, r3, #3
 800443e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004442:	00d0      	lsls	r0, r2, #3
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	eb12 0208 	adds.w	r2, r2, r8
 800444c:	eb43 0309 	adc.w	r3, r3, r9
 8004450:	f04f 0000 	mov.w	r0, #0
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	0259      	lsls	r1, r3, #9
 800445a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800445e:	0250      	lsls	r0, r2, #9
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	f7fc fa2c 	bl	80008cc <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e04a      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447e:	4b30      	ldr	r3, [pc, #192]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	461a      	mov	r2, r3
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	ea02 0400 	and.w	r4, r2, r0
 8004496:	ea03 0501 	and.w	r5, r3, r1
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	014b      	lsls	r3, r1, #5
 80044a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044ac:	0142      	lsls	r2, r0, #5
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	1b00      	subs	r0, r0, r4
 80044b4:	eb61 0105 	sbc.w	r1, r1, r5
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	018b      	lsls	r3, r1, #6
 80044c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044c6:	0182      	lsls	r2, r0, #6
 80044c8:	1a12      	subs	r2, r2, r0
 80044ca:	eb63 0301 	sbc.w	r3, r3, r1
 80044ce:	f04f 0000 	mov.w	r0, #0
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	00d9      	lsls	r1, r3, #3
 80044d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044dc:	00d0      	lsls	r0, r2, #3
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	1912      	adds	r2, r2, r4
 80044e4:	eb45 0303 	adc.w	r3, r5, r3
 80044e8:	f04f 0000 	mov.w	r0, #0
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	0299      	lsls	r1, r3, #10
 80044f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044f6:	0290      	lsls	r0, r2, #10
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	461a      	mov	r2, r3
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	f7fc f9e0 	bl	80008cc <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4613      	mov	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCC_GetSysClockFreq+0x358>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0f1b      	lsrs	r3, r3, #28
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	e002      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_GetSysClockFreq+0x35c>)
 800452e:	61bb      	str	r3, [r7, #24]
      break;
 8004530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004532:	69bb      	ldr	r3, [r7, #24]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e28d      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8083 	beq.w	8004672 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800456c:	4b94      	ldr	r3, [pc, #592]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b04      	cmp	r3, #4
 8004576:	d019      	beq.n	80045ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004578:	4b91      	ldr	r3, [pc, #580]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004580:	2b08      	cmp	r3, #8
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004584:	4b8e      	ldr	r3, [pc, #568]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004590:	d00c      	beq.n	80045ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004592:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d112      	bne.n	80045c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459e:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	4b84      	ldr	r3, [pc, #528]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05b      	beq.n	8004670 <HAL_RCC_OscConfig+0x124>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d157      	bne.n	8004670 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e25a      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d106      	bne.n	80045dc <HAL_RCC_OscConfig+0x90>
 80045ce:	4b7c      	ldr	r3, [pc, #496]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7b      	ldr	r2, [pc, #492]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e01d      	b.n	8004618 <HAL_RCC_OscConfig+0xcc>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0xb4>
 80045e6:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a75      	ldr	r2, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	4b73      	ldr	r3, [pc, #460]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a72      	ldr	r2, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0xcc>
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a6e      	ldr	r2, [pc, #440]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6b      	ldr	r2, [pc, #428]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d013      	beq.n	8004648 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd fb86 	bl	8001d30 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004628:	f7fd fb82 	bl	8001d30 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	; 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e21f      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0xdc>
 8004646:	e014      	b.n	8004672 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd fb72 	bl	8001d30 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004650:	f7fd fb6e 	bl	8001d30 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	; 0x64
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e20b      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004662:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x104>
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d06f      	beq.n	800475e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800467e:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800468a:	4b4d      	ldr	r3, [pc, #308]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004692:	2b08      	cmp	r3, #8
 8004694:	d105      	bne.n	80046a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d11c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ae:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_RCC_OscConfig+0x186>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e1d3      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4937      	ldr	r1, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	e03a      	b.n	800475e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f0:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <HAL_RCC_OscConfig+0x278>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fd fb1b 	bl	8001d30 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fd fb17 	bl	8001d30 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1b4      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4925      	ldr	r1, [pc, #148]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x278>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd fafa 	bl	8001d30 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004740:	f7fd faf6 	bl	8001d30 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e193      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004752:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d036      	beq.n	80047d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x27c>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd fada 	bl	8001d30 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004780:	f7fd fad6 	bl	8001d30 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e173      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x274>)
 8004794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x234>
 800479e:	e01b      	b.n	80047d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x27c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a6:	f7fd fac3 	bl	8001d30 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	e00e      	b.n	80047cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fd fabf 	bl	8001d30 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d907      	bls.n	80047cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e15c      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470000 	.word	0x42470000
 80047c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	4b8a      	ldr	r3, [pc, #552]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80047ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ea      	bne.n	80047ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8097 	beq.w	8004914 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b83      	ldr	r3, [pc, #524]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b7f      	ldr	r3, [pc, #508]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4a7e      	ldr	r2, [pc, #504]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	; 0x40
 8004806:	4b7c      	ldr	r3, [pc, #496]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b79      	ldr	r3, [pc, #484]	; (80049fc <HAL_RCC_OscConfig+0x4b0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x4b0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a75      	ldr	r2, [pc, #468]	; (80049fc <HAL_RCC_OscConfig+0x4b0>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7fd fa7f 	bl	8001d30 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7fd fa7b 	bl	8001d30 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e118      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	4b6c      	ldr	r3, [pc, #432]	; (80049fc <HAL_RCC_OscConfig+0x4b0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x31e>
 800485c:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
 8004868:	e01c      	b.n	80048a4 <HAL_RCC_OscConfig+0x358>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b05      	cmp	r3, #5
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x340>
 8004872:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	6713      	str	r3, [r2, #112]	; 0x70
 800487e:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a5d      	ldr	r2, [pc, #372]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0x358>
 800488c:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	4a59      	ldr	r2, [pc, #356]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	; 0x70
 8004898:	4b57      	ldr	r3, [pc, #348]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	4a56      	ldr	r2, [pc, #344]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800489e:	f023 0304 	bic.w	r3, r3, #4
 80048a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d015      	beq.n	80048d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fd fa40 	bl	8001d30 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd fa3c 	bl	8001d30 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0d7      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ee      	beq.n	80048b4 <HAL_RCC_OscConfig+0x368>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d8:	f7fd fa2a 	bl	8001d30 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd fa26 	bl	8001d30 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0c1      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ee      	bne.n	80048e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80ad 	beq.w	8004a78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b08      	cmp	r3, #8
 8004928:	d060      	beq.n	80049ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d145      	bne.n	80049be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCC_OscConfig+0x4b4>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd f9fa 	bl	8001d30 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fd f9f6 	bl	8001d30 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e093      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	071b      	lsls	r3, r3, #28
 800498a:	491b      	ldr	r1, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4b4>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd f9cb 	bl	8001d30 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499e:	f7fd f9c7 	bl	8001d30 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e064      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x452>
 80049bc:	e05c      	b.n	8004a78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <HAL_RCC_OscConfig+0x4b4>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd f9b4 	bl	8001d30 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd f9b0 	bl	8001d30 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e04d      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x480>
 80049ea:	e045      	b.n	8004a78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e040      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40007000 	.word	0x40007000
 8004a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <HAL_RCC_OscConfig+0x538>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d030      	beq.n	8004a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d129      	bne.n	8004a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d122      	bne.n	8004a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d119      	bne.n	8004a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10f      	bne.n	8004a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc ff80 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 fa5e 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e046      	b.n	8004bce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <HAL_TIM_Base_Start+0xb4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_TIM_Base_Start+0xb8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_TIM_Base_Start+0xbc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_Base_Start+0xc0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_TIM_Base_Start+0xc4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_TIM_Base_Start+0xc8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start+0x70>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_Base_Start+0xcc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a1a      	ldr	r2, [r3, #32]
 8004c06:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10f      	bne.n	8004c30 <HAL_TIM_Base_Stop+0x38>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6a1a      	ldr	r2, [r3, #32]
 8004c16:	f240 4344 	movw	r3, #1092	; 0x444
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_Base_Stop+0x38>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d001      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04e      	b.n	8004cfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x80>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d010      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e007      	b.n	8004cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40010400 	.word	0x40010400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40001800 	.word	0x40001800

08004d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d122      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d11b      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0202 	mvn.w	r2, #2
 8004d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8ee 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8e0 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f8f1 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0204 	mvn.w	r2, #4
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8c4 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8b6 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f8c7 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d122      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0208 	mvn.w	r2, #8
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2204      	movs	r2, #4
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f89a 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f88c 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f89d 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0210 	mvn.w	r2, #16
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2208      	movs	r2, #8
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f870 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f862 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f873 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0201 	mvn.w	r2, #1
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc fb92 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b80      	cmp	r3, #128	; 0x80
 8004ec6:	d107      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f902 	bl	80050dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d10e      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d107      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f838 	bl	8004f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d10e      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d107      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0220 	mvn.w	r2, #32
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8cc 	bl	80050c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a40      	ldr	r2, [pc, #256]	; (800509c <TIM_Base_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <TIM_Base_SetConfig+0x118>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3c      	ldr	r2, [pc, #240]	; (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3b      	ldr	r2, [pc, #236]	; (80050a8 <TIM_Base_SetConfig+0x120>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3a      	ldr	r2, [pc, #232]	; (80050ac <TIM_Base_SetConfig+0x124>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <TIM_Base_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d02b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d027      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <TIM_Base_SetConfig+0x118>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d023      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01f      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <TIM_Base_SetConfig+0x120>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <TIM_Base_SetConfig+0x124>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <TIM_Base_SetConfig+0x128>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <TIM_Base_SetConfig+0x12c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <TIM_Base_SetConfig+0x130>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <TIM_Base_SetConfig+0x134>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <TIM_Base_SetConfig+0x138>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <TIM_Base_SetConfig+0x13c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <TIM_Base_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	615a      	str	r2, [r3, #20]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	40001800 	.word	0x40001800
 80050c0:	40001c00 	.word	0x40001c00
 80050c4:	40002000 	.word	0x40002000

080050c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e03f      	b.n	8005182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc fc74 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f929 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b08a      	sub	sp, #40	; 0x28
 800518e:	af02      	add	r7, sp, #8
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d17c      	bne.n	80052a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_UART_Transmit+0x2c>
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e075      	b.n	80052a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_UART_Transmit+0x3e>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e06e      	b.n	80052a6 <HAL_UART_Transmit+0x11c>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2221      	movs	r2, #33	; 0x21
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051de:	f7fc fda7 	bl	8001d30 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f8:	d108      	bne.n	800520c <HAL_UART_Transmit+0x82>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e003      	b.n	8005214 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800521c:	e02a      	b.n	8005274 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f840 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e036      	b.n	80052a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800524c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3302      	adds	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e007      	b.n	8005266 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1cf      	bne.n	800521e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2140      	movs	r1, #64	; 0x40
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f810 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e006      	b.n	80052a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b090      	sub	sp, #64	; 0x40
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052be:	e050      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d04c      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
 80052ce:	f7fc fd2f 	bl	8001d30 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052da:	429a      	cmp	r2, r3
 80052dc:	d241      	bcs.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005300:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	613b      	str	r3, [r7, #16]
   return(result);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005332:	623a      	str	r2, [r7, #32]
 8005334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	69f9      	ldr	r1, [r7, #28]
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e5      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d09f      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3740      	adds	r7, #64	; 0x40
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	b09f      	sub	sp, #124	; 0x7c
 8005392:	af00      	add	r7, sp, #0
 8005394:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	68d9      	ldr	r1, [r3, #12]
 80053a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	431a      	orrs	r2, r3
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053d0:	f021 010c 	bic.w	r1, r1, #12
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053da:	430b      	orrs	r3, r1
 80053dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ea:	6999      	ldr	r1, [r3, #24]
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	ea40 0301 	orr.w	r3, r0, r1
 80053f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4bc5      	ldr	r3, [pc, #788]	; (8005710 <UART_SetConfig+0x384>)
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d004      	beq.n	800540a <UART_SetConfig+0x7e>
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4bc3      	ldr	r3, [pc, #780]	; (8005714 <UART_SetConfig+0x388>)
 8005406:	429a      	cmp	r2, r3
 8005408:	d103      	bne.n	8005412 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800540a:	f7fe fea7 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 800540e:	6778      	str	r0, [r7, #116]	; 0x74
 8005410:	e002      	b.n	8005418 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005412:	f7fe fe8f 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8005416:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	f040 80b6 	bne.w	8005590 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005426:	461c      	mov	r4, r3
 8005428:	f04f 0500 	mov.w	r5, #0
 800542c:	4622      	mov	r2, r4
 800542e:	462b      	mov	r3, r5
 8005430:	1891      	adds	r1, r2, r2
 8005432:	6439      	str	r1, [r7, #64]	; 0x40
 8005434:	415b      	adcs	r3, r3
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
 8005438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800543c:	1912      	adds	r2, r2, r4
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	00d9      	lsls	r1, r3, #3
 800544c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005450:	00d0      	lsls	r0, r2, #3
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	1911      	adds	r1, r2, r4
 8005458:	6639      	str	r1, [r7, #96]	; 0x60
 800545a:	416b      	adcs	r3, r5
 800545c:	667b      	str	r3, [r7, #100]	; 0x64
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	1891      	adds	r1, r2, r2
 800546a:	63b9      	str	r1, [r7, #56]	; 0x38
 800546c:	415b      	adcs	r3, r3
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005474:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005478:	f7fb fa28 	bl	80008cc <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4ba5      	ldr	r3, [pc, #660]	; (8005718 <UART_SetConfig+0x38c>)
 8005482:	fba3 2302 	umull	r2, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	011e      	lsls	r6, r3, #4
 800548a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548c:	461c      	mov	r4, r3
 800548e:	f04f 0500 	mov.w	r5, #0
 8005492:	4622      	mov	r2, r4
 8005494:	462b      	mov	r3, r5
 8005496:	1891      	adds	r1, r2, r2
 8005498:	6339      	str	r1, [r7, #48]	; 0x30
 800549a:	415b      	adcs	r3, r3
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054a2:	1912      	adds	r2, r2, r4
 80054a4:	eb45 0303 	adc.w	r3, r5, r3
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	00d9      	lsls	r1, r3, #3
 80054b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b6:	00d0      	lsls	r0, r2, #3
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	1911      	adds	r1, r2, r4
 80054be:	65b9      	str	r1, [r7, #88]	; 0x58
 80054c0:	416b      	adcs	r3, r5
 80054c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	1891      	adds	r1, r2, r2
 80054d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80054d2:	415b      	adcs	r3, r3
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054de:	f7fb f9f5 	bl	80008cc <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b8c      	ldr	r3, [pc, #560]	; (8005718 <UART_SetConfig+0x38c>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	; 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	3332      	adds	r3, #50	; 0x32
 80054fa:	4a87      	ldr	r2, [pc, #540]	; (8005718 <UART_SetConfig+0x38c>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005508:	441e      	add	r6, r3
 800550a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550c:	4618      	mov	r0, r3
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	1894      	adds	r4, r2, r2
 8005518:	623c      	str	r4, [r7, #32]
 800551a:	415b      	adcs	r3, r3
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005522:	1812      	adds	r2, r2, r0
 8005524:	eb41 0303 	adc.w	r3, r1, r3
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	f04f 0500 	mov.w	r5, #0
 8005530:	00dd      	lsls	r5, r3, #3
 8005532:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005536:	00d4      	lsls	r4, r2, #3
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	1814      	adds	r4, r2, r0
 800553e:	653c      	str	r4, [r7, #80]	; 0x50
 8005540:	414b      	adcs	r3, r1
 8005542:	657b      	str	r3, [r7, #84]	; 0x54
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	461a      	mov	r2, r3
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	1891      	adds	r1, r2, r2
 8005550:	61b9      	str	r1, [r7, #24]
 8005552:	415b      	adcs	r3, r3
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800555a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800555e:	f7fb f9b5 	bl	80008cc <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <UART_SetConfig+0x38c>)
 8005568:	fba3 1302 	umull	r1, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2164      	movs	r1, #100	; 0x64
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	3332      	adds	r3, #50	; 0x32
 800557a:	4a67      	ldr	r2, [pc, #412]	; (8005718 <UART_SetConfig+0x38c>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4432      	add	r2, r6
 800558c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800558e:	e0b9      	b.n	8005704 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005592:	461c      	mov	r4, r3
 8005594:	f04f 0500 	mov.w	r5, #0
 8005598:	4622      	mov	r2, r4
 800559a:	462b      	mov	r3, r5
 800559c:	1891      	adds	r1, r2, r2
 800559e:	6139      	str	r1, [r7, #16]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055a8:	1912      	adds	r2, r2, r4
 80055aa:	eb45 0303 	adc.w	r3, r5, r3
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	00d9      	lsls	r1, r3, #3
 80055b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055bc:	00d0      	lsls	r0, r2, #3
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	eb12 0804 	adds.w	r8, r2, r4
 80055c6:	eb43 0905 	adc.w	r9, r3, r5
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055e2:	0082      	lsls	r2, r0, #2
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fb f970 	bl	80008cc <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <UART_SetConfig+0x38c>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011e      	lsls	r6, r3, #4
 80055fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fc:	4618      	mov	r0, r3
 80055fe:	f04f 0100 	mov.w	r1, #0
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	1894      	adds	r4, r2, r2
 8005608:	60bc      	str	r4, [r7, #8]
 800560a:	415b      	adcs	r3, r3
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005612:	1812      	adds	r2, r2, r0
 8005614:	eb41 0303 	adc.w	r3, r1, r3
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	f04f 0500 	mov.w	r5, #0
 8005620:	00dd      	lsls	r5, r3, #3
 8005622:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005626:	00d4      	lsls	r4, r2, #3
 8005628:	4622      	mov	r2, r4
 800562a:	462b      	mov	r3, r5
 800562c:	1814      	adds	r4, r2, r0
 800562e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005630:	414b      	adcs	r3, r1
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	008b      	lsls	r3, r1, #2
 8005648:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800564c:	0082      	lsls	r2, r0, #2
 800564e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005652:	f7fb f93b 	bl	80008cc <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4b2f      	ldr	r3, [pc, #188]	; (8005718 <UART_SetConfig+0x38c>)
 800565c:	fba3 1302 	umull	r1, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	2164      	movs	r1, #100	; 0x64
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	3332      	adds	r3, #50	; 0x32
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <UART_SetConfig+0x38c>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567a:	441e      	add	r6, r3
 800567c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800567e:	4618      	mov	r0, r3
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	1894      	adds	r4, r2, r2
 800568a:	603c      	str	r4, [r7, #0]
 800568c:	415b      	adcs	r3, r3
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005694:	1812      	adds	r2, r2, r0
 8005696:	eb41 0303 	adc.w	r3, r1, r3
 800569a:	f04f 0400 	mov.w	r4, #0
 800569e:	f04f 0500 	mov.w	r5, #0
 80056a2:	00dd      	lsls	r5, r3, #3
 80056a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a8:	00d4      	lsls	r4, r2, #3
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	eb12 0a00 	adds.w	sl, r2, r0
 80056b2:	eb43 0b01 	adc.w	fp, r3, r1
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	008b      	lsls	r3, r1, #2
 80056ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056ce:	0082      	lsls	r2, r0, #2
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	f7fb f8fa 	bl	80008cc <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <UART_SetConfig+0x38c>)
 80056de:	fba3 1302 	umull	r1, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <UART_SetConfig+0x38c>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4432      	add	r2, r6
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	377c      	adds	r7, #124	; 0x7c
 8005708:	46bd      	mov	sp, r7
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	bf00      	nop
 8005710:	40011000 	.word	0x40011000
 8005714:	40011400 	.word	0x40011400
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800572a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800572e:	2b84      	cmp	r3, #132	; 0x84
 8005730:	d005      	beq.n	800573e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005732:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	3303      	adds	r3, #3
 800573c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800573e:	68fb      	ldr	r3, [r7, #12]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005750:	f000 faf6 	bl	8005d40 <vTaskStartScheduler>
  
  return osOK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	bd80      	pop	{r7, pc}

0800575a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800575a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575c:	b089      	sub	sp, #36	; 0x24
 800575e:	af04      	add	r7, sp, #16
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <osThreadCreate+0x54>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01c      	beq.n	80057ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685c      	ldr	r4, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681d      	ldr	r5, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691e      	ldr	r6, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ffc8 	bl	800571c <makeFreeRtosPriority>
 800578c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005796:	9202      	str	r2, [sp, #8]
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	9100      	str	r1, [sp, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	4632      	mov	r2, r6
 80057a0:	4629      	mov	r1, r5
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f8ed 	bl	8005982 <xTaskCreateStatic>
 80057a8:	4603      	mov	r3, r0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e01c      	b.n	80057e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685c      	ldr	r4, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ba:	b29e      	uxth	r6, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ffaa 	bl	800571c <makeFreeRtosPriority>
 80057c8:	4602      	mov	r2, r0
 80057ca:	f107 030c 	add.w	r3, r7, #12
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	9200      	str	r2, [sp, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4632      	mov	r2, r6
 80057d6:	4629      	mov	r1, r5
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 f92f 	bl	8005a3c <xTaskCreate>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <osDelay+0x16>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	e000      	b.n	800580a <osDelay+0x18>
 8005808:	2301      	movs	r3, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fa64 	bl	8005cd8 <vTaskDelay>
  
  return osOK;
 8005810:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f103 0208 	add.w	r2, r3, #8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f04f 32ff 	mov.w	r2, #4294967295
 8005832:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f103 0208 	add.w	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f103 0208 	add.w	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d103      	bne.n	80058dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e00c      	b.n	80058f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3308      	adds	r3, #8
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e002      	b.n	80058ea <vListInsert+0x2e>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d2f6      	bcs.n	80058e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6892      	ldr	r2, [r2, #8]
 8005944:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6852      	ldr	r2, [r2, #4]
 800594e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d103      	bne.n	8005962 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1e5a      	subs	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005982:	b580      	push	{r7, lr}
 8005984:	b08e      	sub	sp, #56	; 0x38
 8005986:	af04      	add	r7, sp, #16
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	61fb      	str	r3, [r7, #28]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059c8:	23b4      	movs	r3, #180	; 0xb4
 80059ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2bb4      	cmp	r3, #180	; 0xb4
 80059d0:	d00a      	beq.n	80059e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	61bb      	str	r3, [r7, #24]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01e      	beq.n	8005a2e <xTaskCreateStatic+0xac>
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01b      	beq.n	8005a2e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	f107 0314 	add.w	r3, r7, #20
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f851 	bl	8005ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a28:	f000 f8ec 	bl	8005c04 <prvAddNewTaskToReadyList>
 8005a2c:	e001      	b.n	8005a32 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a32:	697b      	ldr	r3, [r7, #20]
	}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3728      	adds	r7, #40	; 0x28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08c      	sub	sp, #48	; 0x30
 8005a40:	af04      	add	r7, sp, #16
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fef1 	bl	8006838 <pvPortMalloc>
 8005a56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00e      	beq.n	8005a7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a5e:	20b4      	movs	r0, #180	; 0xb4
 8005a60:	f000 feea 	bl	8006838 <pvPortMalloc>
 8005a64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
 8005a72:	e005      	b.n	8005a80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a74:	6978      	ldr	r0, [r7, #20]
 8005a76:	f000 ffab 	bl	80069d0 <vPortFree>
 8005a7a:	e001      	b.n	8005a80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	2300      	movs	r3, #0
 8005a92:	9303      	str	r3, [sp, #12]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	9302      	str	r3, [sp, #8]
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f80f 	bl	8005ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aaa:	69f8      	ldr	r0, [r7, #28]
 8005aac:	f000 f8aa 	bl	8005c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e002      	b.n	8005abc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005abc:	69bb      	ldr	r3, [r7, #24]
	}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	617b      	str	r3, [r7, #20]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01f      	beq.n	8005b56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e012      	b.n	8005b42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	7819      	ldrb	r1, [r3, #0]
 8005b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3334      	adds	r3, #52	; 0x34
 8005b2c:	460a      	mov	r2, r1
 8005b2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b0f      	cmp	r3, #15
 8005b46:	d9e9      	bls.n	8005b1c <prvInitialiseNewTask+0x54>
 8005b48:	e000      	b.n	8005b4c <prvInitialiseNewTask+0x84>
			{
				break;
 8005b4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b54:	e003      	b.n	8005b5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d901      	bls.n	8005b68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b64:	2306      	movs	r3, #6
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	2200      	movs	r2, #0
 8005b78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fe6b 	bl	800585a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	3318      	adds	r3, #24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fe66 	bl	800585a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f1c3 0207 	rsb	r2, r3, #7
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	334c      	adds	r3, #76	; 0x4c
 8005bb8:	2260      	movs	r2, #96	; 0x60
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f85f 	bl	8006c80 <memset>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	4a0c      	ldr	r2, [pc, #48]	; (8005bf8 <prvInitialiseNewTask+0x130>)
 8005bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	4a0c      	ldr	r2, [pc, #48]	; (8005bfc <prvInitialiseNewTask+0x134>)
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <prvInitialiseNewTask+0x138>)
 8005bd2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	69b8      	ldr	r0, [r7, #24]
 8005bda:	f000 fc1f 	bl	800641c <pxPortInitialiseStack>
 8005bde:	4602      	mov	r2, r0
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf0:	bf00      	nop
 8005bf2:	3720      	adds	r7, #32
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	08007690 	.word	0x08007690
 8005bfc:	080076b0 	.word	0x080076b0
 8005c00:	08007670 	.word	0x08007670

08005c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c0c:	f000 fd32 	bl	8006674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c10:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <prvAddNewTaskToReadyList+0xb8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <prvAddNewTaskToReadyList+0xb8>)
 8005c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c1a:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <prvAddNewTaskToReadyList+0xbc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c22:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <prvAddNewTaskToReadyList+0xbc>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <prvAddNewTaskToReadyList+0xb8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d110      	bne.n	8005c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c30:	f000 facc 	bl	80061cc <prvInitialiseTaskLists>
 8005c34:	e00d      	b.n	8005c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c36:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <prvAddNewTaskToReadyList+0xc0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c3e:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <prvAddNewTaskToReadyList+0xbc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d802      	bhi.n	8005c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c4c:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <prvAddNewTaskToReadyList+0xbc>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <prvAddNewTaskToReadyList+0xc4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3301      	adds	r3, #1
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <prvAddNewTaskToReadyList+0xc4>)
 8005c5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	2201      	movs	r2, #1
 8005c62:	409a      	lsls	r2, r3
 8005c64:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <prvAddNewTaskToReadyList+0xc8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <prvAddNewTaskToReadyList+0xc8>)
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <prvAddNewTaskToReadyList+0xcc>)
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f7ff fdf5 	bl	8005874 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c8a:	f000 fd23 	bl	80066d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <prvAddNewTaskToReadyList+0xc0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <prvAddNewTaskToReadyList+0xbc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d207      	bcs.n	8005cb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <prvAddNewTaskToReadyList+0xd0>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	2000044c 	.word	0x2000044c
 8005cc0:	2000034c 	.word	0x2000034c
 8005cc4:	20000458 	.word	0x20000458
 8005cc8:	20000468 	.word	0x20000468
 8005ccc:	20000454 	.word	0x20000454
 8005cd0:	20000350 	.word	0x20000350
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d017      	beq.n	8005d1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cea:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <vTaskDelay+0x60>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <vTaskDelay+0x30>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60bb      	str	r3, [r7, #8]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d08:	f000 f884 	bl	8005e14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fb1e 	bl	8006350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d14:	f000 f88c 	bl	8005e30 <xTaskResumeAll>
 8005d18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d107      	bne.n	8005d30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <vTaskDelay+0x64>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000474 	.word	0x20000474
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d4e:	463a      	mov	r2, r7
 8005d50:	1d39      	adds	r1, r7, #4
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fa ff34 	bl	8000bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	9202      	str	r2, [sp, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	4921      	ldr	r1, [pc, #132]	; (8005df4 <vTaskStartScheduler+0xb4>)
 8005d70:	4821      	ldr	r0, [pc, #132]	; (8005df8 <vTaskStartScheduler+0xb8>)
 8005d72:	f7ff fe06 	bl	8005982 <xTaskCreateStatic>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4a20      	ldr	r2, [pc, #128]	; (8005dfc <vTaskStartScheduler+0xbc>)
 8005d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d7c:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <vTaskStartScheduler+0xbc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	e001      	b.n	8005d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d11b      	bne.n	8005dcc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	613b      	str	r3, [r7, #16]
}
 8005da6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005da8:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <vTaskStartScheduler+0xc0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	334c      	adds	r3, #76	; 0x4c
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <vTaskStartScheduler+0xc4>)
 8005db0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <vTaskStartScheduler+0xc8>)
 8005db4:	f04f 32ff 	mov.w	r2, #4294967295
 8005db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <vTaskStartScheduler+0xcc>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <vTaskStartScheduler+0xd0>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dc6:	f000 fbb3 	bl	8006530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dca:	e00e      	b.n	8005dea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d10a      	bne.n	8005dea <vTaskStartScheduler+0xaa>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <vTaskStartScheduler+0xa8>
}
 8005dea:	bf00      	nop
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	08007648 	.word	0x08007648
 8005df8:	0800619d 	.word	0x0800619d
 8005dfc:	20000470 	.word	0x20000470
 8005e00:	2000034c 	.word	0x2000034c
 8005e04:	20000010 	.word	0x20000010
 8005e08:	2000046c 	.word	0x2000046c
 8005e0c:	20000458 	.word	0x20000458
 8005e10:	20000450 	.word	0x20000450

08005e14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <vTaskSuspendAll+0x18>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	4a03      	ldr	r2, [pc, #12]	; (8005e2c <vTaskSuspendAll+0x18>)
 8005e20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	20000474 	.word	0x20000474

08005e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e3e:	4b41      	ldr	r3, [pc, #260]	; (8005f44 <xTaskResumeAll+0x114>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	603b      	str	r3, [r7, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e5c:	f000 fc0a 	bl	8006674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e60:	4b38      	ldr	r3, [pc, #224]	; (8005f44 <xTaskResumeAll+0x114>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	4a37      	ldr	r2, [pc, #220]	; (8005f44 <xTaskResumeAll+0x114>)
 8005e68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6a:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <xTaskResumeAll+0x114>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d161      	bne.n	8005f36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e72:	4b35      	ldr	r3, [pc, #212]	; (8005f48 <xTaskResumeAll+0x118>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d05d      	beq.n	8005f36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e7a:	e02e      	b.n	8005eda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7c:	4b33      	ldr	r3, [pc, #204]	; (8005f4c <xTaskResumeAll+0x11c>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3318      	adds	r3, #24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fd50 	bl	800592e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fd4b 	bl	800592e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <xTaskResumeAll+0x120>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <xTaskResumeAll+0x120>)
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <xTaskResumeAll+0x124>)
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f7ff fcd7 	bl	8005874 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <xTaskResumeAll+0x128>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <xTaskResumeAll+0x12c>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eda:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <xTaskResumeAll+0x11c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1cc      	bne.n	8005e7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ee8:	f000 fa12 	bl	8006310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eec:	4b1c      	ldr	r3, [pc, #112]	; (8005f60 <xTaskResumeAll+0x130>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d010      	beq.n	8005f1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ef8:	f000 f836 	bl	8005f68 <xTaskIncrementTick>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f02:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <xTaskResumeAll+0x12c>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f1      	bne.n	8005ef8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <xTaskResumeAll+0x130>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <xTaskResumeAll+0x12c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f26:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <xTaskResumeAll+0x134>)
 8005f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f36:	f000 fbcd 	bl	80066d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000474 	.word	0x20000474
 8005f48:	2000044c 	.word	0x2000044c
 8005f4c:	2000040c 	.word	0x2000040c
 8005f50:	20000454 	.word	0x20000454
 8005f54:	20000350 	.word	0x20000350
 8005f58:	2000034c 	.word	0x2000034c
 8005f5c:	20000460 	.word	0x20000460
 8005f60:	2000045c 	.word	0x2000045c
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f72:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <xTaskIncrementTick+0x144>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 808e 	bne.w	8006098 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f7c:	4b4c      	ldr	r3, [pc, #304]	; (80060b0 <xTaskIncrementTick+0x148>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f84:	4a4a      	ldr	r2, [pc, #296]	; (80060b0 <xTaskIncrementTick+0x148>)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d120      	bne.n	8005fd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f90:	4b48      	ldr	r3, [pc, #288]	; (80060b4 <xTaskIncrementTick+0x14c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	603b      	str	r3, [r7, #0]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <xTaskIncrementTick+0x46>
 8005fb0:	4b40      	ldr	r3, [pc, #256]	; (80060b4 <xTaskIncrementTick+0x14c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	4b40      	ldr	r3, [pc, #256]	; (80060b8 <xTaskIncrementTick+0x150>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3e      	ldr	r2, [pc, #248]	; (80060b4 <xTaskIncrementTick+0x14c>)
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	4a3e      	ldr	r2, [pc, #248]	; (80060b8 <xTaskIncrementTick+0x150>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <xTaskIncrementTick+0x154>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <xTaskIncrementTick+0x154>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	f000 f99f 	bl	8006310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fd2:	4b3b      	ldr	r3, [pc, #236]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d348      	bcc.n	800606e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <xTaskIncrementTick+0x14c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d104      	bne.n	8005ff0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe6:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	601a      	str	r2, [r3, #0]
					break;
 8005fee:	e03e      	b.n	800606e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff0:	4b30      	ldr	r3, [pc, #192]	; (80060b4 <xTaskIncrementTick+0x14c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d203      	bcs.n	8006010 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006008:	4a2d      	ldr	r2, [pc, #180]	; (80060c0 <xTaskIncrementTick+0x158>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800600e:	e02e      	b.n	800606e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	3304      	adds	r3, #4
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fc8a 	bl	800592e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3318      	adds	r3, #24
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fc81 	bl	800592e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	2201      	movs	r2, #1
 8006032:	409a      	lsls	r2, r3
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <xTaskIncrementTick+0x15c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4313      	orrs	r3, r2
 800603a:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <xTaskIncrementTick+0x15c>)
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <xTaskIncrementTick+0x160>)
 800604c:	441a      	add	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7ff fc0d 	bl	8005874 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <xTaskIncrementTick+0x164>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	429a      	cmp	r2, r3
 8006066:	d3b9      	bcc.n	8005fdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606c:	e7b6      	b.n	8005fdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800606e:	4b17      	ldr	r3, [pc, #92]	; (80060cc <xTaskIncrementTick+0x164>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	4914      	ldr	r1, [pc, #80]	; (80060c8 <xTaskIncrementTick+0x160>)
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d901      	bls.n	800608a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006086:	2301      	movs	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <xTaskIncrementTick+0x168>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e004      	b.n	80060a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006098:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <xTaskIncrementTick+0x16c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <xTaskIncrementTick+0x16c>)
 80060a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060a2:	697b      	ldr	r3, [r7, #20]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000474 	.word	0x20000474
 80060b0:	20000450 	.word	0x20000450
 80060b4:	20000404 	.word	0x20000404
 80060b8:	20000408 	.word	0x20000408
 80060bc:	20000464 	.word	0x20000464
 80060c0:	2000046c 	.word	0x2000046c
 80060c4:	20000454 	.word	0x20000454
 80060c8:	20000350 	.word	0x20000350
 80060cc:	2000034c 	.word	0x2000034c
 80060d0:	20000460 	.word	0x20000460
 80060d4:	2000045c 	.word	0x2000045c

080060d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060de:	4b29      	ldr	r3, [pc, #164]	; (8006184 <vTaskSwitchContext+0xac>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060e6:	4b28      	ldr	r3, [pc, #160]	; (8006188 <vTaskSwitchContext+0xb0>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060ec:	e044      	b.n	8006178 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <vTaskSwitchContext+0xb0>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <vTaskSwitchContext+0xb4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	fab3 f383 	clz	r3, r3
 8006100:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006102:	7afb      	ldrb	r3, [r7, #11]
 8006104:	f1c3 031f 	rsb	r3, r3, #31
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	4921      	ldr	r1, [pc, #132]	; (8006190 <vTaskSwitchContext+0xb8>)
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <vTaskSwitchContext+0x5c>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <vTaskSwitchContext+0x5a>
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4a14      	ldr	r2, [pc, #80]	; (8006190 <vTaskSwitchContext+0xb8>)
 8006140:	4413      	add	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	605a      	str	r2, [r3, #4]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3308      	adds	r3, #8
 8006156:	429a      	cmp	r2, r3
 8006158:	d104      	bne.n	8006164 <vTaskSwitchContext+0x8c>
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <vTaskSwitchContext+0xbc>)
 800616c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <vTaskSwitchContext+0xbc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	334c      	adds	r3, #76	; 0x4c
 8006174:	4a08      	ldr	r2, [pc, #32]	; (8006198 <vTaskSwitchContext+0xc0>)
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	20000474 	.word	0x20000474
 8006188:	20000460 	.word	0x20000460
 800618c:	20000454 	.word	0x20000454
 8006190:	20000350 	.word	0x20000350
 8006194:	2000034c 	.word	0x2000034c
 8006198:	20000010 	.word	0x20000010

0800619c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061a4:	f000 f852 	bl	800624c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <prvIdleTask+0x28>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d9f9      	bls.n	80061a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <prvIdleTask+0x2c>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061c0:	e7f0      	b.n	80061a4 <prvIdleTask+0x8>
 80061c2:	bf00      	nop
 80061c4:	20000350 	.word	0x20000350
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	e00c      	b.n	80061f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4a12      	ldr	r2, [pc, #72]	; (800622c <prvInitialiseTaskLists+0x60>)
 80061e4:	4413      	add	r3, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fb17 	bl	800581a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3301      	adds	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	d9ef      	bls.n	80061d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061f8:	480d      	ldr	r0, [pc, #52]	; (8006230 <prvInitialiseTaskLists+0x64>)
 80061fa:	f7ff fb0e 	bl	800581a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061fe:	480d      	ldr	r0, [pc, #52]	; (8006234 <prvInitialiseTaskLists+0x68>)
 8006200:	f7ff fb0b 	bl	800581a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006204:	480c      	ldr	r0, [pc, #48]	; (8006238 <prvInitialiseTaskLists+0x6c>)
 8006206:	f7ff fb08 	bl	800581a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800620a:	480c      	ldr	r0, [pc, #48]	; (800623c <prvInitialiseTaskLists+0x70>)
 800620c:	f7ff fb05 	bl	800581a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006210:	480b      	ldr	r0, [pc, #44]	; (8006240 <prvInitialiseTaskLists+0x74>)
 8006212:	f7ff fb02 	bl	800581a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <prvInitialiseTaskLists+0x78>)
 8006218:	4a05      	ldr	r2, [pc, #20]	; (8006230 <prvInitialiseTaskLists+0x64>)
 800621a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <prvInitialiseTaskLists+0x7c>)
 800621e:	4a05      	ldr	r2, [pc, #20]	; (8006234 <prvInitialiseTaskLists+0x68>)
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000350 	.word	0x20000350
 8006230:	200003dc 	.word	0x200003dc
 8006234:	200003f0 	.word	0x200003f0
 8006238:	2000040c 	.word	0x2000040c
 800623c:	20000420 	.word	0x20000420
 8006240:	20000438 	.word	0x20000438
 8006244:	20000404 	.word	0x20000404
 8006248:	20000408 	.word	0x20000408

0800624c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006252:	e019      	b.n	8006288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006254:	f000 fa0e 	bl	8006674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <prvCheckTasksWaitingTermination+0x50>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fb62 	bl	800592e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <prvCheckTasksWaitingTermination+0x54>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3b01      	subs	r3, #1
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <prvCheckTasksWaitingTermination+0x54>)
 8006272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <prvCheckTasksWaitingTermination+0x58>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <prvCheckTasksWaitingTermination+0x58>)
 800627c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800627e:	f000 fa29 	bl	80066d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f810 	bl	80062a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <prvCheckTasksWaitingTermination+0x58>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e1      	bne.n	8006254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000420 	.word	0x20000420
 80062a0:	2000044c 	.word	0x2000044c
 80062a4:	20000434 	.word	0x20000434

080062a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	334c      	adds	r3, #76	; 0x4c
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fd53 	bl	8006d60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d108      	bne.n	80062d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fb81 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fb7e 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062d4:	e018      	b.n	8006308 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d103      	bne.n	80062e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fb75 	bl	80069d0 <vPortFree>
	}
 80062e6:	e00f      	b.n	8006308 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d00a      	beq.n	8006308 <prvDeleteTCB+0x60>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <prvDeleteTCB+0x5e>
	}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <prvResetNextTaskUnblockTime+0x38>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <prvResetNextTaskUnblockTime+0x3c>)
 8006322:	f04f 32ff 	mov.w	r2, #4294967295
 8006326:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006328:	e008      	b.n	800633c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <prvResetNextTaskUnblockTime+0x38>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <prvResetNextTaskUnblockTime+0x3c>)
 800633a:	6013      	str	r3, [r2, #0]
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	20000404 	.word	0x20000404
 800634c:	2000046c 	.word	0x2000046c

08006350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800635a:	4b29      	ldr	r3, [pc, #164]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006360:	4b28      	ldr	r3, [pc, #160]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fae1 	bl	800592e <uxListRemove>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006372:	4b24      	ldr	r3, [pc, #144]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	2201      	movs	r2, #1
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43da      	mvns	r2, r3
 8006380:	4b21      	ldr	r3, [pc, #132]	; (8006408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4013      	ands	r3, r2
 8006386:	4a20      	ldr	r2, [pc, #128]	; (8006408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d10a      	bne.n	80063a8 <prvAddCurrentTaskToDelayedList+0x58>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006398:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	481a      	ldr	r0, [pc, #104]	; (800640c <prvAddCurrentTaskToDelayedList+0xbc>)
 80063a2:	f7ff fa67 	bl	8005874 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063a6:	e026      	b.n	80063f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d209      	bcs.n	80063d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <prvAddCurrentTaskToDelayedList+0xc0>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f7ff fa75 	bl	80058bc <vListInsert>
}
 80063d2:	e010      	b.n	80063f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3304      	adds	r3, #4
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7ff fa6b 	bl	80058bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d202      	bcs.n	80063f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063f0:	4a09      	ldr	r2, [pc, #36]	; (8006418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6013      	str	r3, [r2, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000450 	.word	0x20000450
 8006404:	2000034c 	.word	0x2000034c
 8006408:	20000454 	.word	0x20000454
 800640c:	20000438 	.word	0x20000438
 8006410:	20000408 	.word	0x20000408
 8006414:	20000404 	.word	0x20000404
 8006418:	2000046c 	.word	0x2000046c

0800641c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b04      	subs	r3, #4
 800642c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b04      	subs	r3, #4
 800643a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b04      	subs	r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800644c:	4a0c      	ldr	r2, [pc, #48]	; (8006480 <pxPortInitialiseStack+0x64>)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b14      	subs	r3, #20
 8006456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f06f 0202 	mvn.w	r2, #2
 800646a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3b20      	subs	r3, #32
 8006470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006472:	68fb      	ldr	r3, [r7, #12]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	08006485 	.word	0x08006485

08006484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <prvTaskExitError+0x54>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006496:	d00a      	beq.n	80064ae <prvTaskExitError+0x2a>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <prvTaskExitError+0x28>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60bb      	str	r3, [r7, #8]
}
 80064c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064c2:	bf00      	nop
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0fc      	beq.n	80064c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	2000000c 	.word	0x2000000c
 80064dc:	00000000 	.word	0x00000000

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	4770      	bx	lr
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst2>:
 8006500:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <prvPortStartFirstTask+0x24>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8814 	msr	CONTROL, r0
 800651a:	b662      	cpsie	i
 800651c:	b661      	cpsie	f
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	df00      	svc	0
 8006528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800652a:	bf00      	nop
 800652c:	e000ed08 	.word	0xe000ed08

08006530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006536:	4b46      	ldr	r3, [pc, #280]	; (8006650 <xPortStartScheduler+0x120>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a46      	ldr	r2, [pc, #280]	; (8006654 <xPortStartScheduler+0x124>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10a      	bne.n	8006556 <xPortStartScheduler+0x26>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006556:	4b3e      	ldr	r3, [pc, #248]	; (8006650 <xPortStartScheduler+0x120>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <xPortStartScheduler+0x128>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10a      	bne.n	8006576 <xPortStartScheduler+0x46>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <xPortStartScheduler+0x12c>)
 8006578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b31      	ldr	r3, [pc, #196]	; (8006660 <xPortStartScheduler+0x130>)
 800659c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <xPortStartScheduler+0x134>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a4:	e009      	b.n	80065ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065a6:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <xPortStartScheduler+0x134>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4a2d      	ldr	r2, [pc, #180]	; (8006664 <xPortStartScheduler+0x134>)
 80065ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b80      	cmp	r3, #128	; 0x80
 80065c4:	d0ef      	beq.n	80065a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065c6:	4b27      	ldr	r3, [pc, #156]	; (8006664 <xPortStartScheduler+0x134>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1c3 0307 	rsb	r3, r3, #7
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d00a      	beq.n	80065e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	60bb      	str	r3, [r7, #8]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065e8:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <xPortStartScheduler+0x134>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <xPortStartScheduler+0x134>)
 80065f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xPortStartScheduler+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065fa:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <xPortStartScheduler+0x134>)
 80065fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <xPortStartScheduler+0x138>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <xPortStartScheduler+0x138>)
 800660c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <xPortStartScheduler+0x138>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a14      	ldr	r2, [pc, #80]	; (8006668 <xPortStartScheduler+0x138>)
 8006618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800661c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800661e:	f000 f8dd 	bl	80067dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <xPortStartScheduler+0x13c>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006628:	f000 f8fc 	bl	8006824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <xPortStartScheduler+0x140>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <xPortStartScheduler+0x140>)
 8006632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006638:	f7ff ff66 	bl	8006508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800663c:	f7ff fd4c 	bl	80060d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006640:	f7ff ff20 	bl	8006484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	e000ed00 	.word	0xe000ed00
 8006654:	410fc271 	.word	0x410fc271
 8006658:	410fc270 	.word	0x410fc270
 800665c:	e000e400 	.word	0xe000e400
 8006660:	20000478 	.word	0x20000478
 8006664:	2000047c 	.word	0x2000047c
 8006668:	e000ed20 	.word	0xe000ed20
 800666c:	2000000c 	.word	0x2000000c
 8006670:	e000ef34 	.word	0xe000ef34

08006674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
}
 800668c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <vPortEnterCritical+0x58>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <vPortEnterCritical+0x58>)
 8006696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <vPortEnterCritical+0x58>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10f      	bne.n	80066c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <vPortEnterCritical+0x5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	603b      	str	r3, [r7, #0]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vPortEnterCritical+0x4a>
	}
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	2000000c 	.word	0x2000000c
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <vPortExitCritical+0x50>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <vPortExitCritical+0x24>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	607b      	str	r3, [r7, #4]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <vPortExitCritical+0x50>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <vPortExitCritical+0x50>)
 8006700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <vPortExitCritical+0x50>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <vPortExitCritical+0x42>
 800670a:	2300      	movs	r3, #0
 800670c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	2000000c 	.word	0x2000000c
	...

08006730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006730:	f3ef 8009 	mrs	r0, PSP
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <pxCurrentTCBConst>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f01e 0f10 	tst.w	lr, #16
 8006740:	bf08      	it	eq
 8006742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006754:	f380 8811 	msr	BASEPRI, r0
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f7ff fcba 	bl	80060d8 <vTaskSwitchContext>
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f380 8811 	msr	BASEPRI, r0
 800676c:	bc09      	pop	{r0, r3}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	f01e 0f10 	tst.w	lr, #16
 800677a:	bf08      	it	eq
 800677c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006780:	f380 8809 	msr	PSP, r0
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst>:
 8006790:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067b2:	f7ff fbd9 	bl	8005f68 <xTaskIncrementTick>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <SysTick_Handler+0x40>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <vPortSetupTimerInterrupt+0x38>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <vPortSetupTimerInterrupt+0x3c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <vPortSetupTimerInterrupt+0x40>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <vPortSetupTimerInterrupt+0x44>)
 80067fa:	3b01      	subs	r3, #1
 80067fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010
 8006814:	e000e018 	.word	0xe000e018
 8006818:	20000000 	.word	0x20000000
 800681c:	10624dd3 	.word	0x10624dd3
 8006820:	e000e014 	.word	0xe000e014

08006824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006834 <vPortEnableVFP+0x10>
 8006828:	6801      	ldr	r1, [r0, #0]
 800682a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800682e:	6001      	str	r1, [r0, #0]
 8006830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006832:	bf00      	nop
 8006834:	e000ed88 	.word	0xe000ed88

08006838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006844:	f7ff fae6 	bl	8005e14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <pvPortMalloc+0x180>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006850:	f000 f920 	bl	8006a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 8093 	bne.w	8006988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01d      	beq.n	80068a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006868:	2208      	movs	r2, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <pvPortMalloc+0x6c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d06e      	beq.n	8006988 <pvPortMalloc+0x150>
 80068aa:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <pvPortMalloc+0x188>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d869      	bhi.n	8006988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <pvPortMalloc+0x18c>)
 80068b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <pvPortMalloc+0x18c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0xa4>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <pvPortMalloc+0x180>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d050      	beq.n	8006988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2308      	movs	r3, #8
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d91f      	bls.n	8006948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <pvPortMalloc+0xf8>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	613b      	str	r3, [r7, #16]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f000 f908 	bl	8006b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <pvPortMalloc+0x188>)
 8006954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <pvPortMalloc+0x188>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <pvPortMalloc+0x190>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d203      	bcs.n	800696a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x190>)
 8006968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <pvPortMalloc+0x194>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <pvPortMalloc+0x194>)
 8006986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006988:	f7ff fa52 	bl	8005e30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <pvPortMalloc+0x174>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <pvPortMalloc+0x172>
	return pvReturn;
 80069ac:	69fb      	ldr	r3, [r7, #28]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20004088 	.word	0x20004088
 80069bc:	2000409c 	.word	0x2000409c
 80069c0:	2000408c 	.word	0x2000408c
 80069c4:	20004080 	.word	0x20004080
 80069c8:	20004090 	.word	0x20004090
 80069cc:	20004094 	.word	0x20004094

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04d      	beq.n	8006a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vPortFree+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vPortFree+0x44>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <vPortFree+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <vPortFree+0xb8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <vPortFree+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7ff f9dc 	bl	8005e14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vPortFree+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <vPortFree+0xbc>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f874 	bl	8006b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortFree+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <vPortFree+0xc0>)
 8006a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a7a:	f7ff f9d9 	bl	8005e30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	2000409c 	.word	0x2000409c
 8006a8c:	2000408c 	.word	0x2000408c
 8006a90:	20004098 	.word	0x20004098

08006a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <prvHeapInit+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvHeapInit+0xac>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <prvHeapInit+0xb0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <prvHeapInit+0xb0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvHeapInit+0xb4>)
 8006af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvHeapInit+0xb4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvHeapInit+0xb4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvHeapInit+0xb8>)
 8006b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvHeapInit+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvHeapInit+0xc0>)
 8006b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	20000480 	.word	0x20000480
 8006b44:	20004080 	.word	0x20004080
 8006b48:	20004088 	.word	0x20004088
 8006b4c:	20004090 	.word	0x20004090
 8006b50:	2000408c 	.word	0x2000408c
 8006b54:	2000409c 	.word	0x2000409c

08006b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <prvInsertBlockIntoFreeList+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e002      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x14>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f7      	bhi.n	8006b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d118      	bne.n	8006be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e008      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e003      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20004080 	.word	0x20004080
 8006c08:	20004088 	.word	0x20004088

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	; (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000010 	.word	0x20000010

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	; (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2600      	movs	r6, #0
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	; (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	; (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f000 fcb8 	bl	80075a0 <_init>
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2600      	movs	r6, #0
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	4798      	blx	r3
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	4798      	blx	r3
 8006c4c:	3601      	adds	r6, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	0800770c 	.word	0x0800770c
 8006c54:	0800770c 	.word	0x0800770c
 8006c58:	0800770c 	.word	0x0800770c
 8006c5c:	08007710 	.word	0x08007710

08006c60 <__retarget_lock_acquire_recursive>:
 8006c60:	4770      	bx	lr

08006c62 <__retarget_lock_release_recursive>:
 8006c62:	4770      	bx	lr

08006c64 <memcpy>:
 8006c64:	440a      	add	r2, r1
 8006c66:	4291      	cmp	r1, r2
 8006c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c6c:	d100      	bne.n	8006c70 <memcpy+0xc>
 8006c6e:	4770      	bx	lr
 8006c70:	b510      	push	{r4, lr}
 8006c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7a:	4291      	cmp	r1, r2
 8006c7c:	d1f9      	bne.n	8006c72 <memcpy+0xe>
 8006c7e:	bd10      	pop	{r4, pc}

08006c80 <memset>:
 8006c80:	4402      	add	r2, r0
 8006c82:	4603      	mov	r3, r0
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d100      	bne.n	8006c8a <memset+0xa>
 8006c88:	4770      	bx	lr
 8006c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8e:	e7f9      	b.n	8006c84 <memset+0x4>

08006c90 <_malloc_r>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	1ccd      	adds	r5, r1, #3
 8006c94:	f025 0503 	bic.w	r5, r5, #3
 8006c98:	3508      	adds	r5, #8
 8006c9a:	2d0c      	cmp	r5, #12
 8006c9c:	bf38      	it	cc
 8006c9e:	250c      	movcc	r5, #12
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	db01      	blt.n	8006caa <_malloc_r+0x1a>
 8006ca6:	42a9      	cmp	r1, r5
 8006ca8:	d903      	bls.n	8006cb2 <_malloc_r+0x22>
 8006caa:	230c      	movs	r3, #12
 8006cac:	6033      	str	r3, [r6, #0]
 8006cae:	2000      	movs	r0, #0
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb2:	f000 f8e1 	bl	8006e78 <__malloc_lock>
 8006cb6:	4921      	ldr	r1, [pc, #132]	; (8006d3c <_malloc_r+0xac>)
 8006cb8:	680a      	ldr	r2, [r1, #0]
 8006cba:	4614      	mov	r4, r2
 8006cbc:	b99c      	cbnz	r4, 8006ce6 <_malloc_r+0x56>
 8006cbe:	4f20      	ldr	r7, [pc, #128]	; (8006d40 <_malloc_r+0xb0>)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	b923      	cbnz	r3, 8006cce <_malloc_r+0x3e>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f000 f8a6 	bl	8006e18 <_sbrk_r>
 8006ccc:	6038      	str	r0, [r7, #0]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 f8a1 	bl	8006e18 <_sbrk_r>
 8006cd6:	1c43      	adds	r3, r0, #1
 8006cd8:	d123      	bne.n	8006d22 <_malloc_r+0x92>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	6033      	str	r3, [r6, #0]
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f000 f8d0 	bl	8006e84 <__malloc_unlock>
 8006ce4:	e7e3      	b.n	8006cae <_malloc_r+0x1e>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	1b5b      	subs	r3, r3, r5
 8006cea:	d417      	bmi.n	8006d1c <_malloc_r+0x8c>
 8006cec:	2b0b      	cmp	r3, #11
 8006cee:	d903      	bls.n	8006cf8 <_malloc_r+0x68>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	441c      	add	r4, r3
 8006cf4:	6025      	str	r5, [r4, #0]
 8006cf6:	e004      	b.n	8006d02 <_malloc_r+0x72>
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	42a2      	cmp	r2, r4
 8006cfc:	bf0c      	ite	eq
 8006cfe:	600b      	streq	r3, [r1, #0]
 8006d00:	6053      	strne	r3, [r2, #4]
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 f8be 	bl	8006e84 <__malloc_unlock>
 8006d08:	f104 000b 	add.w	r0, r4, #11
 8006d0c:	1d23      	adds	r3, r4, #4
 8006d0e:	f020 0007 	bic.w	r0, r0, #7
 8006d12:	1ac2      	subs	r2, r0, r3
 8006d14:	d0cc      	beq.n	8006cb0 <_malloc_r+0x20>
 8006d16:	1a1b      	subs	r3, r3, r0
 8006d18:	50a3      	str	r3, [r4, r2]
 8006d1a:	e7c9      	b.n	8006cb0 <_malloc_r+0x20>
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	6864      	ldr	r4, [r4, #4]
 8006d20:	e7cc      	b.n	8006cbc <_malloc_r+0x2c>
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d0e3      	beq.n	8006cf4 <_malloc_r+0x64>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 f872 	bl	8006e18 <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1dd      	bne.n	8006cf4 <_malloc_r+0x64>
 8006d38:	e7cf      	b.n	8006cda <_malloc_r+0x4a>
 8006d3a:	bf00      	nop
 8006d3c:	200040a0 	.word	0x200040a0
 8006d40:	200040a4 	.word	0x200040a4

08006d44 <cleanup_glue>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	6809      	ldr	r1, [r1, #0]
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	b109      	cbz	r1, 8006d52 <cleanup_glue+0xe>
 8006d4e:	f7ff fff9 	bl	8006d44 <cleanup_glue>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d5a:	f000 b899 	b.w	8006e90 <_free_r>
	...

08006d60 <_reclaim_reent>:
 8006d60:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <_reclaim_reent+0xb4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4283      	cmp	r3, r0
 8006d66:	b570      	push	{r4, r5, r6, lr}
 8006d68:	4604      	mov	r4, r0
 8006d6a:	d051      	beq.n	8006e10 <_reclaim_reent+0xb0>
 8006d6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d6e:	b143      	cbz	r3, 8006d82 <_reclaim_reent+0x22>
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d14a      	bne.n	8006e0c <_reclaim_reent+0xac>
 8006d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	b111      	cbz	r1, 8006d82 <_reclaim_reent+0x22>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 f887 	bl	8006e90 <_free_r>
 8006d82:	6961      	ldr	r1, [r4, #20]
 8006d84:	b111      	cbz	r1, 8006d8c <_reclaim_reent+0x2c>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f882 	bl	8006e90 <_free_r>
 8006d8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d8e:	b111      	cbz	r1, 8006d96 <_reclaim_reent+0x36>
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 f87d 	bl	8006e90 <_free_r>
 8006d96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d98:	b111      	cbz	r1, 8006da0 <_reclaim_reent+0x40>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f878 	bl	8006e90 <_free_r>
 8006da0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006da2:	b111      	cbz	r1, 8006daa <_reclaim_reent+0x4a>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 f873 	bl	8006e90 <_free_r>
 8006daa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006dac:	b111      	cbz	r1, 8006db4 <_reclaim_reent+0x54>
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f86e 	bl	8006e90 <_free_r>
 8006db4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006db6:	b111      	cbz	r1, 8006dbe <_reclaim_reent+0x5e>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f869 	bl	8006e90 <_free_r>
 8006dbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006dc0:	b111      	cbz	r1, 8006dc8 <_reclaim_reent+0x68>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f864 	bl	8006e90 <_free_r>
 8006dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dca:	b111      	cbz	r1, 8006dd2 <_reclaim_reent+0x72>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f85f 	bl	8006e90 <_free_r>
 8006dd2:	69a3      	ldr	r3, [r4, #24]
 8006dd4:	b1e3      	cbz	r3, 8006e10 <_reclaim_reent+0xb0>
 8006dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4798      	blx	r3
 8006ddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006dde:	b1b9      	cbz	r1, 8006e10 <_reclaim_reent+0xb0>
 8006de0:	4620      	mov	r0, r4
 8006de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006de6:	f7ff bfad 	b.w	8006d44 <cleanup_glue>
 8006dea:	5949      	ldr	r1, [r1, r5]
 8006dec:	b941      	cbnz	r1, 8006e00 <_reclaim_reent+0xa0>
 8006dee:	3504      	adds	r5, #4
 8006df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df2:	2d80      	cmp	r5, #128	; 0x80
 8006df4:	68d9      	ldr	r1, [r3, #12]
 8006df6:	d1f8      	bne.n	8006dea <_reclaim_reent+0x8a>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 f849 	bl	8006e90 <_free_r>
 8006dfe:	e7ba      	b.n	8006d76 <_reclaim_reent+0x16>
 8006e00:	680e      	ldr	r6, [r1, #0]
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 f844 	bl	8006e90 <_free_r>
 8006e08:	4631      	mov	r1, r6
 8006e0a:	e7ef      	b.n	8006dec <_reclaim_reent+0x8c>
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	e7ef      	b.n	8006df0 <_reclaim_reent+0x90>
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
 8006e12:	bf00      	nop
 8006e14:	20000010 	.word	0x20000010

08006e18 <_sbrk_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d06      	ldr	r5, [pc, #24]	; (8006e34 <_sbrk_r+0x1c>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7fa fedc 	bl	8001be0 <_sbrk>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_sbrk_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_sbrk_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20004410 	.word	0x20004410

08006e38 <siprintf>:
 8006e38:	b40e      	push	{r1, r2, r3}
 8006e3a:	b500      	push	{lr}
 8006e3c:	b09c      	sub	sp, #112	; 0x70
 8006e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e40:	9002      	str	r0, [sp, #8]
 8006e42:	9006      	str	r0, [sp, #24]
 8006e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e48:	4809      	ldr	r0, [pc, #36]	; (8006e70 <siprintf+0x38>)
 8006e4a:	9107      	str	r1, [sp, #28]
 8006e4c:	9104      	str	r1, [sp, #16]
 8006e4e:	4909      	ldr	r1, [pc, #36]	; (8006e74 <siprintf+0x3c>)
 8006e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e54:	9105      	str	r1, [sp, #20]
 8006e56:	6800      	ldr	r0, [r0, #0]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	a902      	add	r1, sp, #8
 8006e5c:	f000 f8c4 	bl	8006fe8 <_svfiprintf_r>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	b01c      	add	sp, #112	; 0x70
 8006e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e6c:	b003      	add	sp, #12
 8006e6e:	4770      	bx	lr
 8006e70:	20000010 	.word	0x20000010
 8006e74:	ffff0208 	.word	0xffff0208

08006e78 <__malloc_lock>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__malloc_lock+0x8>)
 8006e7a:	f7ff bef1 	b.w	8006c60 <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20004408 	.word	0x20004408

08006e84 <__malloc_unlock>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__malloc_unlock+0x8>)
 8006e86:	f7ff beec 	b.w	8006c62 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	20004408 	.word	0x20004408

08006e90 <_free_r>:
 8006e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e92:	2900      	cmp	r1, #0
 8006e94:	d048      	beq.n	8006f28 <_free_r+0x98>
 8006e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9a:	9001      	str	r0, [sp, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006ea2:	bfb8      	it	lt
 8006ea4:	18e4      	addlt	r4, r4, r3
 8006ea6:	f7ff ffe7 	bl	8006e78 <__malloc_lock>
 8006eaa:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <_free_r+0x9c>)
 8006eac:	9801      	ldr	r0, [sp, #4]
 8006eae:	6813      	ldr	r3, [r2, #0]
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	b933      	cbnz	r3, 8006ec2 <_free_r+0x32>
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	6014      	str	r4, [r2, #0]
 8006eb8:	b003      	add	sp, #12
 8006eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ebe:	f7ff bfe1 	b.w	8006e84 <__malloc_unlock>
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	d90b      	bls.n	8006ede <_free_r+0x4e>
 8006ec6:	6821      	ldr	r1, [r4, #0]
 8006ec8:	1862      	adds	r2, r4, r1
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bf04      	itt	eq
 8006ece:	681a      	ldreq	r2, [r3, #0]
 8006ed0:	685b      	ldreq	r3, [r3, #4]
 8006ed2:	6063      	str	r3, [r4, #4]
 8006ed4:	bf04      	itt	eq
 8006ed6:	1852      	addeq	r2, r2, r1
 8006ed8:	6022      	streq	r2, [r4, #0]
 8006eda:	602c      	str	r4, [r5, #0]
 8006edc:	e7ec      	b.n	8006eb8 <_free_r+0x28>
 8006ede:	461a      	mov	r2, r3
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b10b      	cbz	r3, 8006ee8 <_free_r+0x58>
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d9fa      	bls.n	8006ede <_free_r+0x4e>
 8006ee8:	6811      	ldr	r1, [r2, #0]
 8006eea:	1855      	adds	r5, r2, r1
 8006eec:	42a5      	cmp	r5, r4
 8006eee:	d10b      	bne.n	8006f08 <_free_r+0x78>
 8006ef0:	6824      	ldr	r4, [r4, #0]
 8006ef2:	4421      	add	r1, r4
 8006ef4:	1854      	adds	r4, r2, r1
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	6011      	str	r1, [r2, #0]
 8006efa:	d1dd      	bne.n	8006eb8 <_free_r+0x28>
 8006efc:	681c      	ldr	r4, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	6053      	str	r3, [r2, #4]
 8006f02:	4421      	add	r1, r4
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	e7d7      	b.n	8006eb8 <_free_r+0x28>
 8006f08:	d902      	bls.n	8006f10 <_free_r+0x80>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	e7d3      	b.n	8006eb8 <_free_r+0x28>
 8006f10:	6825      	ldr	r5, [r4, #0]
 8006f12:	1961      	adds	r1, r4, r5
 8006f14:	428b      	cmp	r3, r1
 8006f16:	bf04      	itt	eq
 8006f18:	6819      	ldreq	r1, [r3, #0]
 8006f1a:	685b      	ldreq	r3, [r3, #4]
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	bf04      	itt	eq
 8006f20:	1949      	addeq	r1, r1, r5
 8006f22:	6021      	streq	r1, [r4, #0]
 8006f24:	6054      	str	r4, [r2, #4]
 8006f26:	e7c7      	b.n	8006eb8 <_free_r+0x28>
 8006f28:	b003      	add	sp, #12
 8006f2a:	bd30      	pop	{r4, r5, pc}
 8006f2c:	200040a0 	.word	0x200040a0

08006f30 <__ssputs_r>:
 8006f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	688e      	ldr	r6, [r1, #8]
 8006f36:	429e      	cmp	r6, r3
 8006f38:	4682      	mov	sl, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	461f      	mov	r7, r3
 8006f40:	d838      	bhi.n	8006fb4 <__ssputs_r+0x84>
 8006f42:	898a      	ldrh	r2, [r1, #12]
 8006f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f48:	d032      	beq.n	8006fb0 <__ssputs_r+0x80>
 8006f4a:	6825      	ldr	r5, [r4, #0]
 8006f4c:	6909      	ldr	r1, [r1, #16]
 8006f4e:	eba5 0901 	sub.w	r9, r5, r1
 8006f52:	6965      	ldr	r5, [r4, #20]
 8006f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	444b      	add	r3, r9
 8006f60:	106d      	asrs	r5, r5, #1
 8006f62:	429d      	cmp	r5, r3
 8006f64:	bf38      	it	cc
 8006f66:	461d      	movcc	r5, r3
 8006f68:	0553      	lsls	r3, r2, #21
 8006f6a:	d531      	bpl.n	8006fd0 <__ssputs_r+0xa0>
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7ff fe8f 	bl	8006c90 <_malloc_r>
 8006f72:	4606      	mov	r6, r0
 8006f74:	b950      	cbnz	r0, 8006f8c <__ssputs_r+0x5c>
 8006f76:	230c      	movs	r3, #12
 8006f78:	f8ca 3000 	str.w	r3, [sl]
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8c:	6921      	ldr	r1, [r4, #16]
 8006f8e:	464a      	mov	r2, r9
 8006f90:	f7ff fe68 	bl	8006c64 <memcpy>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	6126      	str	r6, [r4, #16]
 8006fa2:	6165      	str	r5, [r4, #20]
 8006fa4:	444e      	add	r6, r9
 8006fa6:	eba5 0509 	sub.w	r5, r5, r9
 8006faa:	6026      	str	r6, [r4, #0]
 8006fac:	60a5      	str	r5, [r4, #8]
 8006fae:	463e      	mov	r6, r7
 8006fb0:	42be      	cmp	r6, r7
 8006fb2:	d900      	bls.n	8006fb6 <__ssputs_r+0x86>
 8006fb4:	463e      	mov	r6, r7
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	4641      	mov	r1, r8
 8006fbc:	f000 faa8 	bl	8007510 <memmove>
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	1b9b      	subs	r3, r3, r6
 8006fc6:	4432      	add	r2, r6
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	6022      	str	r2, [r4, #0]
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e7db      	b.n	8006f88 <__ssputs_r+0x58>
 8006fd0:	462a      	mov	r2, r5
 8006fd2:	f000 fab7 	bl	8007544 <_realloc_r>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1e1      	bne.n	8006fa0 <__ssputs_r+0x70>
 8006fdc:	6921      	ldr	r1, [r4, #16]
 8006fde:	4650      	mov	r0, sl
 8006fe0:	f7ff ff56 	bl	8006e90 <_free_r>
 8006fe4:	e7c7      	b.n	8006f76 <__ssputs_r+0x46>
	...

08006fe8 <_svfiprintf_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4698      	mov	r8, r3
 8006fee:	898b      	ldrh	r3, [r1, #12]
 8006ff0:	061b      	lsls	r3, r3, #24
 8006ff2:	b09d      	sub	sp, #116	; 0x74
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	d50e      	bpl.n	800701a <_svfiprintf_r+0x32>
 8006ffc:	690b      	ldr	r3, [r1, #16]
 8006ffe:	b963      	cbnz	r3, 800701a <_svfiprintf_r+0x32>
 8007000:	2140      	movs	r1, #64	; 0x40
 8007002:	f7ff fe45 	bl	8006c90 <_malloc_r>
 8007006:	6028      	str	r0, [r5, #0]
 8007008:	6128      	str	r0, [r5, #16]
 800700a:	b920      	cbnz	r0, 8007016 <_svfiprintf_r+0x2e>
 800700c:	230c      	movs	r3, #12
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e0d1      	b.n	80071ba <_svfiprintf_r+0x1d2>
 8007016:	2340      	movs	r3, #64	; 0x40
 8007018:	616b      	str	r3, [r5, #20]
 800701a:	2300      	movs	r3, #0
 800701c:	9309      	str	r3, [sp, #36]	; 0x24
 800701e:	2320      	movs	r3, #32
 8007020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007024:	f8cd 800c 	str.w	r8, [sp, #12]
 8007028:	2330      	movs	r3, #48	; 0x30
 800702a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071d4 <_svfiprintf_r+0x1ec>
 800702e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007032:	f04f 0901 	mov.w	r9, #1
 8007036:	4623      	mov	r3, r4
 8007038:	469a      	mov	sl, r3
 800703a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800703e:	b10a      	cbz	r2, 8007044 <_svfiprintf_r+0x5c>
 8007040:	2a25      	cmp	r2, #37	; 0x25
 8007042:	d1f9      	bne.n	8007038 <_svfiprintf_r+0x50>
 8007044:	ebba 0b04 	subs.w	fp, sl, r4
 8007048:	d00b      	beq.n	8007062 <_svfiprintf_r+0x7a>
 800704a:	465b      	mov	r3, fp
 800704c:	4622      	mov	r2, r4
 800704e:	4629      	mov	r1, r5
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ff6d 	bl	8006f30 <__ssputs_r>
 8007056:	3001      	adds	r0, #1
 8007058:	f000 80aa 	beq.w	80071b0 <_svfiprintf_r+0x1c8>
 800705c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800705e:	445a      	add	r2, fp
 8007060:	9209      	str	r2, [sp, #36]	; 0x24
 8007062:	f89a 3000 	ldrb.w	r3, [sl]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 80a2 	beq.w	80071b0 <_svfiprintf_r+0x1c8>
 800706c:	2300      	movs	r3, #0
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007076:	f10a 0a01 	add.w	sl, sl, #1
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007082:	931a      	str	r3, [sp, #104]	; 0x68
 8007084:	4654      	mov	r4, sl
 8007086:	2205      	movs	r2, #5
 8007088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708c:	4851      	ldr	r0, [pc, #324]	; (80071d4 <_svfiprintf_r+0x1ec>)
 800708e:	f7f9 f8c7 	bl	8000220 <memchr>
 8007092:	9a04      	ldr	r2, [sp, #16]
 8007094:	b9d8      	cbnz	r0, 80070ce <_svfiprintf_r+0xe6>
 8007096:	06d0      	lsls	r0, r2, #27
 8007098:	bf44      	itt	mi
 800709a:	2320      	movmi	r3, #32
 800709c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a0:	0711      	lsls	r1, r2, #28
 80070a2:	bf44      	itt	mi
 80070a4:	232b      	movmi	r3, #43	; 0x2b
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070aa:	f89a 3000 	ldrb.w	r3, [sl]
 80070ae:	2b2a      	cmp	r3, #42	; 0x2a
 80070b0:	d015      	beq.n	80070de <_svfiprintf_r+0xf6>
 80070b2:	9a07      	ldr	r2, [sp, #28]
 80070b4:	4654      	mov	r4, sl
 80070b6:	2000      	movs	r0, #0
 80070b8:	f04f 0c0a 	mov.w	ip, #10
 80070bc:	4621      	mov	r1, r4
 80070be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c2:	3b30      	subs	r3, #48	; 0x30
 80070c4:	2b09      	cmp	r3, #9
 80070c6:	d94e      	bls.n	8007166 <_svfiprintf_r+0x17e>
 80070c8:	b1b0      	cbz	r0, 80070f8 <_svfiprintf_r+0x110>
 80070ca:	9207      	str	r2, [sp, #28]
 80070cc:	e014      	b.n	80070f8 <_svfiprintf_r+0x110>
 80070ce:	eba0 0308 	sub.w	r3, r0, r8
 80070d2:	fa09 f303 	lsl.w	r3, r9, r3
 80070d6:	4313      	orrs	r3, r2
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	46a2      	mov	sl, r4
 80070dc:	e7d2      	b.n	8007084 <_svfiprintf_r+0x9c>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9103      	str	r1, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfbb      	ittet	lt
 80070ea:	425b      	neglt	r3, r3
 80070ec:	f042 0202 	orrlt.w	r2, r2, #2
 80070f0:	9307      	strge	r3, [sp, #28]
 80070f2:	9307      	strlt	r3, [sp, #28]
 80070f4:	bfb8      	it	lt
 80070f6:	9204      	strlt	r2, [sp, #16]
 80070f8:	7823      	ldrb	r3, [r4, #0]
 80070fa:	2b2e      	cmp	r3, #46	; 0x2e
 80070fc:	d10c      	bne.n	8007118 <_svfiprintf_r+0x130>
 80070fe:	7863      	ldrb	r3, [r4, #1]
 8007100:	2b2a      	cmp	r3, #42	; 0x2a
 8007102:	d135      	bne.n	8007170 <_svfiprintf_r+0x188>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	1d1a      	adds	r2, r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	9203      	str	r2, [sp, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	bfb8      	it	lt
 8007110:	f04f 33ff 	movlt.w	r3, #4294967295
 8007114:	3402      	adds	r4, #2
 8007116:	9305      	str	r3, [sp, #20]
 8007118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071e4 <_svfiprintf_r+0x1fc>
 800711c:	7821      	ldrb	r1, [r4, #0]
 800711e:	2203      	movs	r2, #3
 8007120:	4650      	mov	r0, sl
 8007122:	f7f9 f87d 	bl	8000220 <memchr>
 8007126:	b140      	cbz	r0, 800713a <_svfiprintf_r+0x152>
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	eba0 000a 	sub.w	r0, r0, sl
 800712e:	fa03 f000 	lsl.w	r0, r3, r0
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	4303      	orrs	r3, r0
 8007136:	3401      	adds	r4, #1
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713e:	4826      	ldr	r0, [pc, #152]	; (80071d8 <_svfiprintf_r+0x1f0>)
 8007140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007144:	2206      	movs	r2, #6
 8007146:	f7f9 f86b 	bl	8000220 <memchr>
 800714a:	2800      	cmp	r0, #0
 800714c:	d038      	beq.n	80071c0 <_svfiprintf_r+0x1d8>
 800714e:	4b23      	ldr	r3, [pc, #140]	; (80071dc <_svfiprintf_r+0x1f4>)
 8007150:	bb1b      	cbnz	r3, 800719a <_svfiprintf_r+0x1b2>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	3307      	adds	r3, #7
 8007156:	f023 0307 	bic.w	r3, r3, #7
 800715a:	3308      	adds	r3, #8
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	4433      	add	r3, r6
 8007162:	9309      	str	r3, [sp, #36]	; 0x24
 8007164:	e767      	b.n	8007036 <_svfiprintf_r+0x4e>
 8007166:	fb0c 3202 	mla	r2, ip, r2, r3
 800716a:	460c      	mov	r4, r1
 800716c:	2001      	movs	r0, #1
 800716e:	e7a5      	b.n	80070bc <_svfiprintf_r+0xd4>
 8007170:	2300      	movs	r3, #0
 8007172:	3401      	adds	r4, #1
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	4619      	mov	r1, r3
 8007178:	f04f 0c0a 	mov.w	ip, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007182:	3a30      	subs	r2, #48	; 0x30
 8007184:	2a09      	cmp	r2, #9
 8007186:	d903      	bls.n	8007190 <_svfiprintf_r+0x1a8>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0c5      	beq.n	8007118 <_svfiprintf_r+0x130>
 800718c:	9105      	str	r1, [sp, #20]
 800718e:	e7c3      	b.n	8007118 <_svfiprintf_r+0x130>
 8007190:	fb0c 2101 	mla	r1, ip, r1, r2
 8007194:	4604      	mov	r4, r0
 8007196:	2301      	movs	r3, #1
 8007198:	e7f0      	b.n	800717c <_svfiprintf_r+0x194>
 800719a:	ab03      	add	r3, sp, #12
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	462a      	mov	r2, r5
 80071a0:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <_svfiprintf_r+0x1f8>)
 80071a2:	a904      	add	r1, sp, #16
 80071a4:	4638      	mov	r0, r7
 80071a6:	f3af 8000 	nop.w
 80071aa:	1c42      	adds	r2, r0, #1
 80071ac:	4606      	mov	r6, r0
 80071ae:	d1d6      	bne.n	800715e <_svfiprintf_r+0x176>
 80071b0:	89ab      	ldrh	r3, [r5, #12]
 80071b2:	065b      	lsls	r3, r3, #25
 80071b4:	f53f af2c 	bmi.w	8007010 <_svfiprintf_r+0x28>
 80071b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ba:	b01d      	add	sp, #116	; 0x74
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	462a      	mov	r2, r5
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <_svfiprintf_r+0x1f8>)
 80071c8:	a904      	add	r1, sp, #16
 80071ca:	4638      	mov	r0, r7
 80071cc:	f000 f87a 	bl	80072c4 <_printf_i>
 80071d0:	e7eb      	b.n	80071aa <_svfiprintf_r+0x1c2>
 80071d2:	bf00      	nop
 80071d4:	080076d0 	.word	0x080076d0
 80071d8:	080076da 	.word	0x080076da
 80071dc:	00000000 	.word	0x00000000
 80071e0:	08006f31 	.word	0x08006f31
 80071e4:	080076d6 	.word	0x080076d6

080071e8 <_printf_common>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	4616      	mov	r6, r2
 80071ee:	4699      	mov	r9, r3
 80071f0:	688a      	ldr	r2, [r1, #8]
 80071f2:	690b      	ldr	r3, [r1, #16]
 80071f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	bfb8      	it	lt
 80071fc:	4613      	movlt	r3, r2
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007204:	4607      	mov	r7, r0
 8007206:	460c      	mov	r4, r1
 8007208:	b10a      	cbz	r2, 800720e <_printf_common+0x26>
 800720a:	3301      	adds	r3, #1
 800720c:	6033      	str	r3, [r6, #0]
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	0699      	lsls	r1, r3, #26
 8007212:	bf42      	ittt	mi
 8007214:	6833      	ldrmi	r3, [r6, #0]
 8007216:	3302      	addmi	r3, #2
 8007218:	6033      	strmi	r3, [r6, #0]
 800721a:	6825      	ldr	r5, [r4, #0]
 800721c:	f015 0506 	ands.w	r5, r5, #6
 8007220:	d106      	bne.n	8007230 <_printf_common+0x48>
 8007222:	f104 0a19 	add.w	sl, r4, #25
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	6832      	ldr	r2, [r6, #0]
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	42ab      	cmp	r3, r5
 800722e:	dc26      	bgt.n	800727e <_printf_common+0x96>
 8007230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007234:	1e13      	subs	r3, r2, #0
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	bf18      	it	ne
 800723a:	2301      	movne	r3, #1
 800723c:	0692      	lsls	r2, r2, #26
 800723e:	d42b      	bmi.n	8007298 <_printf_common+0xb0>
 8007240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007244:	4649      	mov	r1, r9
 8007246:	4638      	mov	r0, r7
 8007248:	47c0      	blx	r8
 800724a:	3001      	adds	r0, #1
 800724c:	d01e      	beq.n	800728c <_printf_common+0xa4>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	68e5      	ldr	r5, [r4, #12]
 8007252:	6832      	ldr	r2, [r6, #0]
 8007254:	f003 0306 	and.w	r3, r3, #6
 8007258:	2b04      	cmp	r3, #4
 800725a:	bf08      	it	eq
 800725c:	1aad      	subeq	r5, r5, r2
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	6922      	ldr	r2, [r4, #16]
 8007262:	bf0c      	ite	eq
 8007264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007268:	2500      	movne	r5, #0
 800726a:	4293      	cmp	r3, r2
 800726c:	bfc4      	itt	gt
 800726e:	1a9b      	subgt	r3, r3, r2
 8007270:	18ed      	addgt	r5, r5, r3
 8007272:	2600      	movs	r6, #0
 8007274:	341a      	adds	r4, #26
 8007276:	42b5      	cmp	r5, r6
 8007278:	d11a      	bne.n	80072b0 <_printf_common+0xc8>
 800727a:	2000      	movs	r0, #0
 800727c:	e008      	b.n	8007290 <_printf_common+0xa8>
 800727e:	2301      	movs	r3, #1
 8007280:	4652      	mov	r2, sl
 8007282:	4649      	mov	r1, r9
 8007284:	4638      	mov	r0, r7
 8007286:	47c0      	blx	r8
 8007288:	3001      	adds	r0, #1
 800728a:	d103      	bne.n	8007294 <_printf_common+0xac>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007294:	3501      	adds	r5, #1
 8007296:	e7c6      	b.n	8007226 <_printf_common+0x3e>
 8007298:	18e1      	adds	r1, r4, r3
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	2030      	movs	r0, #48	; 0x30
 800729e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072a2:	4422      	add	r2, r4
 80072a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072ac:	3302      	adds	r3, #2
 80072ae:	e7c7      	b.n	8007240 <_printf_common+0x58>
 80072b0:	2301      	movs	r3, #1
 80072b2:	4622      	mov	r2, r4
 80072b4:	4649      	mov	r1, r9
 80072b6:	4638      	mov	r0, r7
 80072b8:	47c0      	blx	r8
 80072ba:	3001      	adds	r0, #1
 80072bc:	d0e6      	beq.n	800728c <_printf_common+0xa4>
 80072be:	3601      	adds	r6, #1
 80072c0:	e7d9      	b.n	8007276 <_printf_common+0x8e>
	...

080072c4 <_printf_i>:
 80072c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	460c      	mov	r4, r1
 80072ca:	4691      	mov	r9, r2
 80072cc:	7e27      	ldrb	r7, [r4, #24]
 80072ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072d0:	2f78      	cmp	r7, #120	; 0x78
 80072d2:	4680      	mov	r8, r0
 80072d4:	469a      	mov	sl, r3
 80072d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072da:	d807      	bhi.n	80072ec <_printf_i+0x28>
 80072dc:	2f62      	cmp	r7, #98	; 0x62
 80072de:	d80a      	bhi.n	80072f6 <_printf_i+0x32>
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	f000 80d8 	beq.w	8007496 <_printf_i+0x1d2>
 80072e6:	2f58      	cmp	r7, #88	; 0x58
 80072e8:	f000 80a3 	beq.w	8007432 <_printf_i+0x16e>
 80072ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072f4:	e03a      	b.n	800736c <_printf_i+0xa8>
 80072f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072fa:	2b15      	cmp	r3, #21
 80072fc:	d8f6      	bhi.n	80072ec <_printf_i+0x28>
 80072fe:	a001      	add	r0, pc, #4	; (adr r0, 8007304 <_printf_i+0x40>)
 8007300:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007304:	0800735d 	.word	0x0800735d
 8007308:	08007371 	.word	0x08007371
 800730c:	080072ed 	.word	0x080072ed
 8007310:	080072ed 	.word	0x080072ed
 8007314:	080072ed 	.word	0x080072ed
 8007318:	080072ed 	.word	0x080072ed
 800731c:	08007371 	.word	0x08007371
 8007320:	080072ed 	.word	0x080072ed
 8007324:	080072ed 	.word	0x080072ed
 8007328:	080072ed 	.word	0x080072ed
 800732c:	080072ed 	.word	0x080072ed
 8007330:	0800747d 	.word	0x0800747d
 8007334:	080073a1 	.word	0x080073a1
 8007338:	0800745f 	.word	0x0800745f
 800733c:	080072ed 	.word	0x080072ed
 8007340:	080072ed 	.word	0x080072ed
 8007344:	0800749f 	.word	0x0800749f
 8007348:	080072ed 	.word	0x080072ed
 800734c:	080073a1 	.word	0x080073a1
 8007350:	080072ed 	.word	0x080072ed
 8007354:	080072ed 	.word	0x080072ed
 8007358:	08007467 	.word	0x08007467
 800735c:	680b      	ldr	r3, [r1, #0]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	600a      	str	r2, [r1, #0]
 8007364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800736c:	2301      	movs	r3, #1
 800736e:	e0a3      	b.n	80074b8 <_printf_i+0x1f4>
 8007370:	6825      	ldr	r5, [r4, #0]
 8007372:	6808      	ldr	r0, [r1, #0]
 8007374:	062e      	lsls	r6, r5, #24
 8007376:	f100 0304 	add.w	r3, r0, #4
 800737a:	d50a      	bpl.n	8007392 <_printf_i+0xce>
 800737c:	6805      	ldr	r5, [r0, #0]
 800737e:	600b      	str	r3, [r1, #0]
 8007380:	2d00      	cmp	r5, #0
 8007382:	da03      	bge.n	800738c <_printf_i+0xc8>
 8007384:	232d      	movs	r3, #45	; 0x2d
 8007386:	426d      	negs	r5, r5
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738c:	485e      	ldr	r0, [pc, #376]	; (8007508 <_printf_i+0x244>)
 800738e:	230a      	movs	r3, #10
 8007390:	e019      	b.n	80073c6 <_printf_i+0x102>
 8007392:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007396:	6805      	ldr	r5, [r0, #0]
 8007398:	600b      	str	r3, [r1, #0]
 800739a:	bf18      	it	ne
 800739c:	b22d      	sxthne	r5, r5
 800739e:	e7ef      	b.n	8007380 <_printf_i+0xbc>
 80073a0:	680b      	ldr	r3, [r1, #0]
 80073a2:	6825      	ldr	r5, [r4, #0]
 80073a4:	1d18      	adds	r0, r3, #4
 80073a6:	6008      	str	r0, [r1, #0]
 80073a8:	0628      	lsls	r0, r5, #24
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0xec>
 80073ac:	681d      	ldr	r5, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0xf2>
 80073b0:	0669      	lsls	r1, r5, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0xe8>
 80073b4:	881d      	ldrh	r5, [r3, #0]
 80073b6:	4854      	ldr	r0, [pc, #336]	; (8007508 <_printf_i+0x244>)
 80073b8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ba:	bf0c      	ite	eq
 80073bc:	2308      	moveq	r3, #8
 80073be:	230a      	movne	r3, #10
 80073c0:	2100      	movs	r1, #0
 80073c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073c6:	6866      	ldr	r6, [r4, #4]
 80073c8:	60a6      	str	r6, [r4, #8]
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	bfa2      	ittt	ge
 80073ce:	6821      	ldrge	r1, [r4, #0]
 80073d0:	f021 0104 	bicge.w	r1, r1, #4
 80073d4:	6021      	strge	r1, [r4, #0]
 80073d6:	b90d      	cbnz	r5, 80073dc <_printf_i+0x118>
 80073d8:	2e00      	cmp	r6, #0
 80073da:	d04d      	beq.n	8007478 <_printf_i+0x1b4>
 80073dc:	4616      	mov	r6, r2
 80073de:	fbb5 f1f3 	udiv	r1, r5, r3
 80073e2:	fb03 5711 	mls	r7, r3, r1, r5
 80073e6:	5dc7      	ldrb	r7, [r0, r7]
 80073e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073ec:	462f      	mov	r7, r5
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	460d      	mov	r5, r1
 80073f2:	d9f4      	bls.n	80073de <_printf_i+0x11a>
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d10b      	bne.n	8007410 <_printf_i+0x14c>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	07df      	lsls	r7, r3, #31
 80073fc:	d508      	bpl.n	8007410 <_printf_i+0x14c>
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6861      	ldr	r1, [r4, #4]
 8007402:	4299      	cmp	r1, r3
 8007404:	bfde      	ittt	le
 8007406:	2330      	movle	r3, #48	; 0x30
 8007408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800740c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007410:	1b92      	subs	r2, r2, r6
 8007412:	6122      	str	r2, [r4, #16]
 8007414:	f8cd a000 	str.w	sl, [sp]
 8007418:	464b      	mov	r3, r9
 800741a:	aa03      	add	r2, sp, #12
 800741c:	4621      	mov	r1, r4
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff fee2 	bl	80071e8 <_printf_common>
 8007424:	3001      	adds	r0, #1
 8007426:	d14c      	bne.n	80074c2 <_printf_i+0x1fe>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	b004      	add	sp, #16
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	4835      	ldr	r0, [pc, #212]	; (8007508 <_printf_i+0x244>)
 8007434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	680e      	ldr	r6, [r1, #0]
 800743c:	061f      	lsls	r7, r3, #24
 800743e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007442:	600e      	str	r6, [r1, #0]
 8007444:	d514      	bpl.n	8007470 <_printf_i+0x1ac>
 8007446:	07d9      	lsls	r1, r3, #31
 8007448:	bf44      	itt	mi
 800744a:	f043 0320 	orrmi.w	r3, r3, #32
 800744e:	6023      	strmi	r3, [r4, #0]
 8007450:	b91d      	cbnz	r5, 800745a <_printf_i+0x196>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f023 0320 	bic.w	r3, r3, #32
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	2310      	movs	r3, #16
 800745c:	e7b0      	b.n	80073c0 <_printf_i+0xfc>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f043 0320 	orr.w	r3, r3, #32
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	2378      	movs	r3, #120	; 0x78
 8007468:	4828      	ldr	r0, [pc, #160]	; (800750c <_printf_i+0x248>)
 800746a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800746e:	e7e3      	b.n	8007438 <_printf_i+0x174>
 8007470:	065e      	lsls	r6, r3, #25
 8007472:	bf48      	it	mi
 8007474:	b2ad      	uxthmi	r5, r5
 8007476:	e7e6      	b.n	8007446 <_printf_i+0x182>
 8007478:	4616      	mov	r6, r2
 800747a:	e7bb      	b.n	80073f4 <_printf_i+0x130>
 800747c:	680b      	ldr	r3, [r1, #0]
 800747e:	6826      	ldr	r6, [r4, #0]
 8007480:	6960      	ldr	r0, [r4, #20]
 8007482:	1d1d      	adds	r5, r3, #4
 8007484:	600d      	str	r5, [r1, #0]
 8007486:	0635      	lsls	r5, r6, #24
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	d501      	bpl.n	8007490 <_printf_i+0x1cc>
 800748c:	6018      	str	r0, [r3, #0]
 800748e:	e002      	b.n	8007496 <_printf_i+0x1d2>
 8007490:	0671      	lsls	r1, r6, #25
 8007492:	d5fb      	bpl.n	800748c <_printf_i+0x1c8>
 8007494:	8018      	strh	r0, [r3, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	4616      	mov	r6, r2
 800749c:	e7ba      	b.n	8007414 <_printf_i+0x150>
 800749e:	680b      	ldr	r3, [r1, #0]
 80074a0:	1d1a      	adds	r2, r3, #4
 80074a2:	600a      	str	r2, [r1, #0]
 80074a4:	681e      	ldr	r6, [r3, #0]
 80074a6:	6862      	ldr	r2, [r4, #4]
 80074a8:	2100      	movs	r1, #0
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7f8 feb8 	bl	8000220 <memchr>
 80074b0:	b108      	cbz	r0, 80074b6 <_printf_i+0x1f2>
 80074b2:	1b80      	subs	r0, r0, r6
 80074b4:	6060      	str	r0, [r4, #4]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	2300      	movs	r3, #0
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c0:	e7a8      	b.n	8007414 <_printf_i+0x150>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	4632      	mov	r2, r6
 80074c6:	4649      	mov	r1, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	47d0      	blx	sl
 80074cc:	3001      	adds	r0, #1
 80074ce:	d0ab      	beq.n	8007428 <_printf_i+0x164>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	079b      	lsls	r3, r3, #30
 80074d4:	d413      	bmi.n	80074fe <_printf_i+0x23a>
 80074d6:	68e0      	ldr	r0, [r4, #12]
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	4298      	cmp	r0, r3
 80074dc:	bfb8      	it	lt
 80074de:	4618      	movlt	r0, r3
 80074e0:	e7a4      	b.n	800742c <_printf_i+0x168>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4632      	mov	r2, r6
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d09b      	beq.n	8007428 <_printf_i+0x164>
 80074f0:	3501      	adds	r5, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	9903      	ldr	r1, [sp, #12]
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dcf2      	bgt.n	80074e2 <_printf_i+0x21e>
 80074fc:	e7eb      	b.n	80074d6 <_printf_i+0x212>
 80074fe:	2500      	movs	r5, #0
 8007500:	f104 0619 	add.w	r6, r4, #25
 8007504:	e7f5      	b.n	80074f2 <_printf_i+0x22e>
 8007506:	bf00      	nop
 8007508:	080076e1 	.word	0x080076e1
 800750c:	080076f2 	.word	0x080076f2

08007510 <memmove>:
 8007510:	4288      	cmp	r0, r1
 8007512:	b510      	push	{r4, lr}
 8007514:	eb01 0402 	add.w	r4, r1, r2
 8007518:	d902      	bls.n	8007520 <memmove+0x10>
 800751a:	4284      	cmp	r4, r0
 800751c:	4623      	mov	r3, r4
 800751e:	d807      	bhi.n	8007530 <memmove+0x20>
 8007520:	1e43      	subs	r3, r0, #1
 8007522:	42a1      	cmp	r1, r4
 8007524:	d008      	beq.n	8007538 <memmove+0x28>
 8007526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752e:	e7f8      	b.n	8007522 <memmove+0x12>
 8007530:	4402      	add	r2, r0
 8007532:	4601      	mov	r1, r0
 8007534:	428a      	cmp	r2, r1
 8007536:	d100      	bne.n	800753a <memmove+0x2a>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007542:	e7f7      	b.n	8007534 <memmove+0x24>

08007544 <_realloc_r>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	4607      	mov	r7, r0
 8007548:	4614      	mov	r4, r2
 800754a:	460e      	mov	r6, r1
 800754c:	b921      	cbnz	r1, 8007558 <_realloc_r+0x14>
 800754e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007552:	4611      	mov	r1, r2
 8007554:	f7ff bb9c 	b.w	8006c90 <_malloc_r>
 8007558:	b922      	cbnz	r2, 8007564 <_realloc_r+0x20>
 800755a:	f7ff fc99 	bl	8006e90 <_free_r>
 800755e:	4625      	mov	r5, r4
 8007560:	4628      	mov	r0, r5
 8007562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007564:	f000 f814 	bl	8007590 <_malloc_usable_size_r>
 8007568:	42a0      	cmp	r0, r4
 800756a:	d20f      	bcs.n	800758c <_realloc_r+0x48>
 800756c:	4621      	mov	r1, r4
 800756e:	4638      	mov	r0, r7
 8007570:	f7ff fb8e 	bl	8006c90 <_malloc_r>
 8007574:	4605      	mov	r5, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d0f2      	beq.n	8007560 <_realloc_r+0x1c>
 800757a:	4631      	mov	r1, r6
 800757c:	4622      	mov	r2, r4
 800757e:	f7ff fb71 	bl	8006c64 <memcpy>
 8007582:	4631      	mov	r1, r6
 8007584:	4638      	mov	r0, r7
 8007586:	f7ff fc83 	bl	8006e90 <_free_r>
 800758a:	e7e9      	b.n	8007560 <_realloc_r+0x1c>
 800758c:	4635      	mov	r5, r6
 800758e:	e7e7      	b.n	8007560 <_realloc_r+0x1c>

08007590 <_malloc_usable_size_r>:
 8007590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007594:	1f18      	subs	r0, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfbc      	itt	lt
 800759a:	580b      	ldrlt	r3, [r1, r0]
 800759c:	18c0      	addlt	r0, r0, r3
 800759e:	4770      	bx	lr

080075a0 <_init>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr

080075ac <_fini>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	bf00      	nop
 80075b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b2:	bc08      	pop	{r3}
 80075b4:	469e      	mov	lr, r3
 80075b6:	4770      	bx	lr

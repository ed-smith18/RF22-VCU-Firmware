
RF22_VCU_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cdc  08006cdc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004358  20000074  08006d58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043cc  08006d58  000243cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7f6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038de  00000000  00000000  0003b89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  000405d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d81  00000000  00000000  000418e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e2e  00000000  00000000  00067661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e914b  00000000  00000000  0007f48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001685da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b38  00000000  00000000  00168630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b70 	.word	0x08006b70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006b70 	.word	0x08006b70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8000bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	20000144 	.word	0x20000144

08000bf8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bfe:	f000 ff11 	bl	8001a24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c02:	f000 f859 	bl	8000cb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c06:	f000 fa4f 	bl	80010a8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c0a:	f000 f9f3 	bl	8000ff4 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8000c0e:	f000 fa1b 	bl	8001048 <MX_DMA_Init>
	MX_ADC1_Init();
 8000c12:	f000 f8c3 	bl	8000d9c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000c16:	f000 f913 	bl	8000e40 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c1a:	f000 f963 	bl	8000ee4 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c1e:	f000 f9b3 	bl	8000f88 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Linear Sensor) in DMA mode
 8000c22:	2201      	movs	r2, #1
 8000c24:	491a      	ldr	r1, [pc, #104]	; (8000c90 <main+0x98>)
 8000c26:	481b      	ldr	r0, [pc, #108]	; (8000c94 <main+0x9c>)
 8000c28:	f000 ff82 	bl	8001b30 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal[0], 1); //start the ADC for Brake Pressure Sensors in DMA mode
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	491a      	ldr	r1, [pc, #104]	; (8000c98 <main+0xa0>)
 8000c30:	481a      	ldr	r0, [pc, #104]	; (8000c9c <main+0xa4>)
 8000c32:	f000 ff7d 	bl	8001b30 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Rotational Sensor) in DMA mode
 8000c36:	2201      	movs	r2, #1
 8000c38:	4919      	ldr	r1, [pc, #100]	; (8000ca0 <main+0xa8>)
 8000c3a:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <main+0xac>)
 8000c3c:	f000 ff78 	bl	8001b30 <HAL_ADC_Start_DMA>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Torque_Command */
	osThreadDef(Torque_Command, start_Torque_Command, osPriorityRealtime, 0,
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <main+0xb0>)
 8000c42:	f107 041c 	add.w	r4, r7, #28
 8000c46:	461d      	mov	r5, r3
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			256);
	Torque_CommandHandle = osThreadCreate(osThread(Torque_Command), NULL);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 f863 	bl	8004d26 <osThreadCreate>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <main+0xb4>)
 8000c64:	6013      	str	r3, [r2, #0]

	/* definition and creation of Brake_Sensor */
	osThreadDef(Brake_Sensor, start_Brake_Sensor, osPriorityNormal, 0, 128);
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <main+0xb8>)
 8000c68:	463c      	mov	r4, r7
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Brake_SensorHandle = osThreadCreate(osThread(Brake_Sensor), NULL);
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 f852 	bl	8004d26 <osThreadCreate>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <main+0xbc>)
 8000c86:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000c88:	f004 f846 	bl	8004d18 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c8c:	e7fe      	b.n	8000c8c <main+0x94>
 8000c8e:	bf00      	nop
 8000c90:	20004368 	.word	0x20004368
 8000c94:	20004158 	.word	0x20004158
 8000c98:	20004248 	.word	0x20004248
 8000c9c:	200041a0 	.word	0x200041a0
 8000ca0:	2000436c 	.word	0x2000436c
 8000ca4:	200040ac 	.word	0x200040ac
 8000ca8:	08006ba8 	.word	0x08006ba8
 8000cac:	200040a8 	.word	0x200040a8
 8000cb0:	08006bc4 	.word	0x08006bc4
 8000cb4:	20004154 	.word	0x20004154

08000cb8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	; 0x50
 8000cbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2234      	movs	r2, #52	; 0x34
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f005 fac2 	bl	8006250 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <SystemClock_Config+0xdc>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <SystemClock_Config+0xdc>)
 8000ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cea:	6413      	str	r3, [r2, #64]	; 0x40
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <SystemClock_Config+0xdc>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <SystemClock_Config+0xe0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <SystemClock_Config+0xe0>)
 8000d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <SystemClock_Config+0xe0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000d2c:	23b4      	movs	r3, #180	; 0xb4
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 ff6f 	bl	8003c24 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x98>
		Error_Handler();
 8000d4c:	f000 fb2e 	bl	80013ac <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000d50:	f002 fc1a 	bl	8003588 <HAL_PWREx_EnableOverDrive>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0xa6>
		Error_Handler();
 8000d5a:	f000 fb27 	bl	80013ac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d5e:	230f      	movs	r3, #15
 8000d60:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d62:	2302      	movs	r3, #2
 8000d64:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fc53 	bl	8003628 <HAL_RCC_ClockConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0xd4>
		Error_Handler();
 8000d88:	f000 fb10 	bl	80013ac <Error_Handler>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3750      	adds	r7, #80	; 0x50
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <MX_ADC1_Init+0x9c>)
 8000db2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_ADC1_Init+0xa0>)
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dfe:	f000 fe53 	bl	8001aa8 <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000e08:	f000 fad0 	bl	80013ac <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000e1e:	f000 ffb5 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000e28:	f000 fac0 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20004158 	.word	0x20004158
 8000e38:	40012000 	.word	0x40012000
 8000e3c:	0f000001 	.word	0x0f000001

08000e40 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <MX_ADC2_Init+0x9c>)
 8000e56:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <MX_ADC2_Init+0xa0>)
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000ea2:	f000 fe01 	bl	8001aa8 <HAL_ADC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000eac:	f000 fa7e 	bl	80013ac <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_ADC2_Init+0x98>)
 8000ec2:	f000 ff63 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000ecc:	f000 fa6e 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200040ac 	.word	0x200040ac
 8000edc:	40012100 	.word	0x40012100
 8000ee0:	0f000001 	.word	0x0f000001

08000ee4 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <MX_ADC3_Init+0x9c>)
 8000efa:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000efe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f02:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <MX_ADC3_Init+0xa0>)
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f46:	f000 fdaf 	bl	8001aa8 <HAL_ADC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000f50:	f000 fa2c 	bl	80013ac <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000f54:	230a      	movs	r3, #10
 8000f56:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_ADC3_Init+0x98>)
 8000f66:	f000 ff11 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000f70:	f000 fa1c 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200041a0 	.word	0x200041a0
 8000f80:	40012200 	.word	0x40012200
 8000f84:	0f000001 	.word	0x0f000001

08000f88 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_CAN1_Init+0x64>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <MX_CAN1_Init+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_CAN1_Init+0x64>)
 8000f94:	2212      	movs	r2, #18
 8000f96:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_CAN1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000faa:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fb2:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_CAN1_Init+0x64>)
 8000fda:	f001 f987 	bl	80022ec <HAL_CAN_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_CAN1_Init+0x60>
		Error_Handler();
 8000fe4:	f000 f9e2 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000430c 	.word	0x2000430c
 8000ff0:	40006400 	.word	0x40006400

08000ff4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f003 fb46 	bl	80046bc <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001036:	f000 f9b9 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20004268 	.word	0x20004268
 8001044:	40004400 	.word	0x40004400

08001048 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	2038      	movs	r0, #56	; 0x38
 8001070:	f001 fd28 	bl	8002ac4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f001 fd41 	bl	8002afc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	2039      	movs	r0, #57	; 0x39
 8001080:	f001 fd20 	bl	8002ac4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001084:	2039      	movs	r0, #57	; 0x39
 8001086:	f001 fd39 	bl	8002afc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	203a      	movs	r0, #58	; 0x3a
 8001090:	f001 fd18 	bl	8002ac4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001094:	203a      	movs	r0, #58	; 0x3a
 8001096:	f001 fd31 	bl	8002afc <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a35      	ldr	r2, [pc, #212]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x110>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <MX_GPIO_Init+0x110>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <MX_GPIO_Init+0x110>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <MX_GPIO_Init+0x110>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <MX_GPIO_Init+0x110>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MX_GPIO_Init+0x110>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <MX_GPIO_Init+0x114>)
 8001134:	f002 f9f4 	bl	8003520 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x118>)
 800113e:	f002 f9ef 	bl	8003520 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001146:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001148:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800114c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4818      	ldr	r0, [pc, #96]	; (80011bc <MX_GPIO_Init+0x114>)
 800115a:	f002 f84d 	bl	80031f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4812      	ldr	r0, [pc, #72]	; (80011bc <MX_GPIO_Init+0x114>)
 8001172:	f002 f841 	bl	80031f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 8001176:	2304      	movs	r3, #4
 8001178:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <MX_GPIO_Init+0x114>)
 800118e:	f002 f833 	bl	80031f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001192:	2320      	movs	r3, #32
 8001194:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_GPIO_Init+0x118>)
 80011aa:	f002 f825 	bl	80031f8 <HAL_GPIO_Init>

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	00000000 	.word	0x00000000

080011c8 <APPS_Mapping>:
	return false; //shouldn't get to here

} //end Ready_to_Drive()

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]

	apps_PP[0] = 0.0495 * (*appsVal_0) - 24.28;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fadd 	bl	8000798 <__aeabi_ui2d>
 80011de:	a324      	add	r3, pc, #144	; (adr r3, 8001270 <APPS_Mapping+0xa8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff f86c 	bl	80002c0 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	a321      	add	r3, pc, #132	; (adr r3, 8001278 <APPS_Mapping+0xb0>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f991 	bl	800051c <__aeabi_dsub>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fb43 	bl	800088c <__aeabi_d2uiz>
 8001206:	4602      	mov	r2, r0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]

	if (apps_PP[0] < 0) {
		apps_PP[0] = 0;
	}
	if (apps_PP[0] > 100) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d902      	bls.n	800121a <APPS_Mapping+0x52>
		apps_PP[0] = 100;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2264      	movs	r2, #100	; 0x64
 8001218:	601a      	str	r2, [r3, #0]
	}

	apps_PP[1] = 0.034 * (*appsVal_1) - 24.49;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff faba 	bl	8000798 <__aeabi_ui2d>
 8001224:	a316      	add	r3, pc, #88	; (adr r3, 8001280 <APPS_Mapping+0xb8>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f849 	bl	80002c0 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a314      	add	r3, pc, #80	; (adr r3, 8001288 <APPS_Mapping+0xc0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f96e 	bl	800051c <__aeabi_dsub>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1d1c      	adds	r4, r3, #4
 800124c:	f7ff fb1e 	bl	800088c <__aeabi_d2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	6023      	str	r3, [r4, #0]

	if (apps_PP[1] < 0) {
		apps_PP[1] = 0;
	}
	if (apps_PP[1] > 100) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d903      	bls.n	8001266 <APPS_Mapping+0x9e>
		apps_PP[1] = 100;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3304      	adds	r3, #4
 8001262:	2264      	movs	r2, #100	; 0x64
 8001264:	601a      	str	r2, [r3, #0]
	}

} //end APPS_Mapping()
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	624dd2f2 	.word	0x624dd2f2
 8001274:	3fa95810 	.word	0x3fa95810
 8001278:	147ae148 	.word	0x147ae148
 800127c:	403847ae 	.word	0x403847ae
 8001280:	b020c49c 	.word	0xb020c49c
 8001284:	3fa16872 	.word	0x3fa16872
 8001288:	a3d70a3d 	.word	0xa3d70a3d
 800128c:	40387d70 	.word	0x40387d70

08001290 <start_Torque_Command>:
 * @brief  Function implementing the Torque_Command thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_Torque_Command */
void start_Torque_Command(void const *argument) {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b0c7      	sub	sp, #284	; 0x11c
 8001294:	af02      	add	r7, sp, #8
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	6018      	str	r0, [r3, #0]
	char msg[256];

	//First need to send Drive Enable command in order to gain control over the motor controller
	//Motor controller will timeout if it dosn't receive Drive Enable command or dosn't periodically receive Set Current command
	//We can send the Drive Enable command once and then periodically send Set Current command to prevent it from timing out.
	TxData[0] = 0x24; //Message ID for "Drive Enable" for motor controller
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <start_Torque_Command+0xbc>)
 800129c:	2224      	movs	r2, #36	; 0x24
 800129e:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x1F; //Node ID for Standard CAN message
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <start_Torque_Command+0xbc>)
 80012a2:	221f      	movs	r2, #31
 80012a4:	705a      	strb	r2, [r3, #1]
	TxData[2] = 1; // 1: TRUE enables drive, 0: FALSE disables drive
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <start_Torque_Command+0xbc>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	709a      	strb	r2, [r3, #2]
	//	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
	//		Error_Handler();
	//	}
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80012ac:	2120      	movs	r1, #32
 80012ae:	4828      	ldr	r0, [pc, #160]	; (8001350 <start_Torque_Command+0xc0>)
 80012b0:	f002 f94f 	bl	8003552 <HAL_GPIO_TogglePin>

		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <start_Torque_Command+0xc4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	22c8      	movs	r2, #200	; 0xc8
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d305      	bcc.n	80012ca <start_Torque_Command+0x3a>
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <start_Torque_Command+0xc4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d902      	bls.n	80012d0 <start_Torque_Command+0x40>
			//shutdown power to motor
			APPS_Failure = true;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <start_Torque_Command+0xc8>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
			//need to send out CAN message to set motor torque to zero
		}

		if ((appsVal[1] < APPS_1_MIN) || (appsVal[1] > APPS_1_MAX)) {
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <start_Torque_Command+0xc4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012d8:	4293      	cmp	r3, r2
 80012da:	d305      	bcc.n	80012e8 <start_Torque_Command+0x58>
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <start_Torque_Command+0xc4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f640 723c 	movw	r2, #3900	; 0xf3c
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d903      	bls.n	80012f0 <start_Torque_Command+0x60>
			//shutdown power to motor
			APPS_Failure = true;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <start_Torque_Command+0xc8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e028      	b.n	8001342 <start_Torque_Command+0xb2>
			//need to send out CAN message to set motor torque to zero
		}

		else {
			APPS_Failure = false;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <start_Torque_Command+0xc8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]

			APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 80012f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012fa:	461a      	mov	r2, r3
 80012fc:	4917      	ldr	r1, [pc, #92]	; (800135c <start_Torque_Command+0xcc>)
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <start_Torque_Command+0xc4>)
 8001300:	f7ff ff62 	bl	80011c8 <APPS_Mapping>

			sprintf(msg,
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <start_Torque_Command+0xc4>)
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <start_Torque_Command+0xc4>)
 800130a:	685c      	ldr	r4, [r3, #4]
 800130c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001310:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001314:	f107 0008 	add.w	r0, r7, #8
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	460a      	mov	r2, r1
 8001320:	490f      	ldr	r1, [pc, #60]	; (8001360 <start_Torque_Command+0xd0>)
 8001322:	f005 f871 	bl	8006408 <siprintf>
					"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu \r\n",
					appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff70 	bl	8000210 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	f107 0108 	add.w	r1, r7, #8
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <start_Torque_Command+0xd4>)
 800133e:	f003 fa0a 	bl	8004756 <HAL_UART_Transmit>
			//				} //end else
			//
			//			} //end else

		} //end else
		osDelay(50);
 8001342:	2032      	movs	r0, #50	; 0x32
 8001344:	f003 fd3b 	bl	8004dbe <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001348:	e7b0      	b.n	80012ac <start_Torque_Command+0x1c>
 800134a:	bf00      	nop
 800134c:	20004250 	.word	0x20004250
 8001350:	40020000 	.word	0x40020000
 8001354:	20004368 	.word	0x20004368
 8001358:	20000344 	.word	0x20000344
 800135c:	2000436c 	.word	0x2000436c
 8001360:	08006be0 	.word	0x08006be0
 8001364:	20004268 	.word	0x20004268

08001368 <start_Brake_Sensor>:
 * @brief Function implementing the Brake_Sensor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_Brake_Sensor */
void start_Brake_Sensor(void const *argument) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN start_Brake_Sensor */
	/* Infinite loop */
	for (;;) {
		//Light up brake light if brakes are pressed

		if ((bpsVal[0] < bps_MIN) || (bpsVal[0] > bps_MAX)) {
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <start_Brake_Sensor+0x1c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001378:	4293      	cmp	r3, r2
			//Shutdown power to motor
		}
		osDelay(100);
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f003 fd1f 	bl	8004dbe <osDelay>
		if ((bpsVal[0] < bps_MIN) || (bpsVal[0] > bps_MAX)) {
 8001380:	e7f6      	b.n	8001370 <start_Brake_Sensor+0x8>
 8001382:	bf00      	nop
 8001384:	20004248 	.word	0x20004248

08001388 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800139a:	f000 fb65 	bl	8001a68 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000

080013ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_MspInit+0x54>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_MspInit+0x54>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_MspInit+0x54>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_MspInit+0x54>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_MspInit+0x54>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_MspInit+0x54>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	210f      	movs	r1, #15
 80013fa:	f06f 0001 	mvn.w	r0, #1
 80013fe:	f001 fb61 	bl	8002ac4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a9b      	ldr	r2, [pc, #620]	; (800169c <HAL_ADC_MspInit+0x28c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d161      	bne.n	80014f6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
 8001436:	4b9a      	ldr	r3, [pc, #616]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a99      	ldr	r2, [pc, #612]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a92      	ldr	r2, [pc, #584]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b90      	ldr	r3, [pc, #576]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146a:	2301      	movs	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4889      	ldr	r0, [pc, #548]	; (80016a4 <HAL_ADC_MspInit+0x294>)
 800147e:	f001 febb 	bl	80031f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 8001484:	4a89      	ldr	r2, [pc, #548]	; (80016ac <HAL_ADC_MspInit+0x29c>)
 8001486:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001488:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148e:	4b86      	ldr	r3, [pc, #536]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	4b83      	ldr	r3, [pc, #524]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 800149c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014aa:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014c0:	4b79      	ldr	r3, [pc, #484]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014c8:	2203      	movs	r2, #3
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80014cc:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014d2:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d8:	4873      	ldr	r0, [pc, #460]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014da:	f001 fb1d 	bl	8002b18 <HAL_DMA_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80014e4:	f7ff ff62 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_ADC_MspInit+0x298>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014f4:	e0ce      	b.n	8001694 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6d      	ldr	r2, [pc, #436]	; (80016b0 <HAL_ADC_MspInit+0x2a0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d162      	bne.n	80015c6 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	4b66      	ldr	r3, [pc, #408]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	4a65      	ldr	r2, [pc, #404]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6453      	str	r3, [r2, #68]	; 0x44
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001538:	2302      	movs	r3, #2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4856      	ldr	r0, [pc, #344]	; (80016a4 <HAL_ADC_MspInit+0x294>)
 800154c:	f001 fe54 	bl	80031f8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001552:	4a59      	ldr	r2, [pc, #356]	; (80016b8 <HAL_ADC_MspInit+0x2a8>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001556:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800155c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 800156c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001572:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001578:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800157a:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 800157c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001580:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001588:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001590:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001592:	2204      	movs	r2, #4
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 8001598:	2203      	movs	r2, #3
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80015a8:	4842      	ldr	r0, [pc, #264]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 80015aa:	f001 fab5 	bl	8002b18 <HAL_DMA_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 80015b4:	f7ff fefa 	bl	80013ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3e      	ldr	r2, [pc, #248]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 80015bc:	639a      	str	r2, [r3, #56]	; 0x38
 80015be:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <HAL_ADC_MspInit+0x2a4>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015c4:	e066      	b.n	8001694 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a3c      	ldr	r2, [pc, #240]	; (80016bc <HAL_ADC_MspInit+0x2ac>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d161      	bne.n	8001694 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6453      	str	r3, [r2, #68]	; 0x44
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6313      	str	r3, [r2, #48]	; 0x30
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_ADC_MspInit+0x290>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001608:	2301      	movs	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160c:	2303      	movs	r3, #3
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4829      	ldr	r0, [pc, #164]	; (80016c0 <HAL_ADC_MspInit+0x2b0>)
 800161c:	f001 fdec 	bl	80031f8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <HAL_ADC_MspInit+0x2b8>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001628:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001648:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 800164c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001650:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001658:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001662:	2204      	movs	r2, #4
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001668:	2203      	movs	r2, #3
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 800166e:	2200      	movs	r2, #0
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 800167a:	f001 fa4d 	bl	8002b18 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8001684:	f7ff fe92 	bl	80013ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_ADC_MspInit+0x2b4>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001694:	bf00      	nop
 8001696:	3738      	adds	r7, #56	; 0x38
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012000 	.word	0x40012000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	200041e8 	.word	0x200041e8
 80016ac:	40026410 	.word	0x40026410
 80016b0:	40012100 	.word	0x40012100
 80016b4:	200042ac 	.word	0x200042ac
 80016b8:	40026440 	.word	0x40026440
 80016bc:	40012200 	.word	0x40012200
 80016c0:	40020800 	.word	0x40020800
 80016c4:	200040f4 	.word	0x200040f4
 80016c8:	40026428 	.word	0x40026428

080016cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_CAN_MspInit+0x94>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d134      	bne.n	8001758 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_CAN_MspInit+0x98>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_CAN_MspInit+0x98>)
 80016f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_CAN_MspInit+0x98>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_CAN_MspInit+0x98>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_CAN_MspInit+0x98>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_CAN_MspInit+0x98>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001738:	2309      	movs	r3, #9
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <HAL_CAN_MspInit+0x9c>)
 8001744:	f001 fd58 	bl	80031f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2105      	movs	r1, #5
 800174c:	2014      	movs	r0, #20
 800174e:	f001 f9b9 	bl	8002ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001752:	2014      	movs	r0, #20
 8001754:	f001 f9d2 	bl	8002afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40006400 	.word	0x40006400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_UART_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_UART_MspInit+0x88>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_UART_MspInit+0x88>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_UART_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_UART_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_UART_MspInit+0x88>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_UART_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017c6:	230c      	movs	r3, #12
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d6:	2307      	movs	r3, #7
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_UART_MspInit+0x8c>)
 80017e2:	f001 fd09 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40004400 	.word	0x40004400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	2019      	movs	r0, #25
 8001812:	f001 f957 	bl	8002ac4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001816:	2019      	movs	r0, #25
 8001818:	f001 f970 	bl	8002afc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_InitTick+0xa4>)
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_InitTick+0xa4>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6453      	str	r3, [r2, #68]	; 0x44
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_InitTick+0xa4>)
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001838:	f107 0210 	add.w	r2, r7, #16
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f002 f80a 	bl	800385c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001848:	f001 fff4 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 800184c:	4603      	mov	r3, r0
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <HAL_InitTick+0xa8>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	3b01      	subs	r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_InitTick+0xac>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_InitTick+0xb0>)
 8001864:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_InitTick+0xac>)
 8001868:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_InitTick+0xac>)
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_InitTick+0xac>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_InitTick+0xac>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <HAL_InitTick+0xac>)
 8001882:	f002 fc6d 	bl	8004160 <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d104      	bne.n	8001896 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <HAL_InitTick+0xac>)
 800188e:	f002 fcc1 	bl	8004214 <HAL_TIM_Base_Start_IT>
 8001892:	4603      	mov	r3, r0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3730      	adds	r7, #48	; 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	20004370 	.word	0x20004370
 80018ac:	40010000 	.word	0x40010000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <CAN1_RX0_IRQHandler+0x10>)
 80018e2:	f000 fdfe 	bl	80024e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000430c 	.word	0x2000430c

080018f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018f6:	f002 fcfd 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20004370 	.word	0x20004370

08001904 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA2_Stream0_IRQHandler+0x10>)
 800190a:	f001 fa0b 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200041e8 	.word	0x200041e8

08001918 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA2_Stream1_IRQHandler+0x10>)
 800191e:	f001 fa01 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200040f4 	.word	0x200040f4

0800192c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream2_IRQHandler+0x10>)
 8001932:	f001 f9f7 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200042ac 	.word	0x200042ac

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f004 fc34 	bl	80061dc <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20020000 	.word	0x20020000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	20000348 	.word	0x20000348
 80019a8:	200043d0 	.word	0x200043d0

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019fa:	f7ff ffd7 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f004 fbf3 	bl	80061e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff f8f9 	bl	8000bf8 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a14:	08006ce4 	.word	0x08006ce4
  ldr r2, =_sbss
 8001a18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a1c:	200043cc 	.word	0x200043cc

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f001 f82e 	bl	8002aae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f7ff fed2 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fcae 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	200043b8 	.word	0x200043b8

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200043b8 	.word	0x200043b8

08001aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e033      	b.n	8001b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fca2 	bl	8001410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aee:	f023 0302 	bic.w	r3, r3, #2
 8001af2:	f043 0202 	orr.w	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fa78 	bl	8001ff0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
 8001b16:	e001      	b.n	8001b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start_DMA+0x1e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0e9      	b.n	8001d22 <HAL_ADC_Start_DMA+0x1f2>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d018      	beq.n	8001b96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b74:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_ADC_Start_DMA+0x1fc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6d      	ldr	r2, [pc, #436]	; (8001d30 <HAL_ADC_Start_DMA+0x200>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba4:	d107      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f040 80a1 	bne.w	8001d08 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f023 0206 	bic.w	r2, r3, #6
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_ADC_Start_DMA+0x204>)
 8001c24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <HAL_ADC_Start_DMA+0x208>)
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <HAL_ADC_Start_DMA+0x20c>)
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <HAL_ADC_Start_DMA+0x210>)
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	334c      	adds	r3, #76	; 0x4c
 8001c72:	4619      	mov	r1, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f000 fffc 	bl	8002c74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d12a      	bne.n	8001cde <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <HAL_ADC_Start_DMA+0x214>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d015      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x18e>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <HAL_ADC_Start_DMA+0x218>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x178>
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_ADC_Start_DMA+0x204>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_ADC_Start_DMA+0x21c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d136      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_ADC_Start_DMA+0x204>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d130      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d129      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	e020      	b.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_ADC_Start_DMA+0x214>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d11b      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d114      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	e00b      	b.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0210 	orr.w	r2, r3, #16
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	40012300 	.word	0x40012300
 8001d38:	080021e9 	.word	0x080021e9
 8001d3c:	080022a3 	.word	0x080022a3
 8001d40:	080022bf 	.word	0x080022bf
 8001d44:	40012000 	.word	0x40012000
 8001d48:	40012100 	.word	0x40012100
 8001d4c:	40012200 	.word	0x40012200

08001d50 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1c>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e113      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x244>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d925      	bls.n	8001e04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68d9      	ldr	r1, [r3, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b1e      	subs	r3, #30
 8001dce:	2207      	movs	r2, #7
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	400a      	ands	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68d9      	ldr	r1, [r3, #12]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4403      	add	r3, r0
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	e022      	b.n	8001e4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	2207      	movs	r2, #7
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	400a      	ands	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4403      	add	r3, r0
 8001e40:	409a      	lsls	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d824      	bhi.n	8001e9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b05      	subs	r3, #5
 8001e64:	221f      	movs	r2, #31
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b05      	subs	r3, #5
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9a:	e04c      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d824      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b23      	subs	r3, #35	; 0x23
 8001eb6:	221f      	movs	r2, #31
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b23      	subs	r3, #35	; 0x23
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
 8001eec:	e023      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b41      	subs	r3, #65	; 0x41
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b41      	subs	r3, #65	; 0x41
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_ADC_ConfigChannel+0x250>)
 8001f38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_ADC_ConfigChannel+0x254>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1d8>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b12      	cmp	r3, #18
 8001f4a:	d10b      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_ADC_ConfigChannel+0x254>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12b      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_ADC_ConfigChannel+0x258>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x1f4>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d122      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_ADC_ConfigChannel+0x258>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d111      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_ADC_ConfigChannel+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_ADC_ConfigChannel+0x260>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	0c9a      	lsrs	r2, r3, #18
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	10000012 	.word	0x10000012
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff8:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <ADC_Init+0x1f0>)
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	021a      	lsls	r2, r3, #8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <ADC_Init+0x1f4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6899      	ldr	r1, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	e00f      	b.n	80020ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0202 	bic.w	r2, r2, #2
 80020fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7e1b      	ldrb	r3, [r3, #24]
 8002108:	005a      	lsls	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01b      	beq.n	8002154 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800213a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	3b01      	subs	r3, #1
 8002148:	035a      	lsls	r2, r3, #13
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	e007      	b.n	8002164 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002162:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	3b01      	subs	r3, #1
 8002180:	051a      	lsls	r2, r3, #20
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a6:	025a      	lsls	r2, r3, #9
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	029a      	lsls	r2, r3, #10
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40012300 	.word	0x40012300
 80021e4:	0f000001 	.word	0x0f000001

080021e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d13c      	bne.n	800227c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12b      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d127      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800223c:	2b00      	cmp	r3, #0
 800223e:	d119      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0220 	bic.w	r2, r2, #32
 800224e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff fd6b 	bl	8001d50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800227a:	e00e      	b.n	800229a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff fd75 	bl	8001d78 <HAL_ADC_ErrorCallback>
}
 800228e:	e004      	b.n	800229a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff fd57 	bl	8001d64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fd4a 	bl	8001d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0ed      	b.n	80024da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff f9de 	bl	80016cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002320:	f7ff fbb6 	bl	8001a90 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002326:	e012      	b.n	800234e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002328:	f7ff fbb2 	bl	8001a90 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b0a      	cmp	r3, #10
 8002334:	d90b      	bls.n	800234e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2205      	movs	r2, #5
 8002346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0c5      	b.n	80024da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0e5      	beq.n	8002328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0202 	bic.w	r2, r2, #2
 800236a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800236c:	f7ff fb90 	bl	8001a90 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002372:	e012      	b.n	800239a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002374:	f7ff fb8c 	bl	8001a90 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d90b      	bls.n	800239a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2205      	movs	r2, #5
 8002392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e09f      	b.n	80024da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e5      	bne.n	8002374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e1b      	ldrb	r3, [r3, #24]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e007      	b.n	80023d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7e5b      	ldrb	r3, [r3, #25]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e007      	b.n	80023fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e9b      	ldrb	r3, [r3, #26]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0220 	orr.w	r2, r2, #32
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0220 	bic.w	r2, r2, #32
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7edb      	ldrb	r3, [r3, #27]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0210 	bic.w	r2, r2, #16
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0210 	orr.w	r2, r2, #16
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7f1b      	ldrb	r3, [r3, #28]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7f5b      	ldrb	r3, [r3, #29]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0204 	orr.w	r2, r2, #4
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	ea42 0103 	orr.w	r1, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b08a      	sub	sp, #40	; 0x28
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d07c      	beq.n	8002622 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f983 	bl	8002850 <HAL_CAN_TxMailbox0CompleteCallback>
 800254a:	e016      	b.n	800257a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	e00c      	b.n	800257a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e002      	b.n	800257a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f989 	bl	800288c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d024      	beq.n	80025ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f963 	bl	8002864 <HAL_CAN_TxMailbox1CompleteCallback>
 800259e:	e016      	b.n	80025ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	e00c      	b.n	80025ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e002      	b.n	80025ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f969 	bl	80028a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d024      	beq.n	8002622 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f943 	bl	8002878 <HAL_CAN_TxMailbox2CompleteCallback>
 80025f2:	e016      	b.n	8002622 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	e00c      	b.n	8002622 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e002      	b.n	8002622 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f949 	bl	80028b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00b      	beq.n	8002668 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2208      	movs	r2, #8
 8002660:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f93a 	bl	80028dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f921 	bl	80028c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2210      	movs	r2, #16
 80026a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2208      	movs	r2, #8
 80026c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f91c 	bl	8002904 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f903 	bl	80028f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2210      	movs	r2, #16
 8002704:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f906 	bl	8002918 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8ff 	bl	800292c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d07b      	beq.n	8002830 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d072      	beq.n	8002828 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d043      	beq.n	8002828 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03e      	beq.n	8002828 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b0:	2b60      	cmp	r3, #96	; 0x60
 80027b2:	d02b      	beq.n	800280c <HAL_CAN_IRQHandler+0x32a>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d82e      	bhi.n	8002816 <HAL_CAN_IRQHandler+0x334>
 80027b8:	2b50      	cmp	r3, #80	; 0x50
 80027ba:	d022      	beq.n	8002802 <HAL_CAN_IRQHandler+0x320>
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d82a      	bhi.n	8002816 <HAL_CAN_IRQHandler+0x334>
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d019      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x316>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d826      	bhi.n	8002816 <HAL_CAN_IRQHandler+0x334>
 80027c8:	2b30      	cmp	r3, #48	; 0x30
 80027ca:	d010      	beq.n	80027ee <HAL_CAN_IRQHandler+0x30c>
 80027cc:	2b30      	cmp	r3, #48	; 0x30
 80027ce:	d822      	bhi.n	8002816 <HAL_CAN_IRQHandler+0x334>
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d002      	beq.n	80027da <HAL_CAN_IRQHandler+0x2f8>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d005      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027d8:	e01d      	b.n	8002816 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027e2:	e019      	b.n	8002818 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ec:	e014      	b.n	8002818 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f043 0320 	orr.w	r3, r3, #32
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f6:	e00f      	b.n	8002818 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002800:	e00a      	b.n	8002818 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800280a:	e005      	b.n	8002818 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002814:	e000      	b.n	8002818 <HAL_CAN_IRQHandler+0x336>
            break;
 8002816:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002826:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2204      	movs	r2, #4
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f87c 	bl	8002940 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff4c 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad6:	f7ff ff61 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002ada:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7ff ffb1 	bl	8002a48 <NVIC_EncodePriority>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff80 	bl	80029f4 <__NVIC_SetPriority>
}
 8002af4:	bf00      	nop
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff54 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7fe ffb4 	bl	8001a90 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e099      	b.n	8002c68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b54:	e00f      	b.n	8002b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b56:	f7fe ff9b 	bl	8001a90 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d908      	bls.n	8002b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e078      	b.n	8002c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e8      	bne.n	8002b56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <HAL_DMA_Init+0x158>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d117      	bne.n	8002c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa6f 	bl	8003100 <DMA_CheckFifoParam>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c36:	2301      	movs	r3, #1
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa26 	bl	8003094 <DMA_CalcBaseAndBitshift>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	223f      	movs	r2, #63	; 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	f010803f 	.word	0xf010803f

08002c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA_Start_IT+0x26>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e040      	b.n	8002d1c <HAL_DMA_Start_IT+0xa8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d12f      	bne.n	8002d0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f9b8 	bl	8003038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	223f      	movs	r2, #63	; 0x3f
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0216 	orr.w	r2, r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e005      	b.n	8002d1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <HAL_DMA_IRQHandler+0x258>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a92      	ldr	r2, [pc, #584]	; (8002f80 <HAL_DMA_IRQHandler+0x25c>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2204      	movs	r2, #4
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2204      	movs	r2, #4
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2210      	movs	r2, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d043      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2210      	movs	r2, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d024      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e01f      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e016      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0208 	bic.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2220      	movs	r2, #32
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 808e 	beq.w	8002fc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8086 	beq.w	8002fc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2220      	movs	r2, #32
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d136      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0216 	bic.w	r2, r2, #22
 8002edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_DMA_IRQHandler+0x1da>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0208 	bic.w	r2, r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	223f      	movs	r2, #63	; 0x3f
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07d      	beq.n	800302e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
        }
        return;
 8002f3a:	e078      	b.n	800302e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d030      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e02b      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
 8002f7a:	e022      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0210 	bic.w	r2, r2, #16
 8002fa0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d032      	beq.n	8003030 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d307      	bcc.n	800300a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f2      	bne.n	8002fee <HAL_DMA_IRQHandler+0x2ca>
 8003008:	e000      	b.n	800300c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800300a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e000      	b.n	8003030 <HAL_DMA_IRQHandler+0x30c>
        return;
 800302e:	bf00      	nop
    }
  }
}
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop

08003038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d108      	bne.n	8003078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003076:	e007      	b.n	8003088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3b10      	subs	r3, #16
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <DMA_CalcBaseAndBitshift+0x64>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <DMA_CalcBaseAndBitshift+0x68>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d909      	bls.n	80030d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
 80030d4:	e007      	b.n	80030e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	aaaaaaab 	.word	0xaaaaaaab
 80030fc:	08006c38 	.word	0x08006c38

08003100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11f      	bne.n	800315a <DMA_CheckFifoParam+0x5a>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d856      	bhi.n	80031ce <DMA_CheckFifoParam+0xce>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <DMA_CheckFifoParam+0x28>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	08003139 	.word	0x08003139
 800312c:	0800314b 	.word	0x0800314b
 8003130:	08003139 	.word	0x08003139
 8003134:	080031cf 	.word	0x080031cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d046      	beq.n	80031d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003148:	e043      	b.n	80031d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003152:	d140      	bne.n	80031d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003158:	e03d      	b.n	80031d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003162:	d121      	bne.n	80031a8 <DMA_CheckFifoParam+0xa8>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d837      	bhi.n	80031da <DMA_CheckFifoParam+0xda>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <DMA_CheckFifoParam+0x70>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	08003187 	.word	0x08003187
 8003178:	08003181 	.word	0x08003181
 800317c:	08003199 	.word	0x08003199
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e030      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d025      	beq.n	80031de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003196:	e022      	b.n	80031de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a0:	d11f      	bne.n	80031e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031a6:	e01c      	b.n	80031e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d903      	bls.n	80031b6 <DMA_CheckFifoParam+0xb6>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d003      	beq.n	80031bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b4:	e018      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      break;
 80031ba:	e015      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e00b      	b.n	80031e6 <DMA_CheckFifoParam+0xe6>
      break;
 80031ce:	bf00      	nop
 80031d0:	e00a      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e008      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e006      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e004      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
 80031e0:	e002      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80031e2:	bf00      	nop
 80031e4:	e000      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031e6:	bf00      	nop
    }
  } 
  
  return status; 
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e165      	b.n	80034e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 8154 	bne.w	80034da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d005      	beq.n	800324a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	2b02      	cmp	r3, #2
 8003248:	d130      	bne.n	80032ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d017      	beq.n	80032e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80ae 	beq.w	80034da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b5d      	ldr	r3, [pc, #372]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a5c      	ldr	r2, [pc, #368]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_GPIO_Init+0x304>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4f      	ldr	r2, [pc, #316]	; (8003500 <HAL_GPIO_Init+0x308>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x21a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4e      	ldr	r2, [pc, #312]	; (8003504 <HAL_GPIO_Init+0x30c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x216>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <HAL_GPIO_Init+0x310>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x212>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4c      	ldr	r2, [pc, #304]	; (800350c <HAL_GPIO_Init+0x314>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x20e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <HAL_GPIO_Init+0x318>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x20a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4a      	ldr	r2, [pc, #296]	; (8003514 <HAL_GPIO_Init+0x31c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x206>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_GPIO_Init+0x320>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x202>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e00c      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00a      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 80033fe:	2305      	movs	r3, #5
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 8003402:	2304      	movs	r3, #4
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x21c>
 8003412:	2300      	movs	r3, #0
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003424:	4935      	ldr	r1, [pc, #212]	; (80034fc <HAL_GPIO_Init+0x304>)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003432:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_GPIO_Init+0x324>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003456:	4a31      	ldr	r2, [pc, #196]	; (800351c <HAL_GPIO_Init+0x324>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800345c:	4b2f      	ldr	r3, [pc, #188]	; (800351c <HAL_GPIO_Init+0x324>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003480:	4a26      	ldr	r2, [pc, #152]	; (800351c <HAL_GPIO_Init+0x324>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_GPIO_Init+0x324>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <HAL_GPIO_Init+0x324>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_GPIO_Init+0x324>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_GPIO_Init+0x324>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	f67f ae96 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40013800 	.word	0x40013800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40021400 	.word	0x40021400
 8003518:	40021800 	.word	0x40021800
 800351c:	40013c00 	.word	0x40013c00

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003564:	887a      	ldrh	r2, [r7, #2]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43d9      	mvns	r1, r3
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	400b      	ands	r3, r1
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_PWREx_EnableOverDrive+0x90>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_PWREx_EnableOverDrive+0x90>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_PWREx_EnableOverDrive+0x90>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_PWREx_EnableOverDrive+0x94>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b4:	f7fe fa6c 	bl	8001a90 <HAL_GetTick>
 80035b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ba:	e009      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035bc:	f7fe fa68 	bl	8001a90 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ca:	d901      	bls.n	80035d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e01f      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_PWREx_EnableOverDrive+0x98>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d1ee      	bne.n	80035bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e4:	f7fe fa54 	bl	8001a90 <HAL_GetTick>
 80035e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ea:	e009      	b.n	8003600 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ec:	f7fe fa50 	bl	8001a90 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fa:	d901      	bls.n	8003600 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e007      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_PWREx_EnableOverDrive+0x98>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800360c:	d1ee      	bne.n	80035ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	420e0040 	.word	0x420e0040
 8003620:	40007000 	.word	0x40007000
 8003624:	420e0044 	.word	0x420e0044

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d90c      	bls.n	8003664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d044      	beq.n	8003748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e067      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4934      	ldr	r1, [pc, #208]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003718:	f7fe f9ba 	bl	8001a90 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fe f9b6 	bl	8001a90 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d20c      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f887 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe f814 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08006c20 	.word	0x08006c20
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff0 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0a9b      	lsrs	r3, r3, #10
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	08006c30 	.word	0x08006c30

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003838:	f7ff ffdc 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0b5b      	lsrs	r3, r3, #13
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	08006c30 	.word	0x08006c30

0800385c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	220f      	movs	r2, #15
 800386a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <HAL_RCC_GetClockConfig+0x60>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40023c00 	.word	0x40023c00

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b088      	sub	sp, #32
 80038c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038dc:	4bce      	ldr	r3, [pc, #824]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	f200 818d 	bhi.w	8003c04 <HAL_RCC_GetSysClockFreq+0x344>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <HAL_RCC_GetSysClockFreq+0x30>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003925 	.word	0x08003925
 80038f4:	08003c05 	.word	0x08003c05
 80038f8:	08003c05 	.word	0x08003c05
 80038fc:	08003c05 	.word	0x08003c05
 8003900:	0800392b 	.word	0x0800392b
 8003904:	08003c05 	.word	0x08003c05
 8003908:	08003c05 	.word	0x08003c05
 800390c:	08003c05 	.word	0x08003c05
 8003910:	08003931 	.word	0x08003931
 8003914:	08003c05 	.word	0x08003c05
 8003918:	08003c05 	.word	0x08003c05
 800391c:	08003c05 	.word	0x08003c05
 8003920:	08003aa5 	.word	0x08003aa5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4bbd      	ldr	r3, [pc, #756]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003926:	61bb      	str	r3, [r7, #24]
       break;
 8003928:	e16f      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392a:	4bbd      	ldr	r3, [pc, #756]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x360>)
 800392c:	61bb      	str	r3, [r7, #24]
      break;
 800392e:	e16c      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4bb9      	ldr	r3, [pc, #740]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393a:	4bb7      	ldr	r3, [pc, #732]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d053      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4bb4      	ldr	r3, [pc, #720]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	461a      	mov	r2, r3
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	ea02 0400 	and.w	r4, r2, r0
 800395e:	603c      	str	r4, [r7, #0]
 8003960:	400b      	ands	r3, r1
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003968:	4620      	mov	r0, r4
 800396a:	4629      	mov	r1, r5
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	014b      	lsls	r3, r1, #5
 8003976:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800397a:	0142      	lsls	r2, r0, #5
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	4623      	mov	r3, r4
 8003982:	1ac0      	subs	r0, r0, r3
 8003984:	462b      	mov	r3, r5
 8003986:	eb61 0103 	sbc.w	r1, r1, r3
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	018b      	lsls	r3, r1, #6
 8003994:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003998:	0182      	lsls	r2, r0, #6
 800399a:	1a12      	subs	r2, r2, r0
 800399c:	eb63 0301 	sbc.w	r3, r3, r1
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	00d9      	lsls	r1, r3, #3
 80039aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ae:	00d0      	lsls	r0, r2, #3
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4621      	mov	r1, r4
 80039b6:	1852      	adds	r2, r2, r1
 80039b8:	4629      	mov	r1, r5
 80039ba:	eb43 0101 	adc.w	r1, r3, r1
 80039be:	460b      	mov	r3, r1
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	0259      	lsls	r1, r3, #9
 80039ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039ce:	0250      	lsls	r0, r2, #9
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	461a      	mov	r2, r3
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	f7fc ff74 	bl	80008cc <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	e04c      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ee:	4b8a      	ldr	r3, [pc, #552]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	461a      	mov	r2, r3
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	ea02 0a00 	and.w	sl, r2, r0
 8003a06:	ea03 0b01 	and.w	fp, r3, r1
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	014b      	lsls	r3, r1, #5
 8003a18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a1c:	0142      	lsls	r2, r0, #5
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	ebb0 000a 	subs.w	r0, r0, sl
 8003a26:	eb61 010b 	sbc.w	r1, r1, fp
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	018b      	lsls	r3, r1, #6
 8003a34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a38:	0182      	lsls	r2, r0, #6
 8003a3a:	1a12      	subs	r2, r2, r0
 8003a3c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a40:	f04f 0000 	mov.w	r0, #0
 8003a44:	f04f 0100 	mov.w	r1, #0
 8003a48:	00d9      	lsls	r1, r3, #3
 8003a4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a4e:	00d0      	lsls	r0, r2, #3
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	eb12 020a 	adds.w	r2, r2, sl
 8003a58:	eb43 030b 	adc.w	r3, r3, fp
 8003a5c:	f04f 0000 	mov.w	r0, #0
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	0299      	lsls	r1, r3, #10
 8003a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a6a:	0290      	lsls	r0, r2, #10
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	f7fc ff26 	bl	80008cc <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a88:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	61bb      	str	r3, [r7, #24]
      break;
 8003aa2:	e0b2      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b5a      	ldr	r3, [pc, #360]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04d      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	ea02 0800 	and.w	r8, r2, r0
 8003ad2:	ea03 0901 	and.w	r9, r3, r1
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	4649      	mov	r1, r9
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	014b      	lsls	r3, r1, #5
 8003ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ae8:	0142      	lsls	r2, r0, #5
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	ebb0 0008 	subs.w	r0, r0, r8
 8003af2:	eb61 0109 	sbc.w	r1, r1, r9
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	018b      	lsls	r3, r1, #6
 8003b00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b04:	0182      	lsls	r2, r0, #6
 8003b06:	1a12      	subs	r2, r2, r0
 8003b08:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	00d9      	lsls	r1, r3, #3
 8003b16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b1a:	00d0      	lsls	r0, r2, #3
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	eb12 0208 	adds.w	r2, r2, r8
 8003b24:	eb43 0309 	adc.w	r3, r3, r9
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	0259      	lsls	r1, r3, #9
 8003b32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b36:	0250      	lsls	r0, r2, #9
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7fc fec0 	bl	80008cc <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e04a      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	ea02 0400 	and.w	r4, r2, r0
 8003b6e:	ea03 0501 	and.w	r5, r3, r1
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	014b      	lsls	r3, r1, #5
 8003b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b84:	0142      	lsls	r2, r0, #5
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	1b00      	subs	r0, r0, r4
 8003b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	018b      	lsls	r3, r1, #6
 8003b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b9e:	0182      	lsls	r2, r0, #6
 8003ba0:	1a12      	subs	r2, r2, r0
 8003ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	00d9      	lsls	r1, r3, #3
 8003bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb4:	00d0      	lsls	r0, r2, #3
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	1912      	adds	r2, r2, r4
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0299      	lsls	r1, r3, #10
 8003bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bce:	0290      	lsls	r0, r2, #10
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f7fc fe74 	bl	80008cc <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0f1b      	lsrs	r3, r3, #28
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	61bb      	str	r3, [r7, #24]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c06:	61bb      	str	r3, [r7, #24]
      break;
 8003c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	007a1200 	.word	0x007a1200

08003c24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e28d      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8083 	beq.w	8003d4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c44:	4b94      	ldr	r3, [pc, #592]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c50:	4b91      	ldr	r3, [pc, #580]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b84      	ldr	r3, [pc, #528]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x124>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e25a      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x90>
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xcc>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xb4>
 8003cbe:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a72      	ldr	r2, [pc, #456]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xcc>
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd feca 	bl	8001a90 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd fec6 	bl	8001a90 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e21f      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xdc>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd feb6 	bl	8001a90 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fd feb2 	bl	8001a90 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e20b      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x104>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d06f      	beq.n	8003e36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d56:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d62:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d11c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d86:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_RCC_OscConfig+0x186>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1d3      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4937      	ldr	r1, [pc, #220]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	e03a      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x278>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fd fe5f 	bl	8001a90 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7fd fe5b 	bl	8001a90 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1b4      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4925      	ldr	r1, [pc, #148]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
 8003e08:	e015      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_OscConfig+0x278>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd fe3e 	bl	8001a90 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fd fe3a 	bl	8001a90 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e193      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d036      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fe1e 	bl	8001a90 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fd fe1a 	bl	8001a90 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e173      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x234>
 8003e76:	e01b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e78:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fe07 	bl	8001a90 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e00e      	b.n	8003ea4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fd fe03 	bl	8001a90 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d907      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e15c      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	42470000 	.word	0x42470000
 8003ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea4:	4b8a      	ldr	r3, [pc, #552]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ea      	bne.n	8003e86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8097 	beq.w	8003fec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b83      	ldr	r3, [pc, #524]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a7e      	ldr	r2, [pc, #504]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b7c      	ldr	r3, [pc, #496]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b79      	ldr	r3, [pc, #484]	; (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a75      	ldr	r2, [pc, #468]	; (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fd fdc3 	bl	8001a90 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fd fdbf 	bl	8001a90 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e118      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x31e>
 8003f34:	4b66      	ldr	r3, [pc, #408]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a65      	ldr	r2, [pc, #404]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f40:	e01c      	b.n	8003f7c <HAL_RCC_OscConfig+0x358>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x340>
 8003f4a:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a60      	ldr	r2, [pc, #384]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	f043 0304 	orr.w	r3, r3, #4
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	4b5e      	ldr	r3, [pc, #376]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a5d      	ldr	r2, [pc, #372]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0x358>
 8003f64:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a59      	ldr	r2, [pc, #356]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	4b57      	ldr	r3, [pc, #348]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f76:	f023 0304 	bic.w	r3, r3, #4
 8003f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d015      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fd84 	bl	8001a90 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fd fd80 	bl	8001a90 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0d7      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0ee      	beq.n	8003f8c <HAL_RCC_OscConfig+0x368>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fd6e 	bl	8001a90 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fd6a 	bl	8001a90 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0c1      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fce:	4b40      	ldr	r3, [pc, #256]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ee      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe0:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80ad 	beq.w	8004150 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d060      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d145      	bne.n	8004096 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_RCC_OscConfig+0x4b4>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd fd3e 	bl	8001a90 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004018:	f7fd fd3a 	bl	8001a90 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e093      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	019b      	lsls	r3, r3, #6
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	491b      	ldr	r1, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <HAL_RCC_OscConfig+0x4b4>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd fd0f 	bl	8001a90 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004076:	f7fd fd0b 	bl	8001a90 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e064      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x452>
 8004094:	e05c      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_RCC_OscConfig+0x4b4>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fcf8 	bl	8001a90 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fd fcf4 	bl	8001a90 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e04d      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x480>
 80040c2:	e045      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e040      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40007000 	.word	0x40007000
 80040d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <HAL_RCC_OscConfig+0x538>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d030      	beq.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d129      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d122      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004114:	4293      	cmp	r3, r2
 8004116:	d119      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	3b01      	subs	r3, #1
 8004126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d10f      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e041      	b.n	80041f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f839 	bl	80041fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 f9d8 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d001      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e04e      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d01d      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <HAL_TIM_Base_Start_IT+0xc8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40001800 	.word	0x40001800

080042f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0202 	mvn.w	r2, #2
 8004320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8ee 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8e0 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8f1 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0204 	mvn.w	r2, #4
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8c4 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8b6 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8c7 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0208 	mvn.w	r2, #8
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f89a 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f88c 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f89d 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b10      	cmp	r3, #16
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0210 	mvn.w	r2, #16
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2208      	movs	r2, #8
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f870 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f862 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f873 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0201 	mvn.w	r2, #1
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc ff88 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f902 	bl	80046a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f838 	bl	8004540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0220 	mvn.w	r2, #32
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8cc 	bl	8004694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a40      	ldr	r2, [pc, #256]	; (8004668 <TIM_Base_SetConfig+0x114>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d00f      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3d      	ldr	r2, [pc, #244]	; (800466c <TIM_Base_SetConfig+0x118>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <TIM_Base_SetConfig+0x11c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <TIM_Base_SetConfig+0x120>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3a      	ldr	r2, [pc, #232]	; (8004678 <TIM_Base_SetConfig+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <TIM_Base_SetConfig+0x114>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02b      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b4:	d027      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	; (800466c <TIM_Base_SetConfig+0x118>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d023      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <TIM_Base_SetConfig+0x11c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01f      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <TIM_Base_SetConfig+0x120>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01b      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a29      	ldr	r2, [pc, #164]	; (8004678 <TIM_Base_SetConfig+0x124>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d017      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <TIM_Base_SetConfig+0x128>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a27      	ldr	r2, [pc, #156]	; (8004680 <TIM_Base_SetConfig+0x12c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00f      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <TIM_Base_SetConfig+0x130>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <TIM_Base_SetConfig+0x134>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a24      	ldr	r2, [pc, #144]	; (800468c <TIM_Base_SetConfig+0x138>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a23      	ldr	r2, [pc, #140]	; (8004690 <TIM_Base_SetConfig+0x13c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d108      	bne.n	8004618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <TIM_Base_SetConfig+0x114>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0xf8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <TIM_Base_SetConfig+0x124>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40010400 	.word	0x40010400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800
 8004688:	40001800 	.word	0x40001800
 800468c:	40001c00 	.word	0x40001c00
 8004690:	40002000 	.word	0x40002000

08004694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e03f      	b.n	800474e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd f842 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2224      	movs	r2, #36	; 0x24
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f929 	bl	8004958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b08a      	sub	sp, #40	; 0x28
 800475a:	af02      	add	r7, sp, #8
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	d17c      	bne.n	8004870 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_Transmit+0x2c>
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e075      	b.n	8004872 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UART_Transmit+0x3e>
 8004790:	2302      	movs	r3, #2
 8004792:	e06e      	b.n	8004872 <HAL_UART_Transmit+0x11c>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2221      	movs	r2, #33	; 0x21
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047aa:	f7fd f971 	bl	8001a90 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d108      	bne.n	80047d8 <HAL_UART_Transmit+0x82>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	e003      	b.n	80047e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047e8:	e02a      	b.n	8004840 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2200      	movs	r2, #0
 80047f2:	2180      	movs	r1, #128	; 0x80
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f840 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e036      	b.n	8004872 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10b      	bne.n	8004822 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004818:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3302      	adds	r3, #2
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e007      	b.n	8004832 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	3301      	adds	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1cf      	bne.n	80047ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f810 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e006      	b.n	8004872 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b090      	sub	sp, #64	; 0x40
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	e050      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d04c      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <UART_WaitOnFlagUntilTimeout+0x30>
 800489a:	f7fd f8f9 	bl	8001a90 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d241      	bcs.n	800492e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ca:	637a      	str	r2, [r7, #52]	; 0x34
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	613b      	str	r3, [r7, #16]
   return(result);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fe:	623a      	str	r2, [r7, #32]
 8004900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	69f9      	ldr	r1, [r7, #28]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	61bb      	str	r3, [r7, #24]
   return(result);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00f      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	429a      	cmp	r2, r3
 800494a:	d09f      	beq.n	800488c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3740      	adds	r7, #64	; 0x40
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	b09f      	sub	sp, #124	; 0x7c
 800495e:	af00      	add	r7, sp, #0
 8004960:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	ea40 0301 	orr.w	r3, r0, r1
 8004978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	431a      	orrs	r2, r3
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	431a      	orrs	r2, r3
 800498a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4313      	orrs	r3, r2
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800499c:	f021 010c 	bic.w	r1, r1, #12
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a6:	430b      	orrs	r3, r1
 80049a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	6999      	ldr	r1, [r3, #24]
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	ea40 0301 	orr.w	r3, r0, r1
 80049c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4bc5      	ldr	r3, [pc, #788]	; (8004cdc <UART_SetConfig+0x384>)
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d004      	beq.n	80049d6 <UART_SetConfig+0x7e>
 80049cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4bc3      	ldr	r3, [pc, #780]	; (8004ce0 <UART_SetConfig+0x388>)
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d103      	bne.n	80049de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d6:	f7fe ff2d 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 80049da:	6778      	str	r0, [r7, #116]	; 0x74
 80049dc:	e002      	b.n	80049e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7fe ff15 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 80049e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ec:	f040 80b6 	bne.w	8004b5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f2:	461c      	mov	r4, r3
 80049f4:	f04f 0500 	mov.w	r5, #0
 80049f8:	4622      	mov	r2, r4
 80049fa:	462b      	mov	r3, r5
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004a00:	415b      	adcs	r3, r3
 8004a02:	647b      	str	r3, [r7, #68]	; 0x44
 8004a04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a08:	1912      	adds	r2, r2, r4
 8004a0a:	eb45 0303 	adc.w	r3, r5, r3
 8004a0e:	f04f 0000 	mov.w	r0, #0
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	00d9      	lsls	r1, r3, #3
 8004a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a1c:	00d0      	lsls	r0, r2, #3
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	1911      	adds	r1, r2, r4
 8004a24:	6639      	str	r1, [r7, #96]	; 0x60
 8004a26:	416b      	adcs	r3, r5
 8004a28:	667b      	str	r3, [r7, #100]	; 0x64
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	1891      	adds	r1, r2, r2
 8004a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a44:	f7fb ff42 	bl	80008cc <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4ba5      	ldr	r3, [pc, #660]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011e      	lsls	r6, r3, #4
 8004a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a58:	461c      	mov	r4, r3
 8004a5a:	f04f 0500 	mov.w	r5, #0
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	6339      	str	r1, [r7, #48]	; 0x30
 8004a66:	415b      	adcs	r3, r3
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a6e:	1912      	adds	r2, r2, r4
 8004a70:	eb45 0303 	adc.w	r3, r5, r3
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	00d9      	lsls	r1, r3, #3
 8004a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a82:	00d0      	lsls	r0, r2, #3
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	1911      	adds	r1, r2, r4
 8004a8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a8c:	416b      	adcs	r3, r5
 8004a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aa6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004aaa:	f7fb ff0f 	bl	80008cc <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4b8c      	ldr	r3, [pc, #560]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	2164      	movs	r1, #100	; 0x64
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	3332      	adds	r3, #50	; 0x32
 8004ac6:	4a87      	ldr	r2, [pc, #540]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad4:	441e      	add	r6, r3
 8004ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	1894      	adds	r4, r2, r2
 8004ae4:	623c      	str	r4, [r7, #32]
 8004ae6:	415b      	adcs	r3, r3
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aee:	1812      	adds	r2, r2, r0
 8004af0:	eb41 0303 	adc.w	r3, r1, r3
 8004af4:	f04f 0400 	mov.w	r4, #0
 8004af8:	f04f 0500 	mov.w	r5, #0
 8004afc:	00dd      	lsls	r5, r3, #3
 8004afe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b02:	00d4      	lsls	r4, r2, #3
 8004b04:	4622      	mov	r2, r4
 8004b06:	462b      	mov	r3, r5
 8004b08:	1814      	adds	r4, r2, r0
 8004b0a:	653c      	str	r4, [r7, #80]	; 0x50
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	461a      	mov	r2, r3
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	1891      	adds	r1, r2, r2
 8004b1c:	61b9      	str	r1, [r7, #24]
 8004b1e:	415b      	adcs	r3, r3
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b2a:	f7fb fecf 	bl	80008cc <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b6c      	ldr	r3, [pc, #432]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a67      	ldr	r2, [pc, #412]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4432      	add	r2, r6
 8004b58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b5a:	e0b9      	b.n	8004cd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5e:	461c      	mov	r4, r3
 8004b60:	f04f 0500 	mov.w	r5, #0
 8004b64:	4622      	mov	r2, r4
 8004b66:	462b      	mov	r3, r5
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	6139      	str	r1, [r7, #16]
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b74:	1912      	adds	r2, r2, r4
 8004b76:	eb45 0303 	adc.w	r3, r5, r3
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b88:	00d0      	lsls	r0, r2, #3
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	eb12 0804 	adds.w	r8, r2, r4
 8004b92:	eb43 0905 	adc.w	r9, r3, r5
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	008b      	lsls	r3, r1, #2
 8004baa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bae:	0082      	lsls	r2, r0, #2
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fb fe8a 	bl	80008cc <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	011e      	lsls	r6, r3, #4
 8004bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	1894      	adds	r4, r2, r2
 8004bd4:	60bc      	str	r4, [r7, #8]
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bde:	1812      	adds	r2, r2, r0
 8004be0:	eb41 0303 	adc.w	r3, r1, r3
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	f04f 0500 	mov.w	r5, #0
 8004bec:	00dd      	lsls	r5, r3, #3
 8004bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bf2:	00d4      	lsls	r4, r2, #3
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	1814      	adds	r4, r2, r0
 8004bfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	008b      	lsls	r3, r1, #2
 8004c14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c18:	0082      	lsls	r2, r0, #2
 8004c1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c1e:	f7fb fe55 	bl	80008cc <__aeabi_uldivmod>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004c28:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2164      	movs	r1, #100	; 0x64
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c46:	441e      	add	r6, r3
 8004c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	1894      	adds	r4, r2, r2
 8004c56:	603c      	str	r4, [r7, #0]
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	1812      	adds	r2, r2, r0
 8004c62:	eb41 0303 	adc.w	r3, r1, r3
 8004c66:	f04f 0400 	mov.w	r4, #0
 8004c6a:	f04f 0500 	mov.w	r5, #0
 8004c6e:	00dd      	lsls	r5, r3, #3
 8004c70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c74:	00d4      	lsls	r4, r2, #3
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb12 0a00 	adds.w	sl, r2, r0
 8004c7e:	eb43 0b01 	adc.w	fp, r3, r1
 8004c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	008b      	lsls	r3, r1, #2
 8004c96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c9a:	0082      	lsls	r2, r0, #2
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	f7fb fe14 	bl	80008cc <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004caa:	fba3 1302 	umull	r1, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2164      	movs	r1, #100	; 0x64
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	3332      	adds	r3, #50	; 0x32
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <UART_SetConfig+0x38c>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4432      	add	r2, r6
 8004cce:	609a      	str	r2, [r3, #8]
}
 8004cd0:	bf00      	nop
 8004cd2:	377c      	adds	r7, #124	; 0x7c
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	bf00      	nop
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	40011400 	.word	0x40011400
 8004ce4:	51eb851f 	.word	0x51eb851f

08004ce8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cfa:	2b84      	cmp	r3, #132	; 0x84
 8004cfc:	d005      	beq.n	8004d0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004cfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	3303      	adds	r3, #3
 8004d08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d1c:	f000 faf6 	bl	800530c <vTaskStartScheduler>
  
  return osOK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d28:	b089      	sub	sp, #36	; 0x24
 8004d2a:	af04      	add	r7, sp, #16
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <osThreadCreate+0x54>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01c      	beq.n	8004d7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685c      	ldr	r4, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681d      	ldr	r5, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691e      	ldr	r6, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff ffc8 	bl	8004ce8 <makeFreeRtosPriority>
 8004d58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d62:	9202      	str	r2, [sp, #8]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	9100      	str	r1, [sp, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f000 f8ed 	bl	8004f4e <xTaskCreateStatic>
 8004d74:	4603      	mov	r3, r0
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e01c      	b.n	8004db4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685c      	ldr	r4, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d86:	b29e      	uxth	r6, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ffaa 	bl	8004ce8 <makeFreeRtosPriority>
 8004d94:	4602      	mov	r2, r0
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	9200      	str	r2, [sp, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4632      	mov	r2, r6
 8004da2:	4629      	mov	r1, r5
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 f92f 	bl	8005008 <xTaskCreate>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d001      	beq.n	8004db4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e000      	b.n	8004db6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004db4:	68fb      	ldr	r3, [r7, #12]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <osDelay+0x16>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	e000      	b.n	8004dd6 <osDelay+0x18>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fa64 	bl	80052a4 <vTaskDelay>
  
  return osOK;
 8004ddc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f103 0208 	add.w	r2, r3, #8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f103 0208 	add.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f103 0208 	add.w	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d103      	bne.n	8004ea8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e00c      	b.n	8004ec2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e002      	b.n	8004eb6 <vListInsert+0x2e>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d2f6      	bcs.n	8004eb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6892      	ldr	r2, [r2, #8]
 8004f10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6852      	ldr	r2, [r2, #4]
 8004f1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d103      	bne.n	8004f2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	1e5a      	subs	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08e      	sub	sp, #56	; 0x38
 8004f52:	af04      	add	r7, sp, #16
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
 8004f5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	61fb      	str	r3, [r7, #28]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f94:	23b4      	movs	r3, #180	; 0xb4
 8004f96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2bb4      	cmp	r3, #180	; 0xb4
 8004f9c:	d00a      	beq.n	8004fb4 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	61bb      	str	r3, [r7, #24]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01e      	beq.n	8004ffa <xTaskCreateStatic+0xac>
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01b      	beq.n	8004ffa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9303      	str	r3, [sp, #12]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	9302      	str	r3, [sp, #8]
 8004fdc:	f107 0314 	add.w	r3, r7, #20
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f851 	bl	8005094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ff4:	f000 f8ec 	bl	80051d0 <prvAddNewTaskToReadyList>
 8004ff8:	e001      	b.n	8004ffe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ffe:	697b      	ldr	r3, [r7, #20]
	}
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af04      	add	r7, sp, #16
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fef3 	bl	8005e08 <pvPortMalloc>
 8005022:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800502a:	20b4      	movs	r0, #180	; 0xb4
 800502c:	f000 feec 	bl	8005e08 <pvPortMalloc>
 8005030:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
 800503e:	e005      	b.n	800504c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f000 ffad 	bl	8005fa0 <vPortFree>
 8005046:	e001      	b.n	800504c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d017      	beq.n	8005082 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	2300      	movs	r3, #0
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	9302      	str	r3, [sp, #8]
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f80f 	bl	8005094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005076:	69f8      	ldr	r0, [r7, #28]
 8005078:	f000 f8aa 	bl	80051d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800507c:	2301      	movs	r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e002      	b.n	8005088 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005082:	f04f 33ff 	mov.w	r3, #4294967295
 8005086:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005088:	69bb      	ldr	r3, [r7, #24]
	}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050ac:	3b01      	subs	r3, #1
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f023 0307 	bic.w	r3, r3, #7
 80050ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	617b      	str	r3, [r7, #20]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01f      	beq.n	8005122 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e012      	b.n	800510e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	7819      	ldrb	r1, [r3, #0]
 80050f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	3334      	adds	r3, #52	; 0x34
 80050f8:	460a      	mov	r2, r1
 80050fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d006      	beq.n	8005116 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d9e9      	bls.n	80050e8 <prvInitialiseNewTask+0x54>
 8005114:	e000      	b.n	8005118 <prvInitialiseNewTask+0x84>
			{
				break;
 8005116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005120:	e003      	b.n	800512a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	2b06      	cmp	r3, #6
 800512e:	d901      	bls.n	8005134 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005130:	2306      	movs	r3, #6
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	3304      	adds	r3, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fe6b 	bl	8004e26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	3318      	adds	r3, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fe66 	bl	8004e26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	f1c3 0207 	rsb	r2, r3, #7
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	2200      	movs	r2, #0
 800517c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	334c      	adds	r3, #76	; 0x4c
 8005184:	2260      	movs	r2, #96	; 0x60
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f861 	bl	8006250 <memset>
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <prvInitialiseNewTask+0x130>)
 8005192:	651a      	str	r2, [r3, #80]	; 0x50
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	4a0c      	ldr	r2, [pc, #48]	; (80051c8 <prvInitialiseNewTask+0x134>)
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	4a0b      	ldr	r2, [pc, #44]	; (80051cc <prvInitialiseNewTask+0x138>)
 800519e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	69b8      	ldr	r0, [r7, #24]
 80051a6:	f000 fc1f 	bl	80059e8 <pxPortInitialiseStack>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051bc:	bf00      	nop
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	08006c60 	.word	0x08006c60
 80051c8:	08006c80 	.word	0x08006c80
 80051cc:	08006c40 	.word	0x08006c40

080051d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051d8:	f000 fd34 	bl	8005c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <prvAddNewTaskToReadyList+0xb8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	4a29      	ldr	r2, [pc, #164]	; (8005288 <prvAddNewTaskToReadyList+0xb8>)
 80051e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <prvAddNewTaskToReadyList+0xbc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051ee:	4a27      	ldr	r2, [pc, #156]	; (800528c <prvAddNewTaskToReadyList+0xbc>)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051f4:	4b24      	ldr	r3, [pc, #144]	; (8005288 <prvAddNewTaskToReadyList+0xb8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d110      	bne.n	800521e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051fc:	f000 facc 	bl	8005798 <prvInitialiseTaskLists>
 8005200:	e00d      	b.n	800521e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <prvAddNewTaskToReadyList+0xc0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <prvAddNewTaskToReadyList+0xbc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d802      	bhi.n	800521e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005218:	4a1c      	ldr	r2, [pc, #112]	; (800528c <prvAddNewTaskToReadyList+0xbc>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <prvAddNewTaskToReadyList+0xc4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <prvAddNewTaskToReadyList+0xc4>)
 8005226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	2201      	movs	r2, #1
 800522e:	409a      	lsls	r2, r3
 8005230:	4b19      	ldr	r3, [pc, #100]	; (8005298 <prvAddNewTaskToReadyList+0xc8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4313      	orrs	r3, r2
 8005236:	4a18      	ldr	r2, [pc, #96]	; (8005298 <prvAddNewTaskToReadyList+0xc8>)
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <prvAddNewTaskToReadyList+0xcc>)
 8005248:	441a      	add	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7ff fdf5 	bl	8004e40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005256:	f000 fd25 	bl	8005ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <prvAddNewTaskToReadyList+0xc0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00e      	beq.n	8005280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <prvAddNewTaskToReadyList+0xbc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	429a      	cmp	r2, r3
 800526e:	d207      	bcs.n	8005280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <prvAddNewTaskToReadyList+0xd0>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000044c 	.word	0x2000044c
 800528c:	2000034c 	.word	0x2000034c
 8005290:	20000458 	.word	0x20000458
 8005294:	20000468 	.word	0x20000468
 8005298:	20000454 	.word	0x20000454
 800529c:	20000350 	.word	0x20000350
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d017      	beq.n	80052e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052b6:	4b13      	ldr	r3, [pc, #76]	; (8005304 <vTaskDelay+0x60>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <vTaskDelay+0x30>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60bb      	str	r3, [r7, #8]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052d4:	f000 f884 	bl	80053e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052d8:	2100      	movs	r1, #0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fb1e 	bl	800591c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052e0:	f000 f88c 	bl	80053fc <xTaskResumeAll>
 80052e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <vTaskDelay+0x64>)
 80052ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000474 	.word	0x20000474
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800531a:	463a      	mov	r2, r7
 800531c:	1d39      	adds	r1, r7, #4
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb fc4e 	bl	8000bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	9202      	str	r2, [sp, #8]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2300      	movs	r3, #0
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	460a      	mov	r2, r1
 800533a:	4921      	ldr	r1, [pc, #132]	; (80053c0 <vTaskStartScheduler+0xb4>)
 800533c:	4821      	ldr	r0, [pc, #132]	; (80053c4 <vTaskStartScheduler+0xb8>)
 800533e:	f7ff fe06 	bl	8004f4e <xTaskCreateStatic>
 8005342:	4603      	mov	r3, r0
 8005344:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <vTaskStartScheduler+0xbc>)
 8005346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005348:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <vTaskStartScheduler+0xbc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005350:	2301      	movs	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e001      	b.n	800535a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d11b      	bne.n	8005398 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005374:	4b15      	ldr	r3, [pc, #84]	; (80053cc <vTaskStartScheduler+0xc0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	334c      	adds	r3, #76	; 0x4c
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <vTaskStartScheduler+0xc4>)
 800537c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800537e:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <vTaskStartScheduler+0xc8>)
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vTaskStartScheduler+0xcc>)
 8005388:	2201      	movs	r2, #1
 800538a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800538c:	4b13      	ldr	r3, [pc, #76]	; (80053dc <vTaskStartScheduler+0xd0>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005392:	f000 fbb5 	bl	8005b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005396:	e00e      	b.n	80053b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d10a      	bne.n	80053b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <vTaskStartScheduler+0xa8>
}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	08006c18 	.word	0x08006c18
 80053c4:	08005769 	.word	0x08005769
 80053c8:	20000470 	.word	0x20000470
 80053cc:	2000034c 	.word	0x2000034c
 80053d0:	20000010 	.word	0x20000010
 80053d4:	2000046c 	.word	0x2000046c
 80053d8:	20000458 	.word	0x20000458
 80053dc:	20000450 	.word	0x20000450

080053e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053e4:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <vTaskSuspendAll+0x18>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	4a03      	ldr	r2, [pc, #12]	; (80053f8 <vTaskSuspendAll+0x18>)
 80053ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	20000474 	.word	0x20000474

080053fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800540a:	4b41      	ldr	r3, [pc, #260]	; (8005510 <xTaskResumeAll+0x114>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <xTaskResumeAll+0x2c>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	603b      	str	r3, [r7, #0]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005428:	f000 fc0c 	bl	8005c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800542c:	4b38      	ldr	r3, [pc, #224]	; (8005510 <xTaskResumeAll+0x114>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	4a37      	ldr	r2, [pc, #220]	; (8005510 <xTaskResumeAll+0x114>)
 8005434:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <xTaskResumeAll+0x114>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d161      	bne.n	8005502 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800543e:	4b35      	ldr	r3, [pc, #212]	; (8005514 <xTaskResumeAll+0x118>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d05d      	beq.n	8005502 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005446:	e02e      	b.n	80054a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005448:	4b33      	ldr	r3, [pc, #204]	; (8005518 <xTaskResumeAll+0x11c>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3318      	adds	r3, #24
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fd50 	bl	8004efa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fd4b 	bl	8004efa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	4b2b      	ldr	r3, [pc, #172]	; (800551c <xTaskResumeAll+0x120>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	4a2a      	ldr	r2, [pc, #168]	; (800551c <xTaskResumeAll+0x120>)
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a27      	ldr	r2, [pc, #156]	; (8005520 <xTaskResumeAll+0x124>)
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7ff fcd7 	bl	8004e40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	4b23      	ldr	r3, [pc, #140]	; (8005524 <xTaskResumeAll+0x128>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <xTaskResumeAll+0x12c>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054a6:	4b1c      	ldr	r3, [pc, #112]	; (8005518 <xTaskResumeAll+0x11c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1cc      	bne.n	8005448 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054b4:	f000 fa12 	bl	80058dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <xTaskResumeAll+0x130>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d010      	beq.n	80054e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054c4:	f000 f836 	bl	8005534 <xTaskIncrementTick>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <xTaskResumeAll+0x12c>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f1      	bne.n	80054c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <xTaskResumeAll+0x130>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <xTaskResumeAll+0x12c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTaskResumeAll+0x134>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005502:	f000 fbcf 	bl	8005ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8005506:	68bb      	ldr	r3, [r7, #8]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000474 	.word	0x20000474
 8005514:	2000044c 	.word	0x2000044c
 8005518:	2000040c 	.word	0x2000040c
 800551c:	20000454 	.word	0x20000454
 8005520:	20000350 	.word	0x20000350
 8005524:	2000034c 	.word	0x2000034c
 8005528:	20000460 	.word	0x20000460
 800552c:	2000045c 	.word	0x2000045c
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800553e:	4b4e      	ldr	r3, [pc, #312]	; (8005678 <xTaskIncrementTick+0x144>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 808e 	bne.w	8005664 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005548:	4b4c      	ldr	r3, [pc, #304]	; (800567c <xTaskIncrementTick+0x148>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005550:	4a4a      	ldr	r2, [pc, #296]	; (800567c <xTaskIncrementTick+0x148>)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d120      	bne.n	800559e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800555c:	4b48      	ldr	r3, [pc, #288]	; (8005680 <xTaskIncrementTick+0x14c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <xTaskIncrementTick+0x48>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	603b      	str	r3, [r7, #0]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xTaskIncrementTick+0x46>
 800557c:	4b40      	ldr	r3, [pc, #256]	; (8005680 <xTaskIncrementTick+0x14c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	4b40      	ldr	r3, [pc, #256]	; (8005684 <xTaskIncrementTick+0x150>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3e      	ldr	r2, [pc, #248]	; (8005680 <xTaskIncrementTick+0x14c>)
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4a3e      	ldr	r2, [pc, #248]	; (8005684 <xTaskIncrementTick+0x150>)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <xTaskIncrementTick+0x154>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <xTaskIncrementTick+0x154>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	f000 f99f 	bl	80058dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <xTaskIncrementTick+0x158>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d348      	bcc.n	800563a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a8:	4b35      	ldr	r3, [pc, #212]	; (8005680 <xTaskIncrementTick+0x14c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d104      	bne.n	80055bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b2:	4b36      	ldr	r3, [pc, #216]	; (800568c <xTaskIncrementTick+0x158>)
 80055b4:	f04f 32ff 	mov.w	r2, #4294967295
 80055b8:	601a      	str	r2, [r3, #0]
					break;
 80055ba:	e03e      	b.n	800563a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055bc:	4b30      	ldr	r3, [pc, #192]	; (8005680 <xTaskIncrementTick+0x14c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d203      	bcs.n	80055dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055d4:	4a2d      	ldr	r2, [pc, #180]	; (800568c <xTaskIncrementTick+0x158>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055da:	e02e      	b.n	800563a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	3304      	adds	r3, #4
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fc8a 	bl	8004efa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	3318      	adds	r3, #24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fc81 	bl	8004efa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	2201      	movs	r2, #1
 80055fe:	409a      	lsls	r2, r3
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <xTaskIncrementTick+0x15c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4313      	orrs	r3, r2
 8005606:	4a22      	ldr	r2, [pc, #136]	; (8005690 <xTaskIncrementTick+0x15c>)
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <xTaskIncrementTick+0x160>)
 8005618:	441a      	add	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7ff fc0d 	bl	8004e40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <xTaskIncrementTick+0x164>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d3b9      	bcc.n	80055a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005638:	e7b6      	b.n	80055a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <xTaskIncrementTick+0x164>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	4914      	ldr	r1, [pc, #80]	; (8005694 <xTaskIncrementTick+0x160>)
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d901      	bls.n	8005656 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <xTaskIncrementTick+0x168>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e004      	b.n	800566e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <xTaskIncrementTick+0x16c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <xTaskIncrementTick+0x16c>)
 800566c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000474 	.word	0x20000474
 800567c:	20000450 	.word	0x20000450
 8005680:	20000404 	.word	0x20000404
 8005684:	20000408 	.word	0x20000408
 8005688:	20000464 	.word	0x20000464
 800568c:	2000046c 	.word	0x2000046c
 8005690:	20000454 	.word	0x20000454
 8005694:	20000350 	.word	0x20000350
 8005698:	2000034c 	.word	0x2000034c
 800569c:	20000460 	.word	0x20000460
 80056a0:	2000045c 	.word	0x2000045c

080056a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056aa:	4b29      	ldr	r3, [pc, #164]	; (8005750 <vTaskSwitchContext+0xac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056b2:	4b28      	ldr	r3, [pc, #160]	; (8005754 <vTaskSwitchContext+0xb0>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056b8:	e044      	b.n	8005744 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80056ba:	4b26      	ldr	r3, [pc, #152]	; (8005754 <vTaskSwitchContext+0xb0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c0:	4b25      	ldr	r3, [pc, #148]	; (8005758 <vTaskSwitchContext+0xb4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	fab3 f383 	clz	r3, r3
 80056cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	f1c3 031f 	rsb	r3, r3, #31
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	4921      	ldr	r1, [pc, #132]	; (800575c <vTaskSwitchContext+0xb8>)
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <vTaskSwitchContext+0x5c>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	607b      	str	r3, [r7, #4]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <vTaskSwitchContext+0x5a>
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4a14      	ldr	r2, [pc, #80]	; (800575c <vTaskSwitchContext+0xb8>)
 800570c:	4413      	add	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3308      	adds	r3, #8
 8005722:	429a      	cmp	r2, r3
 8005724:	d104      	bne.n	8005730 <vTaskSwitchContext+0x8c>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <vTaskSwitchContext+0xbc>)
 8005738:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <vTaskSwitchContext+0xbc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	334c      	adds	r3, #76	; 0x4c
 8005740:	4a08      	ldr	r2, [pc, #32]	; (8005764 <vTaskSwitchContext+0xc0>)
 8005742:	6013      	str	r3, [r2, #0]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20000474 	.word	0x20000474
 8005754:	20000460 	.word	0x20000460
 8005758:	20000454 	.word	0x20000454
 800575c:	20000350 	.word	0x20000350
 8005760:	2000034c 	.word	0x2000034c
 8005764:	20000010 	.word	0x20000010

08005768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005770:	f000 f852 	bl	8005818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <prvIdleTask+0x28>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d9f9      	bls.n	8005770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <prvIdleTask+0x2c>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800578c:	e7f0      	b.n	8005770 <prvIdleTask+0x8>
 800578e:	bf00      	nop
 8005790:	20000350 	.word	0x20000350
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	e00c      	b.n	80057be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <prvInitialiseTaskLists+0x60>)
 80057b0:	4413      	add	r3, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fb17 	bl	8004de6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3301      	adds	r3, #1
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b06      	cmp	r3, #6
 80057c2:	d9ef      	bls.n	80057a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057c4:	480d      	ldr	r0, [pc, #52]	; (80057fc <prvInitialiseTaskLists+0x64>)
 80057c6:	f7ff fb0e 	bl	8004de6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ca:	480d      	ldr	r0, [pc, #52]	; (8005800 <prvInitialiseTaskLists+0x68>)
 80057cc:	f7ff fb0b 	bl	8004de6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057d0:	480c      	ldr	r0, [pc, #48]	; (8005804 <prvInitialiseTaskLists+0x6c>)
 80057d2:	f7ff fb08 	bl	8004de6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057d6:	480c      	ldr	r0, [pc, #48]	; (8005808 <prvInitialiseTaskLists+0x70>)
 80057d8:	f7ff fb05 	bl	8004de6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057dc:	480b      	ldr	r0, [pc, #44]	; (800580c <prvInitialiseTaskLists+0x74>)
 80057de:	f7ff fb02 	bl	8004de6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <prvInitialiseTaskLists+0x78>)
 80057e4:	4a05      	ldr	r2, [pc, #20]	; (80057fc <prvInitialiseTaskLists+0x64>)
 80057e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <prvInitialiseTaskLists+0x7c>)
 80057ea:	4a05      	ldr	r2, [pc, #20]	; (8005800 <prvInitialiseTaskLists+0x68>)
 80057ec:	601a      	str	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000350 	.word	0x20000350
 80057fc:	200003dc 	.word	0x200003dc
 8005800:	200003f0 	.word	0x200003f0
 8005804:	2000040c 	.word	0x2000040c
 8005808:	20000420 	.word	0x20000420
 800580c:	20000438 	.word	0x20000438
 8005810:	20000404 	.word	0x20000404
 8005814:	20000408 	.word	0x20000408

08005818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800581e:	e019      	b.n	8005854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005820:	f000 fa10 	bl	8005c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005824:	4b10      	ldr	r3, [pc, #64]	; (8005868 <prvCheckTasksWaitingTermination+0x50>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fb62 	bl	8004efa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <prvCheckTasksWaitingTermination+0x54>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	4a0b      	ldr	r2, [pc, #44]	; (800586c <prvCheckTasksWaitingTermination+0x54>)
 800583e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <prvCheckTasksWaitingTermination+0x58>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3b01      	subs	r3, #1
 8005846:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <prvCheckTasksWaitingTermination+0x58>)
 8005848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800584a:	f000 fa2b 	bl	8005ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f810 	bl	8005874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <prvCheckTasksWaitingTermination+0x58>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e1      	bne.n	8005820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000420 	.word	0x20000420
 800586c:	2000044c 	.word	0x2000044c
 8005870:	20000434 	.word	0x20000434

08005874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	334c      	adds	r3, #76	; 0x4c
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fd55 	bl	8006330 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d108      	bne.n	80058a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb83 	bl	8005fa0 <vPortFree>
				vPortFree( pxTCB );
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fb80 	bl	8005fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058a0:	e018      	b.n	80058d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d103      	bne.n	80058b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb77 	bl	8005fa0 <vPortFree>
	}
 80058b2:	e00f      	b.n	80058d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d00a      	beq.n	80058d4 <prvDeleteTCB+0x60>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <prvDeleteTCB+0x5e>
	}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <prvResetNextTaskUnblockTime+0x38>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <prvResetNextTaskUnblockTime+0x3c>)
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058f4:	e008      	b.n	8005908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <prvResetNextTaskUnblockTime+0x38>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a04      	ldr	r2, [pc, #16]	; (8005918 <prvResetNextTaskUnblockTime+0x3c>)
 8005906:	6013      	str	r3, [r2, #0]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000404 	.word	0x20000404
 8005918:	2000046c 	.word	0x2000046c

0800591c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005926:	4b29      	ldr	r3, [pc, #164]	; (80059cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800592c:	4b28      	ldr	r3, [pc, #160]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3304      	adds	r3, #4
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fae1 	bl	8004efa <uxListRemove>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	2201      	movs	r2, #1
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4013      	ands	r3, r2
 8005952:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005954:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d10a      	bne.n	8005974 <prvAddCurrentTaskToDelayedList+0x58>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005964:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3304      	adds	r3, #4
 800596a:	4619      	mov	r1, r3
 800596c:	481a      	ldr	r0, [pc, #104]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800596e:	f7ff fa67 	bl	8004e40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005972:	e026      	b.n	80059c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800597c:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d209      	bcs.n	80059a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7ff fa75 	bl	8004e88 <vListInsert>
}
 800599e:	e010      	b.n	80059c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a0:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7ff fa6b 	bl	8004e88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d202      	bcs.n	80059c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6013      	str	r3, [r2, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000450 	.word	0x20000450
 80059d0:	2000034c 	.word	0x2000034c
 80059d4:	20000454 	.word	0x20000454
 80059d8:	20000438 	.word	0x20000438
 80059dc:	20000408 	.word	0x20000408
 80059e0:	20000404 	.word	0x20000404
 80059e4:	2000046c 	.word	0x2000046c

080059e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3b04      	subs	r3, #4
 80059f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f023 0201 	bic.w	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b04      	subs	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a18:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <pxPortInitialiseStack+0x64>)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b14      	subs	r3, #20
 8005a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f06f 0202 	mvn.w	r2, #2
 8005a36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b20      	subs	r3, #32
 8005a3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	08005a51 	.word	0x08005a51

08005a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <prvTaskExitError+0x54>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d00a      	beq.n	8005a7a <prvTaskExitError+0x2a>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60fb      	str	r3, [r7, #12]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <prvTaskExitError+0x28>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60bb      	str	r3, [r7, #8]
}
 8005a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a8e:	bf00      	nop
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0fc      	beq.n	8005a90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	2000000c 	.word	0x2000000c
	...

08005ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <pxCurrentTCBConst2>)
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	6808      	ldr	r0, [r1, #0]
 8005ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	f380 8809 	msr	PSP, r0
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f380 8811 	msr	BASEPRI, r0
 8005aca:	4770      	bx	lr
 8005acc:	f3af 8000 	nop.w

08005ad0 <pxCurrentTCBConst2>:
 8005ad0:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ad8:	4808      	ldr	r0, [pc, #32]	; (8005afc <prvPortStartFirstTask+0x24>)
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	6800      	ldr	r0, [r0, #0]
 8005ade:	f380 8808 	msr	MSP, r0
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8814 	msr	CONTROL, r0
 8005aea:	b662      	cpsie	i
 8005aec:	b661      	cpsie	f
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	df00      	svc	0
 8005af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005afa:	bf00      	nop
 8005afc:	e000ed08 	.word	0xe000ed08

08005b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b06:	4b46      	ldr	r3, [pc, #280]	; (8005c20 <xPortStartScheduler+0x120>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a46      	ldr	r2, [pc, #280]	; (8005c24 <xPortStartScheduler+0x124>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10a      	bne.n	8005b26 <xPortStartScheduler+0x26>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b26:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <xPortStartScheduler+0x120>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a3f      	ldr	r2, [pc, #252]	; (8005c28 <xPortStartScheduler+0x128>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10a      	bne.n	8005b46 <xPortStartScheduler+0x46>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b46:	4b39      	ldr	r3, [pc, #228]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	4b31      	ldr	r3, [pc, #196]	; (8005c30 <xPortStartScheduler+0x130>)
 8005b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b6e:	4b31      	ldr	r3, [pc, #196]	; (8005c34 <xPortStartScheduler+0x134>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b74:	e009      	b.n	8005b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b76:	4b2f      	ldr	r3, [pc, #188]	; (8005c34 <xPortStartScheduler+0x134>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	4a2d      	ldr	r2, [pc, #180]	; (8005c34 <xPortStartScheduler+0x134>)
 8005b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d0ef      	beq.n	8005b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b96:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <xPortStartScheduler+0x134>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f1c3 0307 	rsb	r3, r3, #7
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d00a      	beq.n	8005bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60bb      	str	r3, [r7, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <xPortStartScheduler+0x134>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <xPortStartScheduler+0x134>)
 8005bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <xPortStartScheduler+0x134>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bca:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <xPortStartScheduler+0x134>)
 8005bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bd6:	4b18      	ldr	r3, [pc, #96]	; (8005c38 <xPortStartScheduler+0x138>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <xPortStartScheduler+0x138>)
 8005bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <xPortStartScheduler+0x138>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <xPortStartScheduler+0x138>)
 8005be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bee:	f000 f8dd 	bl	8005dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bf2:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <xPortStartScheduler+0x13c>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bf8:	f000 f8fc 	bl	8005df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <xPortStartScheduler+0x140>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <xPortStartScheduler+0x140>)
 8005c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c08:	f7ff ff66 	bl	8005ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c0c:	f7ff fd4a 	bl	80056a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005c10:	f7ff ff1e 	bl	8005a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	e000ed00 	.word	0xe000ed00
 8005c24:	410fc271 	.word	0x410fc271
 8005c28:	410fc270 	.word	0x410fc270
 8005c2c:	e000e400 	.word	0xe000e400
 8005c30:	20000478 	.word	0x20000478
 8005c34:	2000047c 	.word	0x2000047c
 8005c38:	e000ed20 	.word	0xe000ed20
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	e000ef34 	.word	0xe000ef34

08005c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	607b      	str	r3, [r7, #4]
}
 8005c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <vPortEnterCritical+0x58>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	4a0d      	ldr	r2, [pc, #52]	; (8005c9c <vPortEnterCritical+0x58>)
 8005c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <vPortEnterCritical+0x58>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10f      	bne.n	8005c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <vPortEnterCritical+0x5c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	603b      	str	r3, [r7, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <vPortEnterCritical+0x4a>
	}
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <vPortExitCritical+0x50>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <vPortExitCritical+0x24>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	607b      	str	r3, [r7, #4]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <vPortExitCritical+0x50>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <vPortExitCritical+0x50>)
 8005cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <vPortExitCritical+0x50>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <vPortExitCritical+0x42>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	2000000c 	.word	0x2000000c
	...

08005d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d00:	f3ef 8009 	mrs	r0, PSP
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <pxCurrentTCBConst>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	f01e 0f10 	tst.w	lr, #16
 8005d10:	bf08      	it	eq
 8005d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1a:	6010      	str	r0, [r2, #0]
 8005d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d24:	f380 8811 	msr	BASEPRI, r0
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f7ff fcb8 	bl	80056a4 <vTaskSwitchContext>
 8005d34:	f04f 0000 	mov.w	r0, #0
 8005d38:	f380 8811 	msr	BASEPRI, r0
 8005d3c:	bc09      	pop	{r0, r3}
 8005d3e:	6819      	ldr	r1, [r3, #0]
 8005d40:	6808      	ldr	r0, [r1, #0]
 8005d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d46:	f01e 0f10 	tst.w	lr, #16
 8005d4a:	bf08      	it	eq
 8005d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d50:	f380 8809 	msr	PSP, r0
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	f3af 8000 	nop.w

08005d60 <pxCurrentTCBConst>:
 8005d60:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	607b      	str	r3, [r7, #4]
}
 8005d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d82:	f7ff fbd7 	bl	8005534 <xTaskIncrementTick>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <SysTick_Handler+0x40>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
}
 8005d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <vPortSetupTimerInterrupt+0x34>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <vPortSetupTimerInterrupt+0x38>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <vPortSetupTimerInterrupt+0x3c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <vPortSetupTimerInterrupt+0x40>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <vPortSetupTimerInterrupt+0x44>)
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dce:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <vPortSetupTimerInterrupt+0x34>)
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000e010 	.word	0xe000e010
 8005de4:	e000e018 	.word	0xe000e018
 8005de8:	20000000 	.word	0x20000000
 8005dec:	10624dd3 	.word	0x10624dd3
 8005df0:	e000e014 	.word	0xe000e014

08005df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e04 <vPortEnableVFP+0x10>
 8005df8:	6801      	ldr	r1, [r0, #0]
 8005dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dfe:	6001      	str	r1, [r0, #0]
 8005e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e02:	bf00      	nop
 8005e04:	e000ed88 	.word	0xe000ed88

08005e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e14:	f7ff fae4 	bl	80053e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e18:	4b5b      	ldr	r3, [pc, #364]	; (8005f88 <pvPortMalloc+0x180>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e20:	f000 f920 	bl	8006064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e24:	4b59      	ldr	r3, [pc, #356]	; (8005f8c <pvPortMalloc+0x184>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f040 8093 	bne.w	8005f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01d      	beq.n	8005e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e38:	2208      	movs	r2, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f023 0307 	bic.w	r3, r3, #7
 8005e50:	3308      	adds	r3, #8
 8005e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <pvPortMalloc+0x6c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	617b      	str	r3, [r7, #20]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d06e      	beq.n	8005f58 <pvPortMalloc+0x150>
 8005e7a:	4b45      	ldr	r3, [pc, #276]	; (8005f90 <pvPortMalloc+0x188>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d869      	bhi.n	8005f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e84:	4b43      	ldr	r3, [pc, #268]	; (8005f94 <pvPortMalloc+0x18c>)
 8005e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e88:	4b42      	ldr	r3, [pc, #264]	; (8005f94 <pvPortMalloc+0x18c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e8e:	e004      	b.n	8005e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d903      	bls.n	8005eac <pvPortMalloc+0xa4>
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f1      	bne.n	8005e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005eac:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <pvPortMalloc+0x180>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d050      	beq.n	8005f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2208      	movs	r2, #8
 8005ebc:	4413      	add	r3, r2
 8005ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	1ad2      	subs	r2, r2, r3
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d91f      	bls.n	8005f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <pvPortMalloc+0xf8>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	613b      	str	r3, [r7, #16]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f12:	69b8      	ldr	r0, [r7, #24]
 8005f14:	f000 f908 	bl	8006128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f18:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <pvPortMalloc+0x188>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <pvPortMalloc+0x188>)
 8005f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <pvPortMalloc+0x188>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <pvPortMalloc+0x190>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d203      	bcs.n	8005f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f32:	4b17      	ldr	r3, [pc, #92]	; (8005f90 <pvPortMalloc+0x188>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <pvPortMalloc+0x190>)
 8005f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <pvPortMalloc+0x184>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <pvPortMalloc+0x194>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a11      	ldr	r2, [pc, #68]	; (8005f9c <pvPortMalloc+0x194>)
 8005f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f58:	f7ff fa50 	bl	80053fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <pvPortMalloc+0x174>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60fb      	str	r3, [r7, #12]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <pvPortMalloc+0x172>
	return pvReturn;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3728      	adds	r7, #40	; 0x28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20004088 	.word	0x20004088
 8005f8c:	2000409c 	.word	0x2000409c
 8005f90:	2000408c 	.word	0x2000408c
 8005f94:	20004080 	.word	0x20004080
 8005f98:	20004090 	.word	0x20004090
 8005f9c:	20004094 	.word	0x20004094

08005fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d04d      	beq.n	800604e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	425b      	negs	r3, r3
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	4b24      	ldr	r3, [pc, #144]	; (8006058 <vPortFree+0xb8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <vPortFree+0x44>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	60fb      	str	r3, [r7, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <vPortFree+0x62>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	60bb      	str	r3, [r7, #8]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <vPortFree+0xb8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01e      	beq.n	800604e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d11a      	bne.n	800604e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <vPortFree+0xb8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006028:	f7ff f9da 	bl	80053e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <vPortFree+0xbc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4413      	add	r3, r2
 8006036:	4a09      	ldr	r2, [pc, #36]	; (800605c <vPortFree+0xbc>)
 8006038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800603a:	6938      	ldr	r0, [r7, #16]
 800603c:	f000 f874 	bl	8006128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <vPortFree+0xc0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a06      	ldr	r2, [pc, #24]	; (8006060 <vPortFree+0xc0>)
 8006048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800604a:	f7ff f9d7 	bl	80053fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000409c 	.word	0x2000409c
 800605c:	2000408c 	.word	0x2000408c
 8006060:	20004098 	.word	0x20004098

08006064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800606a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800606e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <prvHeapInit+0xac>)
 8006072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3307      	adds	r3, #7
 8006082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0307 	bic.w	r3, r3, #7
 800608a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <prvHeapInit+0xac>)
 8006094:	4413      	add	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <prvHeapInit+0xb0>)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <prvHeapInit+0xb0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060b0:	2208      	movs	r2, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0307 	bic.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <prvHeapInit+0xb4>)
 80060c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <prvHeapInit+0xb4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2200      	movs	r2, #0
 80060cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <prvHeapInit+0xb4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <prvHeapInit+0xb4>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4a0a      	ldr	r2, [pc, #40]	; (800611c <prvHeapInit+0xb8>)
 80060f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <prvHeapInit+0xbc>)
 80060fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <prvHeapInit+0xc0>)
 80060fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006102:	601a      	str	r2, [r3, #0]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000480 	.word	0x20000480
 8006114:	20004080 	.word	0x20004080
 8006118:	20004088 	.word	0x20004088
 800611c:	20004090 	.word	0x20004090
 8006120:	2000408c 	.word	0x2000408c
 8006124:	2000409c 	.word	0x2000409c

08006128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <prvInsertBlockIntoFreeList+0xac>)
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e002      	b.n	800613c <prvInsertBlockIntoFreeList+0x14>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d8f7      	bhi.n	8006136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d108      	bne.n	800616a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d118      	bne.n	80061b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d00d      	beq.n	80061a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	441a      	add	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	e008      	b.n	80061b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvInsertBlockIntoFreeList+0xb0>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e003      	b.n	80061b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d002      	beq.n	80061c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20004080 	.word	0x20004080
 80061d8:	20004088 	.word	0x20004088

080061dc <__errno>:
 80061dc:	4b01      	ldr	r3, [pc, #4]	; (80061e4 <__errno+0x8>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000010 	.word	0x20000010

080061e8 <__libc_init_array>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	4d0d      	ldr	r5, [pc, #52]	; (8006220 <__libc_init_array+0x38>)
 80061ec:	4c0d      	ldr	r4, [pc, #52]	; (8006224 <__libc_init_array+0x3c>)
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	2600      	movs	r6, #0
 80061f4:	42a6      	cmp	r6, r4
 80061f6:	d109      	bne.n	800620c <__libc_init_array+0x24>
 80061f8:	4d0b      	ldr	r5, [pc, #44]	; (8006228 <__libc_init_array+0x40>)
 80061fa:	4c0c      	ldr	r4, [pc, #48]	; (800622c <__libc_init_array+0x44>)
 80061fc:	f000 fcb8 	bl	8006b70 <_init>
 8006200:	1b64      	subs	r4, r4, r5
 8006202:	10a4      	asrs	r4, r4, #2
 8006204:	2600      	movs	r6, #0
 8006206:	42a6      	cmp	r6, r4
 8006208:	d105      	bne.n	8006216 <__libc_init_array+0x2e>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006210:	4798      	blx	r3
 8006212:	3601      	adds	r6, #1
 8006214:	e7ee      	b.n	80061f4 <__libc_init_array+0xc>
 8006216:	f855 3b04 	ldr.w	r3, [r5], #4
 800621a:	4798      	blx	r3
 800621c:	3601      	adds	r6, #1
 800621e:	e7f2      	b.n	8006206 <__libc_init_array+0x1e>
 8006220:	08006cdc 	.word	0x08006cdc
 8006224:	08006cdc 	.word	0x08006cdc
 8006228:	08006cdc 	.word	0x08006cdc
 800622c:	08006ce0 	.word	0x08006ce0

08006230 <__retarget_lock_acquire_recursive>:
 8006230:	4770      	bx	lr

08006232 <__retarget_lock_release_recursive>:
 8006232:	4770      	bx	lr

08006234 <memcpy>:
 8006234:	440a      	add	r2, r1
 8006236:	4291      	cmp	r1, r2
 8006238:	f100 33ff 	add.w	r3, r0, #4294967295
 800623c:	d100      	bne.n	8006240 <memcpy+0xc>
 800623e:	4770      	bx	lr
 8006240:	b510      	push	{r4, lr}
 8006242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800624a:	4291      	cmp	r1, r2
 800624c:	d1f9      	bne.n	8006242 <memcpy+0xe>
 800624e:	bd10      	pop	{r4, pc}

08006250 <memset>:
 8006250:	4402      	add	r2, r0
 8006252:	4603      	mov	r3, r0
 8006254:	4293      	cmp	r3, r2
 8006256:	d100      	bne.n	800625a <memset+0xa>
 8006258:	4770      	bx	lr
 800625a:	f803 1b01 	strb.w	r1, [r3], #1
 800625e:	e7f9      	b.n	8006254 <memset+0x4>

08006260 <_malloc_r>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	1ccd      	adds	r5, r1, #3
 8006264:	f025 0503 	bic.w	r5, r5, #3
 8006268:	3508      	adds	r5, #8
 800626a:	2d0c      	cmp	r5, #12
 800626c:	bf38      	it	cc
 800626e:	250c      	movcc	r5, #12
 8006270:	2d00      	cmp	r5, #0
 8006272:	4606      	mov	r6, r0
 8006274:	db01      	blt.n	800627a <_malloc_r+0x1a>
 8006276:	42a9      	cmp	r1, r5
 8006278:	d903      	bls.n	8006282 <_malloc_r+0x22>
 800627a:	230c      	movs	r3, #12
 800627c:	6033      	str	r3, [r6, #0]
 800627e:	2000      	movs	r0, #0
 8006280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006282:	f000 f8e1 	bl	8006448 <__malloc_lock>
 8006286:	4921      	ldr	r1, [pc, #132]	; (800630c <_malloc_r+0xac>)
 8006288:	680a      	ldr	r2, [r1, #0]
 800628a:	4614      	mov	r4, r2
 800628c:	b99c      	cbnz	r4, 80062b6 <_malloc_r+0x56>
 800628e:	4f20      	ldr	r7, [pc, #128]	; (8006310 <_malloc_r+0xb0>)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	b923      	cbnz	r3, 800629e <_malloc_r+0x3e>
 8006294:	4621      	mov	r1, r4
 8006296:	4630      	mov	r0, r6
 8006298:	f000 f8a6 	bl	80063e8 <_sbrk_r>
 800629c:	6038      	str	r0, [r7, #0]
 800629e:	4629      	mov	r1, r5
 80062a0:	4630      	mov	r0, r6
 80062a2:	f000 f8a1 	bl	80063e8 <_sbrk_r>
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	d123      	bne.n	80062f2 <_malloc_r+0x92>
 80062aa:	230c      	movs	r3, #12
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 f8d0 	bl	8006454 <__malloc_unlock>
 80062b4:	e7e3      	b.n	800627e <_malloc_r+0x1e>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	1b5b      	subs	r3, r3, r5
 80062ba:	d417      	bmi.n	80062ec <_malloc_r+0x8c>
 80062bc:	2b0b      	cmp	r3, #11
 80062be:	d903      	bls.n	80062c8 <_malloc_r+0x68>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	441c      	add	r4, r3
 80062c4:	6025      	str	r5, [r4, #0]
 80062c6:	e004      	b.n	80062d2 <_malloc_r+0x72>
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	42a2      	cmp	r2, r4
 80062cc:	bf0c      	ite	eq
 80062ce:	600b      	streq	r3, [r1, #0]
 80062d0:	6053      	strne	r3, [r2, #4]
 80062d2:	4630      	mov	r0, r6
 80062d4:	f000 f8be 	bl	8006454 <__malloc_unlock>
 80062d8:	f104 000b 	add.w	r0, r4, #11
 80062dc:	1d23      	adds	r3, r4, #4
 80062de:	f020 0007 	bic.w	r0, r0, #7
 80062e2:	1ac2      	subs	r2, r0, r3
 80062e4:	d0cc      	beq.n	8006280 <_malloc_r+0x20>
 80062e6:	1a1b      	subs	r3, r3, r0
 80062e8:	50a3      	str	r3, [r4, r2]
 80062ea:	e7c9      	b.n	8006280 <_malloc_r+0x20>
 80062ec:	4622      	mov	r2, r4
 80062ee:	6864      	ldr	r4, [r4, #4]
 80062f0:	e7cc      	b.n	800628c <_malloc_r+0x2c>
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d0e3      	beq.n	80062c4 <_malloc_r+0x64>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4630      	mov	r0, r6
 8006300:	f000 f872 	bl	80063e8 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d1dd      	bne.n	80062c4 <_malloc_r+0x64>
 8006308:	e7cf      	b.n	80062aa <_malloc_r+0x4a>
 800630a:	bf00      	nop
 800630c:	200040a0 	.word	0x200040a0
 8006310:	200040a4 	.word	0x200040a4

08006314 <cleanup_glue>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	460c      	mov	r4, r1
 8006318:	6809      	ldr	r1, [r1, #0]
 800631a:	4605      	mov	r5, r0
 800631c:	b109      	cbz	r1, 8006322 <cleanup_glue+0xe>
 800631e:	f7ff fff9 	bl	8006314 <cleanup_glue>
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800632a:	f000 b899 	b.w	8006460 <_free_r>
	...

08006330 <_reclaim_reent>:
 8006330:	4b2c      	ldr	r3, [pc, #176]	; (80063e4 <_reclaim_reent+0xb4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4283      	cmp	r3, r0
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	d051      	beq.n	80063e0 <_reclaim_reent+0xb0>
 800633c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800633e:	b143      	cbz	r3, 8006352 <_reclaim_reent+0x22>
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d14a      	bne.n	80063dc <_reclaim_reent+0xac>
 8006346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006348:	6819      	ldr	r1, [r3, #0]
 800634a:	b111      	cbz	r1, 8006352 <_reclaim_reent+0x22>
 800634c:	4620      	mov	r0, r4
 800634e:	f000 f887 	bl	8006460 <_free_r>
 8006352:	6961      	ldr	r1, [r4, #20]
 8006354:	b111      	cbz	r1, 800635c <_reclaim_reent+0x2c>
 8006356:	4620      	mov	r0, r4
 8006358:	f000 f882 	bl	8006460 <_free_r>
 800635c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800635e:	b111      	cbz	r1, 8006366 <_reclaim_reent+0x36>
 8006360:	4620      	mov	r0, r4
 8006362:	f000 f87d 	bl	8006460 <_free_r>
 8006366:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006368:	b111      	cbz	r1, 8006370 <_reclaim_reent+0x40>
 800636a:	4620      	mov	r0, r4
 800636c:	f000 f878 	bl	8006460 <_free_r>
 8006370:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006372:	b111      	cbz	r1, 800637a <_reclaim_reent+0x4a>
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f873 	bl	8006460 <_free_r>
 800637a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800637c:	b111      	cbz	r1, 8006384 <_reclaim_reent+0x54>
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f86e 	bl	8006460 <_free_r>
 8006384:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006386:	b111      	cbz	r1, 800638e <_reclaim_reent+0x5e>
 8006388:	4620      	mov	r0, r4
 800638a:	f000 f869 	bl	8006460 <_free_r>
 800638e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006390:	b111      	cbz	r1, 8006398 <_reclaim_reent+0x68>
 8006392:	4620      	mov	r0, r4
 8006394:	f000 f864 	bl	8006460 <_free_r>
 8006398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800639a:	b111      	cbz	r1, 80063a2 <_reclaim_reent+0x72>
 800639c:	4620      	mov	r0, r4
 800639e:	f000 f85f 	bl	8006460 <_free_r>
 80063a2:	69a3      	ldr	r3, [r4, #24]
 80063a4:	b1e3      	cbz	r3, 80063e0 <_reclaim_reent+0xb0>
 80063a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063a8:	4620      	mov	r0, r4
 80063aa:	4798      	blx	r3
 80063ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063ae:	b1b9      	cbz	r1, 80063e0 <_reclaim_reent+0xb0>
 80063b0:	4620      	mov	r0, r4
 80063b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063b6:	f7ff bfad 	b.w	8006314 <cleanup_glue>
 80063ba:	5949      	ldr	r1, [r1, r5]
 80063bc:	b941      	cbnz	r1, 80063d0 <_reclaim_reent+0xa0>
 80063be:	3504      	adds	r5, #4
 80063c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c2:	2d80      	cmp	r5, #128	; 0x80
 80063c4:	68d9      	ldr	r1, [r3, #12]
 80063c6:	d1f8      	bne.n	80063ba <_reclaim_reent+0x8a>
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f849 	bl	8006460 <_free_r>
 80063ce:	e7ba      	b.n	8006346 <_reclaim_reent+0x16>
 80063d0:	680e      	ldr	r6, [r1, #0]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f844 	bl	8006460 <_free_r>
 80063d8:	4631      	mov	r1, r6
 80063da:	e7ef      	b.n	80063bc <_reclaim_reent+0x8c>
 80063dc:	2500      	movs	r5, #0
 80063de:	e7ef      	b.n	80063c0 <_reclaim_reent+0x90>
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
 80063e2:	bf00      	nop
 80063e4:	20000010 	.word	0x20000010

080063e8 <_sbrk_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	; (8006404 <_sbrk_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fb faa4 	bl	8001940 <_sbrk>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_sbrk_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_sbrk_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	200043c8 	.word	0x200043c8

08006408 <siprintf>:
 8006408:	b40e      	push	{r1, r2, r3}
 800640a:	b500      	push	{lr}
 800640c:	b09c      	sub	sp, #112	; 0x70
 800640e:	ab1d      	add	r3, sp, #116	; 0x74
 8006410:	9002      	str	r0, [sp, #8]
 8006412:	9006      	str	r0, [sp, #24]
 8006414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006418:	4809      	ldr	r0, [pc, #36]	; (8006440 <siprintf+0x38>)
 800641a:	9107      	str	r1, [sp, #28]
 800641c:	9104      	str	r1, [sp, #16]
 800641e:	4909      	ldr	r1, [pc, #36]	; (8006444 <siprintf+0x3c>)
 8006420:	f853 2b04 	ldr.w	r2, [r3], #4
 8006424:	9105      	str	r1, [sp, #20]
 8006426:	6800      	ldr	r0, [r0, #0]
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	a902      	add	r1, sp, #8
 800642c:	f000 f8c4 	bl	80065b8 <_svfiprintf_r>
 8006430:	9b02      	ldr	r3, [sp, #8]
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	b01c      	add	sp, #112	; 0x70
 8006438:	f85d eb04 	ldr.w	lr, [sp], #4
 800643c:	b003      	add	sp, #12
 800643e:	4770      	bx	lr
 8006440:	20000010 	.word	0x20000010
 8006444:	ffff0208 	.word	0xffff0208

08006448 <__malloc_lock>:
 8006448:	4801      	ldr	r0, [pc, #4]	; (8006450 <__malloc_lock+0x8>)
 800644a:	f7ff bef1 	b.w	8006230 <__retarget_lock_acquire_recursive>
 800644e:	bf00      	nop
 8006450:	200043c0 	.word	0x200043c0

08006454 <__malloc_unlock>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__malloc_unlock+0x8>)
 8006456:	f7ff beec 	b.w	8006232 <__retarget_lock_release_recursive>
 800645a:	bf00      	nop
 800645c:	200043c0 	.word	0x200043c0

08006460 <_free_r>:
 8006460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006462:	2900      	cmp	r1, #0
 8006464:	d048      	beq.n	80064f8 <_free_r+0x98>
 8006466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800646a:	9001      	str	r0, [sp, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f1a1 0404 	sub.w	r4, r1, #4
 8006472:	bfb8      	it	lt
 8006474:	18e4      	addlt	r4, r4, r3
 8006476:	f7ff ffe7 	bl	8006448 <__malloc_lock>
 800647a:	4a20      	ldr	r2, [pc, #128]	; (80064fc <_free_r+0x9c>)
 800647c:	9801      	ldr	r0, [sp, #4]
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	4615      	mov	r5, r2
 8006482:	b933      	cbnz	r3, 8006492 <_free_r+0x32>
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6014      	str	r4, [r2, #0]
 8006488:	b003      	add	sp, #12
 800648a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800648e:	f7ff bfe1 	b.w	8006454 <__malloc_unlock>
 8006492:	42a3      	cmp	r3, r4
 8006494:	d90b      	bls.n	80064ae <_free_r+0x4e>
 8006496:	6821      	ldr	r1, [r4, #0]
 8006498:	1862      	adds	r2, r4, r1
 800649a:	4293      	cmp	r3, r2
 800649c:	bf04      	itt	eq
 800649e:	681a      	ldreq	r2, [r3, #0]
 80064a0:	685b      	ldreq	r3, [r3, #4]
 80064a2:	6063      	str	r3, [r4, #4]
 80064a4:	bf04      	itt	eq
 80064a6:	1852      	addeq	r2, r2, r1
 80064a8:	6022      	streq	r2, [r4, #0]
 80064aa:	602c      	str	r4, [r5, #0]
 80064ac:	e7ec      	b.n	8006488 <_free_r+0x28>
 80064ae:	461a      	mov	r2, r3
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b10b      	cbz	r3, 80064b8 <_free_r+0x58>
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	d9fa      	bls.n	80064ae <_free_r+0x4e>
 80064b8:	6811      	ldr	r1, [r2, #0]
 80064ba:	1855      	adds	r5, r2, r1
 80064bc:	42a5      	cmp	r5, r4
 80064be:	d10b      	bne.n	80064d8 <_free_r+0x78>
 80064c0:	6824      	ldr	r4, [r4, #0]
 80064c2:	4421      	add	r1, r4
 80064c4:	1854      	adds	r4, r2, r1
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	6011      	str	r1, [r2, #0]
 80064ca:	d1dd      	bne.n	8006488 <_free_r+0x28>
 80064cc:	681c      	ldr	r4, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	6053      	str	r3, [r2, #4]
 80064d2:	4421      	add	r1, r4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	e7d7      	b.n	8006488 <_free_r+0x28>
 80064d8:	d902      	bls.n	80064e0 <_free_r+0x80>
 80064da:	230c      	movs	r3, #12
 80064dc:	6003      	str	r3, [r0, #0]
 80064de:	e7d3      	b.n	8006488 <_free_r+0x28>
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf04      	itt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	bf04      	itt	eq
 80064f0:	1949      	addeq	r1, r1, r5
 80064f2:	6021      	streq	r1, [r4, #0]
 80064f4:	6054      	str	r4, [r2, #4]
 80064f6:	e7c7      	b.n	8006488 <_free_r+0x28>
 80064f8:	b003      	add	sp, #12
 80064fa:	bd30      	pop	{r4, r5, pc}
 80064fc:	200040a0 	.word	0x200040a0

08006500 <__ssputs_r>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	688e      	ldr	r6, [r1, #8]
 8006506:	429e      	cmp	r6, r3
 8006508:	4682      	mov	sl, r0
 800650a:	460c      	mov	r4, r1
 800650c:	4690      	mov	r8, r2
 800650e:	461f      	mov	r7, r3
 8006510:	d838      	bhi.n	8006584 <__ssputs_r+0x84>
 8006512:	898a      	ldrh	r2, [r1, #12]
 8006514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006518:	d032      	beq.n	8006580 <__ssputs_r+0x80>
 800651a:	6825      	ldr	r5, [r4, #0]
 800651c:	6909      	ldr	r1, [r1, #16]
 800651e:	eba5 0901 	sub.w	r9, r5, r1
 8006522:	6965      	ldr	r5, [r4, #20]
 8006524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800652c:	3301      	adds	r3, #1
 800652e:	444b      	add	r3, r9
 8006530:	106d      	asrs	r5, r5, #1
 8006532:	429d      	cmp	r5, r3
 8006534:	bf38      	it	cc
 8006536:	461d      	movcc	r5, r3
 8006538:	0553      	lsls	r3, r2, #21
 800653a:	d531      	bpl.n	80065a0 <__ssputs_r+0xa0>
 800653c:	4629      	mov	r1, r5
 800653e:	f7ff fe8f 	bl	8006260 <_malloc_r>
 8006542:	4606      	mov	r6, r0
 8006544:	b950      	cbnz	r0, 800655c <__ssputs_r+0x5c>
 8006546:	230c      	movs	r3, #12
 8006548:	f8ca 3000 	str.w	r3, [sl]
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655c:	6921      	ldr	r1, [r4, #16]
 800655e:	464a      	mov	r2, r9
 8006560:	f7ff fe68 	bl	8006234 <memcpy>
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	6126      	str	r6, [r4, #16]
 8006572:	6165      	str	r5, [r4, #20]
 8006574:	444e      	add	r6, r9
 8006576:	eba5 0509 	sub.w	r5, r5, r9
 800657a:	6026      	str	r6, [r4, #0]
 800657c:	60a5      	str	r5, [r4, #8]
 800657e:	463e      	mov	r6, r7
 8006580:	42be      	cmp	r6, r7
 8006582:	d900      	bls.n	8006586 <__ssputs_r+0x86>
 8006584:	463e      	mov	r6, r7
 8006586:	4632      	mov	r2, r6
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	4641      	mov	r1, r8
 800658c:	f000 faa8 	bl	8006ae0 <memmove>
 8006590:	68a3      	ldr	r3, [r4, #8]
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	1b9b      	subs	r3, r3, r6
 8006596:	4432      	add	r2, r6
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6022      	str	r2, [r4, #0]
 800659c:	2000      	movs	r0, #0
 800659e:	e7db      	b.n	8006558 <__ssputs_r+0x58>
 80065a0:	462a      	mov	r2, r5
 80065a2:	f000 fab7 	bl	8006b14 <_realloc_r>
 80065a6:	4606      	mov	r6, r0
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d1e1      	bne.n	8006570 <__ssputs_r+0x70>
 80065ac:	6921      	ldr	r1, [r4, #16]
 80065ae:	4650      	mov	r0, sl
 80065b0:	f7ff ff56 	bl	8006460 <_free_r>
 80065b4:	e7c7      	b.n	8006546 <__ssputs_r+0x46>
	...

080065b8 <_svfiprintf_r>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	4698      	mov	r8, r3
 80065be:	898b      	ldrh	r3, [r1, #12]
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	b09d      	sub	sp, #116	; 0x74
 80065c4:	4607      	mov	r7, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	4614      	mov	r4, r2
 80065ca:	d50e      	bpl.n	80065ea <_svfiprintf_r+0x32>
 80065cc:	690b      	ldr	r3, [r1, #16]
 80065ce:	b963      	cbnz	r3, 80065ea <_svfiprintf_r+0x32>
 80065d0:	2140      	movs	r1, #64	; 0x40
 80065d2:	f7ff fe45 	bl	8006260 <_malloc_r>
 80065d6:	6028      	str	r0, [r5, #0]
 80065d8:	6128      	str	r0, [r5, #16]
 80065da:	b920      	cbnz	r0, 80065e6 <_svfiprintf_r+0x2e>
 80065dc:	230c      	movs	r3, #12
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	e0d1      	b.n	800678a <_svfiprintf_r+0x1d2>
 80065e6:	2340      	movs	r3, #64	; 0x40
 80065e8:	616b      	str	r3, [r5, #20]
 80065ea:	2300      	movs	r3, #0
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	2320      	movs	r3, #32
 80065f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80065f8:	2330      	movs	r3, #48	; 0x30
 80065fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067a4 <_svfiprintf_r+0x1ec>
 80065fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006602:	f04f 0901 	mov.w	r9, #1
 8006606:	4623      	mov	r3, r4
 8006608:	469a      	mov	sl, r3
 800660a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800660e:	b10a      	cbz	r2, 8006614 <_svfiprintf_r+0x5c>
 8006610:	2a25      	cmp	r2, #37	; 0x25
 8006612:	d1f9      	bne.n	8006608 <_svfiprintf_r+0x50>
 8006614:	ebba 0b04 	subs.w	fp, sl, r4
 8006618:	d00b      	beq.n	8006632 <_svfiprintf_r+0x7a>
 800661a:	465b      	mov	r3, fp
 800661c:	4622      	mov	r2, r4
 800661e:	4629      	mov	r1, r5
 8006620:	4638      	mov	r0, r7
 8006622:	f7ff ff6d 	bl	8006500 <__ssputs_r>
 8006626:	3001      	adds	r0, #1
 8006628:	f000 80aa 	beq.w	8006780 <_svfiprintf_r+0x1c8>
 800662c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800662e:	445a      	add	r2, fp
 8006630:	9209      	str	r2, [sp, #36]	; 0x24
 8006632:	f89a 3000 	ldrb.w	r3, [sl]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80a2 	beq.w	8006780 <_svfiprintf_r+0x1c8>
 800663c:	2300      	movs	r3, #0
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006646:	f10a 0a01 	add.w	sl, sl, #1
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	9307      	str	r3, [sp, #28]
 800664e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006652:	931a      	str	r3, [sp, #104]	; 0x68
 8006654:	4654      	mov	r4, sl
 8006656:	2205      	movs	r2, #5
 8006658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665c:	4851      	ldr	r0, [pc, #324]	; (80067a4 <_svfiprintf_r+0x1ec>)
 800665e:	f7f9 fddf 	bl	8000220 <memchr>
 8006662:	9a04      	ldr	r2, [sp, #16]
 8006664:	b9d8      	cbnz	r0, 800669e <_svfiprintf_r+0xe6>
 8006666:	06d0      	lsls	r0, r2, #27
 8006668:	bf44      	itt	mi
 800666a:	2320      	movmi	r3, #32
 800666c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006670:	0711      	lsls	r1, r2, #28
 8006672:	bf44      	itt	mi
 8006674:	232b      	movmi	r3, #43	; 0x2b
 8006676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800667a:	f89a 3000 	ldrb.w	r3, [sl]
 800667e:	2b2a      	cmp	r3, #42	; 0x2a
 8006680:	d015      	beq.n	80066ae <_svfiprintf_r+0xf6>
 8006682:	9a07      	ldr	r2, [sp, #28]
 8006684:	4654      	mov	r4, sl
 8006686:	2000      	movs	r0, #0
 8006688:	f04f 0c0a 	mov.w	ip, #10
 800668c:	4621      	mov	r1, r4
 800668e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006692:	3b30      	subs	r3, #48	; 0x30
 8006694:	2b09      	cmp	r3, #9
 8006696:	d94e      	bls.n	8006736 <_svfiprintf_r+0x17e>
 8006698:	b1b0      	cbz	r0, 80066c8 <_svfiprintf_r+0x110>
 800669a:	9207      	str	r2, [sp, #28]
 800669c:	e014      	b.n	80066c8 <_svfiprintf_r+0x110>
 800669e:	eba0 0308 	sub.w	r3, r0, r8
 80066a2:	fa09 f303 	lsl.w	r3, r9, r3
 80066a6:	4313      	orrs	r3, r2
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	46a2      	mov	sl, r4
 80066ac:	e7d2      	b.n	8006654 <_svfiprintf_r+0x9c>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	1d19      	adds	r1, r3, #4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	9103      	str	r1, [sp, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bfbb      	ittet	lt
 80066ba:	425b      	neglt	r3, r3
 80066bc:	f042 0202 	orrlt.w	r2, r2, #2
 80066c0:	9307      	strge	r3, [sp, #28]
 80066c2:	9307      	strlt	r3, [sp, #28]
 80066c4:	bfb8      	it	lt
 80066c6:	9204      	strlt	r2, [sp, #16]
 80066c8:	7823      	ldrb	r3, [r4, #0]
 80066ca:	2b2e      	cmp	r3, #46	; 0x2e
 80066cc:	d10c      	bne.n	80066e8 <_svfiprintf_r+0x130>
 80066ce:	7863      	ldrb	r3, [r4, #1]
 80066d0:	2b2a      	cmp	r3, #42	; 0x2a
 80066d2:	d135      	bne.n	8006740 <_svfiprintf_r+0x188>
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	1d1a      	adds	r2, r3, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	9203      	str	r2, [sp, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bfb8      	it	lt
 80066e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80066e4:	3402      	adds	r4, #2
 80066e6:	9305      	str	r3, [sp, #20]
 80066e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067b4 <_svfiprintf_r+0x1fc>
 80066ec:	7821      	ldrb	r1, [r4, #0]
 80066ee:	2203      	movs	r2, #3
 80066f0:	4650      	mov	r0, sl
 80066f2:	f7f9 fd95 	bl	8000220 <memchr>
 80066f6:	b140      	cbz	r0, 800670a <_svfiprintf_r+0x152>
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	eba0 000a 	sub.w	r0, r0, sl
 80066fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006702:	9b04      	ldr	r3, [sp, #16]
 8006704:	4303      	orrs	r3, r0
 8006706:	3401      	adds	r4, #1
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670e:	4826      	ldr	r0, [pc, #152]	; (80067a8 <_svfiprintf_r+0x1f0>)
 8006710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006714:	2206      	movs	r2, #6
 8006716:	f7f9 fd83 	bl	8000220 <memchr>
 800671a:	2800      	cmp	r0, #0
 800671c:	d038      	beq.n	8006790 <_svfiprintf_r+0x1d8>
 800671e:	4b23      	ldr	r3, [pc, #140]	; (80067ac <_svfiprintf_r+0x1f4>)
 8006720:	bb1b      	cbnz	r3, 800676a <_svfiprintf_r+0x1b2>
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	3307      	adds	r3, #7
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	3308      	adds	r3, #8
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006730:	4433      	add	r3, r6
 8006732:	9309      	str	r3, [sp, #36]	; 0x24
 8006734:	e767      	b.n	8006606 <_svfiprintf_r+0x4e>
 8006736:	fb0c 3202 	mla	r2, ip, r2, r3
 800673a:	460c      	mov	r4, r1
 800673c:	2001      	movs	r0, #1
 800673e:	e7a5      	b.n	800668c <_svfiprintf_r+0xd4>
 8006740:	2300      	movs	r3, #0
 8006742:	3401      	adds	r4, #1
 8006744:	9305      	str	r3, [sp, #20]
 8006746:	4619      	mov	r1, r3
 8006748:	f04f 0c0a 	mov.w	ip, #10
 800674c:	4620      	mov	r0, r4
 800674e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006752:	3a30      	subs	r2, #48	; 0x30
 8006754:	2a09      	cmp	r2, #9
 8006756:	d903      	bls.n	8006760 <_svfiprintf_r+0x1a8>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0c5      	beq.n	80066e8 <_svfiprintf_r+0x130>
 800675c:	9105      	str	r1, [sp, #20]
 800675e:	e7c3      	b.n	80066e8 <_svfiprintf_r+0x130>
 8006760:	fb0c 2101 	mla	r1, ip, r1, r2
 8006764:	4604      	mov	r4, r0
 8006766:	2301      	movs	r3, #1
 8006768:	e7f0      	b.n	800674c <_svfiprintf_r+0x194>
 800676a:	ab03      	add	r3, sp, #12
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	462a      	mov	r2, r5
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <_svfiprintf_r+0x1f8>)
 8006772:	a904      	add	r1, sp, #16
 8006774:	4638      	mov	r0, r7
 8006776:	f3af 8000 	nop.w
 800677a:	1c42      	adds	r2, r0, #1
 800677c:	4606      	mov	r6, r0
 800677e:	d1d6      	bne.n	800672e <_svfiprintf_r+0x176>
 8006780:	89ab      	ldrh	r3, [r5, #12]
 8006782:	065b      	lsls	r3, r3, #25
 8006784:	f53f af2c 	bmi.w	80065e0 <_svfiprintf_r+0x28>
 8006788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800678a:	b01d      	add	sp, #116	; 0x74
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	ab03      	add	r3, sp, #12
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	462a      	mov	r2, r5
 8006796:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <_svfiprintf_r+0x1f8>)
 8006798:	a904      	add	r1, sp, #16
 800679a:	4638      	mov	r0, r7
 800679c:	f000 f87a 	bl	8006894 <_printf_i>
 80067a0:	e7eb      	b.n	800677a <_svfiprintf_r+0x1c2>
 80067a2:	bf00      	nop
 80067a4:	08006ca0 	.word	0x08006ca0
 80067a8:	08006caa 	.word	0x08006caa
 80067ac:	00000000 	.word	0x00000000
 80067b0:	08006501 	.word	0x08006501
 80067b4:	08006ca6 	.word	0x08006ca6

080067b8 <_printf_common>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	4616      	mov	r6, r2
 80067be:	4699      	mov	r9, r3
 80067c0:	688a      	ldr	r2, [r1, #8]
 80067c2:	690b      	ldr	r3, [r1, #16]
 80067c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bfb8      	it	lt
 80067cc:	4613      	movlt	r3, r2
 80067ce:	6033      	str	r3, [r6, #0]
 80067d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d4:	4607      	mov	r7, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	b10a      	cbz	r2, 80067de <_printf_common+0x26>
 80067da:	3301      	adds	r3, #1
 80067dc:	6033      	str	r3, [r6, #0]
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	0699      	lsls	r1, r3, #26
 80067e2:	bf42      	ittt	mi
 80067e4:	6833      	ldrmi	r3, [r6, #0]
 80067e6:	3302      	addmi	r3, #2
 80067e8:	6033      	strmi	r3, [r6, #0]
 80067ea:	6825      	ldr	r5, [r4, #0]
 80067ec:	f015 0506 	ands.w	r5, r5, #6
 80067f0:	d106      	bne.n	8006800 <_printf_common+0x48>
 80067f2:	f104 0a19 	add.w	sl, r4, #25
 80067f6:	68e3      	ldr	r3, [r4, #12]
 80067f8:	6832      	ldr	r2, [r6, #0]
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	42ab      	cmp	r3, r5
 80067fe:	dc26      	bgt.n	800684e <_printf_common+0x96>
 8006800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006804:	1e13      	subs	r3, r2, #0
 8006806:	6822      	ldr	r2, [r4, #0]
 8006808:	bf18      	it	ne
 800680a:	2301      	movne	r3, #1
 800680c:	0692      	lsls	r2, r2, #26
 800680e:	d42b      	bmi.n	8006868 <_printf_common+0xb0>
 8006810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006814:	4649      	mov	r1, r9
 8006816:	4638      	mov	r0, r7
 8006818:	47c0      	blx	r8
 800681a:	3001      	adds	r0, #1
 800681c:	d01e      	beq.n	800685c <_printf_common+0xa4>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	68e5      	ldr	r5, [r4, #12]
 8006822:	6832      	ldr	r2, [r6, #0]
 8006824:	f003 0306 	and.w	r3, r3, #6
 8006828:	2b04      	cmp	r3, #4
 800682a:	bf08      	it	eq
 800682c:	1aad      	subeq	r5, r5, r2
 800682e:	68a3      	ldr	r3, [r4, #8]
 8006830:	6922      	ldr	r2, [r4, #16]
 8006832:	bf0c      	ite	eq
 8006834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006838:	2500      	movne	r5, #0
 800683a:	4293      	cmp	r3, r2
 800683c:	bfc4      	itt	gt
 800683e:	1a9b      	subgt	r3, r3, r2
 8006840:	18ed      	addgt	r5, r5, r3
 8006842:	2600      	movs	r6, #0
 8006844:	341a      	adds	r4, #26
 8006846:	42b5      	cmp	r5, r6
 8006848:	d11a      	bne.n	8006880 <_printf_common+0xc8>
 800684a:	2000      	movs	r0, #0
 800684c:	e008      	b.n	8006860 <_printf_common+0xa8>
 800684e:	2301      	movs	r3, #1
 8006850:	4652      	mov	r2, sl
 8006852:	4649      	mov	r1, r9
 8006854:	4638      	mov	r0, r7
 8006856:	47c0      	blx	r8
 8006858:	3001      	adds	r0, #1
 800685a:	d103      	bne.n	8006864 <_printf_common+0xac>
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	3501      	adds	r5, #1
 8006866:	e7c6      	b.n	80067f6 <_printf_common+0x3e>
 8006868:	18e1      	adds	r1, r4, r3
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	2030      	movs	r0, #48	; 0x30
 800686e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006872:	4422      	add	r2, r4
 8006874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800687c:	3302      	adds	r3, #2
 800687e:	e7c7      	b.n	8006810 <_printf_common+0x58>
 8006880:	2301      	movs	r3, #1
 8006882:	4622      	mov	r2, r4
 8006884:	4649      	mov	r1, r9
 8006886:	4638      	mov	r0, r7
 8006888:	47c0      	blx	r8
 800688a:	3001      	adds	r0, #1
 800688c:	d0e6      	beq.n	800685c <_printf_common+0xa4>
 800688e:	3601      	adds	r6, #1
 8006890:	e7d9      	b.n	8006846 <_printf_common+0x8e>
	...

08006894 <_printf_i>:
 8006894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	4691      	mov	r9, r2
 800689c:	7e27      	ldrb	r7, [r4, #24]
 800689e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068a0:	2f78      	cmp	r7, #120	; 0x78
 80068a2:	4680      	mov	r8, r0
 80068a4:	469a      	mov	sl, r3
 80068a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068aa:	d807      	bhi.n	80068bc <_printf_i+0x28>
 80068ac:	2f62      	cmp	r7, #98	; 0x62
 80068ae:	d80a      	bhi.n	80068c6 <_printf_i+0x32>
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	f000 80d8 	beq.w	8006a66 <_printf_i+0x1d2>
 80068b6:	2f58      	cmp	r7, #88	; 0x58
 80068b8:	f000 80a3 	beq.w	8006a02 <_printf_i+0x16e>
 80068bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c4:	e03a      	b.n	800693c <_printf_i+0xa8>
 80068c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ca:	2b15      	cmp	r3, #21
 80068cc:	d8f6      	bhi.n	80068bc <_printf_i+0x28>
 80068ce:	a001      	add	r0, pc, #4	; (adr r0, 80068d4 <_printf_i+0x40>)
 80068d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068d4:	0800692d 	.word	0x0800692d
 80068d8:	08006941 	.word	0x08006941
 80068dc:	080068bd 	.word	0x080068bd
 80068e0:	080068bd 	.word	0x080068bd
 80068e4:	080068bd 	.word	0x080068bd
 80068e8:	080068bd 	.word	0x080068bd
 80068ec:	08006941 	.word	0x08006941
 80068f0:	080068bd 	.word	0x080068bd
 80068f4:	080068bd 	.word	0x080068bd
 80068f8:	080068bd 	.word	0x080068bd
 80068fc:	080068bd 	.word	0x080068bd
 8006900:	08006a4d 	.word	0x08006a4d
 8006904:	08006971 	.word	0x08006971
 8006908:	08006a2f 	.word	0x08006a2f
 800690c:	080068bd 	.word	0x080068bd
 8006910:	080068bd 	.word	0x080068bd
 8006914:	08006a6f 	.word	0x08006a6f
 8006918:	080068bd 	.word	0x080068bd
 800691c:	08006971 	.word	0x08006971
 8006920:	080068bd 	.word	0x080068bd
 8006924:	080068bd 	.word	0x080068bd
 8006928:	08006a37 	.word	0x08006a37
 800692c:	680b      	ldr	r3, [r1, #0]
 800692e:	1d1a      	adds	r2, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	600a      	str	r2, [r1, #0]
 8006934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800693c:	2301      	movs	r3, #1
 800693e:	e0a3      	b.n	8006a88 <_printf_i+0x1f4>
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	6808      	ldr	r0, [r1, #0]
 8006944:	062e      	lsls	r6, r5, #24
 8006946:	f100 0304 	add.w	r3, r0, #4
 800694a:	d50a      	bpl.n	8006962 <_printf_i+0xce>
 800694c:	6805      	ldr	r5, [r0, #0]
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	2d00      	cmp	r5, #0
 8006952:	da03      	bge.n	800695c <_printf_i+0xc8>
 8006954:	232d      	movs	r3, #45	; 0x2d
 8006956:	426d      	negs	r5, r5
 8006958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800695c:	485e      	ldr	r0, [pc, #376]	; (8006ad8 <_printf_i+0x244>)
 800695e:	230a      	movs	r3, #10
 8006960:	e019      	b.n	8006996 <_printf_i+0x102>
 8006962:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006966:	6805      	ldr	r5, [r0, #0]
 8006968:	600b      	str	r3, [r1, #0]
 800696a:	bf18      	it	ne
 800696c:	b22d      	sxthne	r5, r5
 800696e:	e7ef      	b.n	8006950 <_printf_i+0xbc>
 8006970:	680b      	ldr	r3, [r1, #0]
 8006972:	6825      	ldr	r5, [r4, #0]
 8006974:	1d18      	adds	r0, r3, #4
 8006976:	6008      	str	r0, [r1, #0]
 8006978:	0628      	lsls	r0, r5, #24
 800697a:	d501      	bpl.n	8006980 <_printf_i+0xec>
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0xf2>
 8006980:	0669      	lsls	r1, r5, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0xe8>
 8006984:	881d      	ldrh	r5, [r3, #0]
 8006986:	4854      	ldr	r0, [pc, #336]	; (8006ad8 <_printf_i+0x244>)
 8006988:	2f6f      	cmp	r7, #111	; 0x6f
 800698a:	bf0c      	ite	eq
 800698c:	2308      	moveq	r3, #8
 800698e:	230a      	movne	r3, #10
 8006990:	2100      	movs	r1, #0
 8006992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006996:	6866      	ldr	r6, [r4, #4]
 8006998:	60a6      	str	r6, [r4, #8]
 800699a:	2e00      	cmp	r6, #0
 800699c:	bfa2      	ittt	ge
 800699e:	6821      	ldrge	r1, [r4, #0]
 80069a0:	f021 0104 	bicge.w	r1, r1, #4
 80069a4:	6021      	strge	r1, [r4, #0]
 80069a6:	b90d      	cbnz	r5, 80069ac <_printf_i+0x118>
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	d04d      	beq.n	8006a48 <_printf_i+0x1b4>
 80069ac:	4616      	mov	r6, r2
 80069ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80069b2:	fb03 5711 	mls	r7, r3, r1, r5
 80069b6:	5dc7      	ldrb	r7, [r0, r7]
 80069b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069bc:	462f      	mov	r7, r5
 80069be:	42bb      	cmp	r3, r7
 80069c0:	460d      	mov	r5, r1
 80069c2:	d9f4      	bls.n	80069ae <_printf_i+0x11a>
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d10b      	bne.n	80069e0 <_printf_i+0x14c>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	07df      	lsls	r7, r3, #31
 80069cc:	d508      	bpl.n	80069e0 <_printf_i+0x14c>
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	bfde      	ittt	le
 80069d6:	2330      	movle	r3, #48	; 0x30
 80069d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069e0:	1b92      	subs	r2, r2, r6
 80069e2:	6122      	str	r2, [r4, #16]
 80069e4:	f8cd a000 	str.w	sl, [sp]
 80069e8:	464b      	mov	r3, r9
 80069ea:	aa03      	add	r2, sp, #12
 80069ec:	4621      	mov	r1, r4
 80069ee:	4640      	mov	r0, r8
 80069f0:	f7ff fee2 	bl	80067b8 <_printf_common>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d14c      	bne.n	8006a92 <_printf_i+0x1fe>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b004      	add	sp, #16
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a02:	4835      	ldr	r0, [pc, #212]	; (8006ad8 <_printf_i+0x244>)
 8006a04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	680e      	ldr	r6, [r1, #0]
 8006a0c:	061f      	lsls	r7, r3, #24
 8006a0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a12:	600e      	str	r6, [r1, #0]
 8006a14:	d514      	bpl.n	8006a40 <_printf_i+0x1ac>
 8006a16:	07d9      	lsls	r1, r3, #31
 8006a18:	bf44      	itt	mi
 8006a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a1e:	6023      	strmi	r3, [r4, #0]
 8006a20:	b91d      	cbnz	r5, 8006a2a <_printf_i+0x196>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	f023 0320 	bic.w	r3, r3, #32
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	e7b0      	b.n	8006990 <_printf_i+0xfc>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f043 0320 	orr.w	r3, r3, #32
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	2378      	movs	r3, #120	; 0x78
 8006a38:	4828      	ldr	r0, [pc, #160]	; (8006adc <_printf_i+0x248>)
 8006a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a3e:	e7e3      	b.n	8006a08 <_printf_i+0x174>
 8006a40:	065e      	lsls	r6, r3, #25
 8006a42:	bf48      	it	mi
 8006a44:	b2ad      	uxthmi	r5, r5
 8006a46:	e7e6      	b.n	8006a16 <_printf_i+0x182>
 8006a48:	4616      	mov	r6, r2
 8006a4a:	e7bb      	b.n	80069c4 <_printf_i+0x130>
 8006a4c:	680b      	ldr	r3, [r1, #0]
 8006a4e:	6826      	ldr	r6, [r4, #0]
 8006a50:	6960      	ldr	r0, [r4, #20]
 8006a52:	1d1d      	adds	r5, r3, #4
 8006a54:	600d      	str	r5, [r1, #0]
 8006a56:	0635      	lsls	r5, r6, #24
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	d501      	bpl.n	8006a60 <_printf_i+0x1cc>
 8006a5c:	6018      	str	r0, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <_printf_i+0x1d2>
 8006a60:	0671      	lsls	r1, r6, #25
 8006a62:	d5fb      	bpl.n	8006a5c <_printf_i+0x1c8>
 8006a64:	8018      	strh	r0, [r3, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	4616      	mov	r6, r2
 8006a6c:	e7ba      	b.n	80069e4 <_printf_i+0x150>
 8006a6e:	680b      	ldr	r3, [r1, #0]
 8006a70:	1d1a      	adds	r2, r3, #4
 8006a72:	600a      	str	r2, [r1, #0]
 8006a74:	681e      	ldr	r6, [r3, #0]
 8006a76:	6862      	ldr	r2, [r4, #4]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7f9 fbd0 	bl	8000220 <memchr>
 8006a80:	b108      	cbz	r0, 8006a86 <_printf_i+0x1f2>
 8006a82:	1b80      	subs	r0, r0, r6
 8006a84:	6060      	str	r0, [r4, #4]
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a90:	e7a8      	b.n	80069e4 <_printf_i+0x150>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	4632      	mov	r2, r6
 8006a96:	4649      	mov	r1, r9
 8006a98:	4640      	mov	r0, r8
 8006a9a:	47d0      	blx	sl
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d0ab      	beq.n	80069f8 <_printf_i+0x164>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	079b      	lsls	r3, r3, #30
 8006aa4:	d413      	bmi.n	8006ace <_printf_i+0x23a>
 8006aa6:	68e0      	ldr	r0, [r4, #12]
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	4298      	cmp	r0, r3
 8006aac:	bfb8      	it	lt
 8006aae:	4618      	movlt	r0, r3
 8006ab0:	e7a4      	b.n	80069fc <_printf_i+0x168>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	47d0      	blx	sl
 8006abc:	3001      	adds	r0, #1
 8006abe:	d09b      	beq.n	80069f8 <_printf_i+0x164>
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	9903      	ldr	r1, [sp, #12]
 8006ac6:	1a5b      	subs	r3, r3, r1
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dcf2      	bgt.n	8006ab2 <_printf_i+0x21e>
 8006acc:	e7eb      	b.n	8006aa6 <_printf_i+0x212>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	f104 0619 	add.w	r6, r4, #25
 8006ad4:	e7f5      	b.n	8006ac2 <_printf_i+0x22e>
 8006ad6:	bf00      	nop
 8006ad8:	08006cb1 	.word	0x08006cb1
 8006adc:	08006cc2 	.word	0x08006cc2

08006ae0 <memmove>:
 8006ae0:	4288      	cmp	r0, r1
 8006ae2:	b510      	push	{r4, lr}
 8006ae4:	eb01 0402 	add.w	r4, r1, r2
 8006ae8:	d902      	bls.n	8006af0 <memmove+0x10>
 8006aea:	4284      	cmp	r4, r0
 8006aec:	4623      	mov	r3, r4
 8006aee:	d807      	bhi.n	8006b00 <memmove+0x20>
 8006af0:	1e43      	subs	r3, r0, #1
 8006af2:	42a1      	cmp	r1, r4
 8006af4:	d008      	beq.n	8006b08 <memmove+0x28>
 8006af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006afe:	e7f8      	b.n	8006af2 <memmove+0x12>
 8006b00:	4402      	add	r2, r0
 8006b02:	4601      	mov	r1, r0
 8006b04:	428a      	cmp	r2, r1
 8006b06:	d100      	bne.n	8006b0a <memmove+0x2a>
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b12:	e7f7      	b.n	8006b04 <memmove+0x24>

08006b14 <_realloc_r>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	4607      	mov	r7, r0
 8006b18:	4614      	mov	r4, r2
 8006b1a:	460e      	mov	r6, r1
 8006b1c:	b921      	cbnz	r1, 8006b28 <_realloc_r+0x14>
 8006b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b22:	4611      	mov	r1, r2
 8006b24:	f7ff bb9c 	b.w	8006260 <_malloc_r>
 8006b28:	b922      	cbnz	r2, 8006b34 <_realloc_r+0x20>
 8006b2a:	f7ff fc99 	bl	8006460 <_free_r>
 8006b2e:	4625      	mov	r5, r4
 8006b30:	4628      	mov	r0, r5
 8006b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b34:	f000 f814 	bl	8006b60 <_malloc_usable_size_r>
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d20f      	bcs.n	8006b5c <_realloc_r+0x48>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f7ff fb8e 	bl	8006260 <_malloc_r>
 8006b44:	4605      	mov	r5, r0
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d0f2      	beq.n	8006b30 <_realloc_r+0x1c>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	f7ff fb71 	bl	8006234 <memcpy>
 8006b52:	4631      	mov	r1, r6
 8006b54:	4638      	mov	r0, r7
 8006b56:	f7ff fc83 	bl	8006460 <_free_r>
 8006b5a:	e7e9      	b.n	8006b30 <_realloc_r+0x1c>
 8006b5c:	4635      	mov	r5, r6
 8006b5e:	e7e7      	b.n	8006b30 <_realloc_r+0x1c>

08006b60 <_malloc_usable_size_r>:
 8006b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b64:	1f18      	subs	r0, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bfbc      	itt	lt
 8006b6a:	580b      	ldrlt	r3, [r1, r0]
 8006b6c:	18c0      	addlt	r0, r0, r3
 8006b6e:	4770      	bx	lr

08006b70 <_init>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	bf00      	nop
 8006b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b76:	bc08      	pop	{r3}
 8006b78:	469e      	mov	lr, r3
 8006b7a:	4770      	bx	lr

08006b7c <_fini>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr
